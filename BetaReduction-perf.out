---------- run perl6-m ----------
1..7
# CurryStats: ( 1p,    273f,  0o,  372+5i)
#    89 (  2):                        AppT => ( 0p,     89f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm)),
#                                     LamT => ( 0p,     89f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    27 (  1):                           Y => ( 0p,     27f,  0o,    2+ 0i :(Callable -> Mu))
#    22 (  1):                        VarT => ( 0p,     22f,  0o,    1+ 0i :(Str -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                      findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 27):                           I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                     cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                    #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                   #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                  Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                                 Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β0   (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β1   λa.λb.(λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)) b a
#     =_β2   λa.λb.(λg.λx.(λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)) b a
#     =_β3   λa.λb.(λx.(λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) x)) b a
#     =_β4   λa.λb.(λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) b) a
#     =_β5   λa.λb.(λx.λy.(λf1.λf2.λ_.λh.h f1 f2) y x) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) b) a
#     =_β6   λa.λb.(λy.(λf1.λf2.λ_.λh.h f1 f2) y ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) b)) a
#     =_β7   λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) b)
#     =_β8   λa.λb.(λf2.λ_.λh.h a f2) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) b)
#     =_β9   λa.λb.λ_.λh.h a ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) b)
#     =_β10  λa.λb.λ_.λh.h a ((λx.λy.(λf1.λf2.λ_.λh.h f1 f2) y x) (λh.λ_.h) b)
#     =_β11  λa.λb.λ_.λh.h a ((λy.(λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h)) b)
#     =_β12  λa.λb.λ_.λh.h a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β13  λa.λb.λ_.λh.h a ((λf2.λ_.λh.h b f2) (λh.λ_.h))
#     =_β14  λa.λb.λ_.λh.h a (λ_.λh.h b (λh.λ_.h))
#     (14 steps)
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β0   λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β1   λa.λb.(λf2.λ_.λh.h a f2) ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β2   λa.λb.λ_.λh.h a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β3   λa.λb.λ_.λh.h a ((λf2.λ_.λh.h b f2) (λh.λ_.h))
#     =_β4   λa.λb.λ_.λh.h a (λ_.λh.h b (λh.λ_.h))
#     (4 steps)
# 11.38 = 9.20 + 2.17 sec (81% + 19%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β0   (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β1   λx.λy.(λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)) y x
#     =_β2   λx.λy.(λg.λx.(λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)) y x
#     =_β3   λx.λy.(λx.(λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) x)) y x
#     =_β4   λx.λy.(λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) y) x
#     =_β5   λx.λy.(λx.λy.(λf1.λf2.λ_.λh.h f1 f2) y x) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) y) x
#     =_β6   λx.λy.(λα1.(λf1.λf2.λ_.λh.h f1 f2) α1 ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) y)) x
#     =_β7   λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) y)
#     =_β8   λx.λy.(λf2.λ_.λh.h x f2) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) y)
#     =_β9   λx.λy.λ_.λh.h x ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h) y)
#     =_β10  λx.λy.λ_.λh.h x ((λx.λy.(λf1.λf2.λ_.λh.h f1 f2) y x) (λh.λ_.h) y)
#     =_β11  λx.λy.λ_.λh.h x ((λy.(λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h)) y)
#     =_β12  λx.λy.λ_.λh.h x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β13  λx.λy.λ_.λh.h x ((λf2.λ_.λh.h y f2) (λh.λ_.h))
#     =_β14  λx.λy.λ_.λh.h x (λ_.λh.h y (λh.λ_.h))
#     (14 steps)
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β0   λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β1   λx.λy.(λf2.λ_.λh.h x f2) ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β2   λx.λy.λ_.λh.h x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β3   λx.λy.λ_.λh.h x ((λf2.λ_.λh.h y f2) (λh.λ_.h))
#     =_β4   λx.λy.λ_.λh.h x (λ_.λh.h y (λh.λ_.h))
#     (4 steps)
# 12.00 = 9.83 + 2.17 sec (82% + 18%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
#     =_β0   (x x)
#     (0 steps)
#     =_β0   (x x)
#     (0 steps)
# 0.16 = 0.06 + 0.09 sec (40% + 60%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
#     =_β0   (λx.x) x
#     =_β1   x
#     (1 steps)
#     =_β0   x
#     (0 steps)
# 0.13 = 0.09 + 0.03 sec (75% + 25%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.23 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 1p,  19487f,  0o, 2619+5i)
#  1697 (  2):                       π2->2 => ( 0p,   1697f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,   1697f,  0o,    1+ 0i :(TPair -> Mu))
#  1692 (  1):                        Pair => ( 0p,   1692f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#  1645 (  1):    Term->srcLesser-internal => ( 0p,   1645f,  0o,    1+ 0i :(TTerm -> TPair))
#  1048 (  1):               free-varName? => ( 0p,   1048f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   956 (  1):                     Str-eq? => ( 0p,    956f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   867 (  1):                      #false => ( 0p,    867f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   435 (  2):                       π2->1 => ( 0p,    435f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    435f,  0o,    1+ 0i :(TPair -> Mu))
#   383 (  1):               <<Aka+TTerm>> => ( 0p,    383f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   318 (  1):                betaContract => ( 0p,    318f,  0o,    2+ 0i :(TTerm -> Mu))
#   265 (  1):                        LamT => ( 0p,    265f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   243 (  1):               <<Aka+TTerm>> => ( 0p,    243f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   240 (  1):                        Some => ( 0p,    240f,  0o,    1+ 0i :(Mu -> Mu))
#   230 (  1):                       #true => ( 0p,    230f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   222 (  1):                        AppT => ( 0p,    222f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   215 (  1):               <<Aka+TTerm>> => ( 0p,    215f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   199 (  1):               <<Aka+TTerm>> => ( 0p,    199f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   197 (  1):               <<Aka+TTerm>> => ( 0p,    197f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   183 (  1):               <<Aka+TTerm>> => ( 0p,    183f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   181 (  1):          subst-alpha_direct => ( 0p,    181f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm))
#   180 (  1):                   <<TTerm>> => ( 0p,    180f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   144 (  1):                        None => ( 0p,    144f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   139 (  1):               <<Aka+TTerm>> => ( 0p,    139f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   133 (  1):                   <<TTerm>> => ( 0p,    133f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   130 (  1):               <<Aka+TTerm>> => ( 0p,    130f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   129 (  2):                   <<TTerm>> => ( 0p,    129f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,    129f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   128 (  1):                   <<TTerm>> => ( 0p,    128f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   107 (  1):               <<Aka+TTerm>> => ( 0p,    107f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    92 (  1):                   <<TTerm>> => ( 0p,     92f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    85 (  1):           subst-alpha_Maybe => ( 0p,     85f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe))
#    76 (  2):                   <<TTerm>> => ( 0p,     76f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,     76f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    68 (  1):               <<Aka+TTerm>> => ( 0p,     68f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    67 (  1):               <<Aka+TTerm>> => ( 0p,     67f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    66 (  2):                   <<TTerm>> => ( 0p,     66f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     66f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    64 (  1):                   <<TTerm>> => ( 0p,     64f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    55 (  1):               Term->srcLess => ( 0p,     55f,  0o,    1+ 0i :(TTerm -> Str))
#    38 (  1):                    Term-eq? => ( 0p,     38f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    28 (  1):                           Y => ( 0p,     28f,  0o,    2+ 0i :(Callable -> Mu))
#    24 (  1):                        VarT => ( 0p,     24f,  0o,    1+ 0i :(Str -> TTerm))
#     5 (  2):                           I => ( 0p,      5f,  0o,    1+ 0i :(Mu -> Mu)),
#                   subst-par-alpha_direct => ( 0p,      5f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  4):                         nil => ( 0p,      2f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                     cons => ( 0p,      2f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                   findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 17):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
#     =_β0   λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
#     =_β1   λf1.λf2.λf3.λf4.λf5.λ_.(λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5))
#     =_β2   λf1.λf2.λf3.λf4.λf5.λ_.λh.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5) h)
#     =_β3   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.(λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5) h
#     =_β4   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.(λh.(λy.λ_.y) ((λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5) h)) h
#     =_β5   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.(λy.λ_.y) ((λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5) h)
#     =_β6   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.(λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5) h
#     =_β7   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) h f5
#     =_β8   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) h f4 f5
#     =_β9   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.(λk.(λk.(λx.x) k f1) k f2) h f3 f4 f5
#     =_β10  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.(λk.(λx.x) k f1) h f2 f3 f4 f5
#     =_β11  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.(λx.x) h f1 f2 f3 f4 f5
#     =_β12  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
#     (12 steps)
#     =_β0   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
#     (0 steps)
# 9.66 = 9.38 + 0.28 sec (97% + 3%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 1p,  25731f,  0o, 3506+5i)
#  2302 (  2):                       π2->2 => ( 0p,   2302f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,   2302f,  0o,    1+ 0i :(TPair -> Mu))
#  2296 (  1):                        Pair => ( 0p,   2296f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#  2235 (  1):    Term->srcLesser-internal => ( 0p,   2235f,  0o,    1+ 0i :(TTerm -> TPair))
#  1265 (  1):               free-varName? => ( 0p,   1265f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#  1145 (  1):                     Str-eq? => ( 0p,   1145f,  0o,    1+ 0i :(Str -> Str -> TBool))
#  1032 (  1):                      #false => ( 0p,   1032f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   540 (  2):                       π2->1 => ( 0p,    540f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    540f,  0o,    1+ 0i :(TPair -> Mu))
#   494 (  1):                betaContract => ( 0p,    494f,  0o,    2+ 0i :(TTerm -> Mu))
#   439 (  1):               <<Aka+TTerm>> => ( 0p,    439f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   390 (  1):                        Some => ( 0p,    390f,  0o,    1+ 0i :(Mu -> Mu))
#   366 (  1):                        LamT => ( 0p,    366f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   272 (  1):                       #true => ( 0p,    272f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   265 (  1):               <<Aka+TTerm>> => ( 0p,    265f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   258 (  1):               <<Aka+TTerm>> => ( 0p,    258f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   254 (  1):                        AppT => ( 0p,    254f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   242 (  1):               <<Aka+TTerm>> => ( 0p,    242f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   207 (  1):               <<Aka+TTerm>> => ( 0p,    207f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   204 (  1):               <<Aka+TTerm>> => ( 0p,    204f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   198 (  1):                        None => ( 0p,    198f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   194 (  1):          subst-alpha_direct => ( 0p,    194f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm))
#   180 (  1):                   <<TTerm>> => ( 0p,    180f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   146 (  1):               <<Aka+TTerm>> => ( 0p,    146f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   145 (  1):               <<Aka+TTerm>> => ( 0p,    145f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   133 (  1):                   <<TTerm>> => ( 0p,    133f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   130 (  1):               <<Aka+TTerm>> => ( 0p,    130f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   129 (  2):                   <<TTerm>> => ( 0p,    129f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,    129f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   128 (  1):                   <<TTerm>> => ( 0p,    128f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   121 (  1):           subst-alpha_Maybe => ( 0p,    121f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe))
#   107 (  1):               <<Aka+TTerm>> => ( 0p,    107f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    92 (  1):                   <<TTerm>> => ( 0p,     92f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    76 (  2):                   <<TTerm>> => ( 0p,     76f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,     76f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    71 (  1):               Term->srcLess => ( 0p,     71f,  0o,    1+ 0i :(TTerm -> Str))
#    68 (  1):               <<Aka+TTerm>> => ( 0p,     68f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    67 (  1):               <<Aka+TTerm>> => ( 0p,     67f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    66 (  2):                   <<TTerm>> => ( 0p,     66f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     66f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    64 (  1):                   <<TTerm>> => ( 0p,     64f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    61 (  1):             Term->srcLesser => ( 0p,     61f,  0o,    1+ 0i :(TTerm -> Str))
#    58 (  1):                    Term-eq? => ( 0p,     58f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    52 (  1):               <<Aka+TTerm>> => ( 0p,     52f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    28 (  1):                           Y => ( 0p,     28f,  0o,    2+ 0i :(Callable -> Mu))
#    24 (  1):                        VarT => ( 0p,     24f,  0o,    1+ 0i :(Str -> TTerm))
#     6 (  1):                           I => ( 0p,      6f,  0o,    1+ 0i :(Mu -> Mu))
#     5 (  1):      subst-par-alpha_direct => ( 0p,      5f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  4):                         nil => ( 0p,      2f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                     cons => ( 0p,      2f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                   findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 17):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))

Output completed (1 min 23 sec consumed) - Normal Termination