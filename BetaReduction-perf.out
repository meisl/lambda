---------- run perl6-m ----------
1..7
# CurryStats: ( 1p,    406f,  0o,  508+5i)
#   180 (  1):                        AppT => ( 0p,    180f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   119 (  1):                        LamT => ( 0p,    119f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#    32 (  1):                           Y => ( 0p,     32f,  0o,    2+ 0i :(Callable -> Mu))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    29 (  1):                        VarT => ( 0p,     29f,  0o,    1+ 0i :(Str -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                      findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 30):                           I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      car => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      cdr => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                     cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                    #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                    foldl => ( 0p,      0f,  0o,    2+ 0i :(Callable -> Mu -> TList -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                   #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                  Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                                 Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
# 3.23 = 2.52 + 0.72 sec (78% + 22%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
# 3.58 = 2.84 + 0.73 sec (79% + 21%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
# 0.02 = 0.00 + 0.02 sec (0% + 100%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
# 0.03 = 0.03 + 0.00 sec (100% + 0%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.33 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 1p,  10716f,  0o, 1275+5i)
#   974 (  1):               free-varName? => ( 0p,    974f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   827 (  1):                     Str-eq? => ( 0p,    827f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   738 (  1):                      #false => ( 0p,    738f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   411 (  2):                       π2->2 => ( 0p,    411f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    411f,  0o,    1+ 0i :(TPair -> Mu))
#   337 (  1):                        Pair => ( 0p,    337f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   293 (  1):                       #true => ( 0p,    293f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   285 (  1):                        None => ( 0p,    285f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   272 (  2):                       π2->1 => ( 0p,    272f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    272f,  0o,    1+ 0i :(TPair -> Mu))
#   263 (  1):    Term->srcLesser-internal => ( 0p,    263f,  0o,    1+ 0i :(TTerm -> TPair))
#   258 (  1):          betaContract_multi => ( 0p,    258f,  0o,    1+ 0i :(TTerm -> Mu))
#   247 (  1):                        AppT => ( 0p,    247f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   214 (  1):               <<Aka+TTerm>> => ( 0p,    214f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   203 (  1):                        LamT => ( 0p,    203f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   197 (  1):                         nil => ( 0p,    197f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   192 (  1):                        cons => ( 0p,    192f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   180 (  1):      subst-par-alpha_direct => ( 0p,    180f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#   129 (  1):                       first => ( 0p,    129f,  0o,    1+ 0i :(Callable -> TList -> Mu))
#   125 (  1):                      exists => ( 0p,    125f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   117 (  1):               <<Aka+TTerm>> => ( 0p,    117f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   105 (  1):                collect-args => ( 0p,    105f,  0o,    1+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#   100 (  1):               <<Aka+TTerm>> => ( 0p,    100f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    98 (  2):               <<Aka+TTerm>> => ( 0p,     98f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     98f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    90 (  1):               <<Aka+TTerm>> => ( 0p,     90f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    88 (  2):                   <<TTerm>> => ( 0p,     88f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     88f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    83 (  1):                      K1None => ( 0p,     83f,  0o,    1+ 0i :(Mu -> Mu))
#    82 (  1):                        Some => ( 0p,     82f,  0o,    1+ 0i :(Mu -> Mu))
#    81 (  1):                   foldr-rec => ( 0p,     81f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#    76 (  1):               <<Aka+TTerm>> => ( 0p,     76f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    61 (  1):    collect-args-and-lambdas => ( 0p,     61f,  0o,    1+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    60 (  2):               <<Aka+TTerm>> => ( 0p,     60f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#               filter-substs-and-contract => ( 0p,     60f,  0o,    1+ 0i :(Mu -> TList -> Mu))
#    58 (  2):                       foldr => ( 0p,     58f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu)),
#                                   filter => ( 0p,     58f,  0o,    1+ 0i :(Callable -> TList -> TList))
#    51 (  1):               <<Aka+TTerm>> => ( 0p,     51f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    38 (  1):                    Term-eq? => ( 0p,     38f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    36 (  1):                         not => ( 0p,     36f,  0o,    1+ 0i :(TBool -> TBool))
#    34 (  1):                           Y => ( 0p,     34f,  0o,    2+ 0i :(Callable -> Mu))
#    31 (  1):                        VarT => ( 0p,     31f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    21 (  1):                           I => ( 0p,     21f,  0o,    1+ 0i :(Mu -> Mu))
#     7 (  1):                       foldl => ( 0p,      7f,  0o,    2+ 0i :(Callable -> Mu -> TList -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     3 (  2):                      findFP => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 20):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      car => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      cdr => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
# 2.48 = 2.44 + 0.05 sec (98% + 2%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 1p,  13081f,  0o, 1516+5i)
#  1078 (  1):               free-varName? => ( 0p,   1078f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   937 (  1):                     Str-eq? => ( 0p,    937f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   821 (  1):                      #false => ( 0p,    821f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   518 (  2):                       π2->2 => ( 0p,    518f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    518f,  0o,    1+ 0i :(TPair -> Mu))
#   436 (  1):                        Pair => ( 0p,    436f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   373 (  2):                        None => ( 0p,    373f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu)),
#                                    #true => ( 0p,    373f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   340 (  1):          betaContract_multi => ( 0p,    340f,  0o,    1+ 0i :(TTerm -> Mu))
#   339 (  1):    Term->srcLesser-internal => ( 0p,    339f,  0o,    1+ 0i :(TTerm -> TPair))
#   337 (  2):                       π2->1 => ( 0p,    337f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    337f,  0o,    1+ 0i :(TPair -> Mu))
#   274 (  1):                        AppT => ( 0p,    274f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   258 (  1):                         nil => ( 0p,    258f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   243 (  1):      subst-par-alpha_direct => ( 0p,    243f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#   240 (  1):                        cons => ( 0p,    240f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   236 (  1):               <<Aka+TTerm>> => ( 0p,    236f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   228 (  1):                        LamT => ( 0p,    228f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   185 (  1):                       first => ( 0p,    185f,  0o,    1+ 0i :(Callable -> TList -> Mu))
#   141 (  1):                      exists => ( 0p,    141f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   139 (  1):                collect-args => ( 0p,    139f,  0o,    1+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#   124 (  1):                        Some => ( 0p,    124f,  0o,    1+ 0i :(Mu -> Mu))
#   120 (  1):               <<Aka+TTerm>> => ( 0p,    120f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   117 (  1):               <<Aka+TTerm>> => ( 0p,    117f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   113 (  1):               <<Aka+TTerm>> => ( 0p,    113f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   110 (  1):                      K1None => ( 0p,    110f,  0o,    1+ 0i :(Mu -> Mu))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    94 (  1):               <<Aka+TTerm>> => ( 0p,     94f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    92 (  1):               <<Aka+TTerm>> => ( 0p,     92f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    89 (  1):                   foldr-rec => ( 0p,     89f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#    88 (  2):                   <<TTerm>> => ( 0p,     88f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     88f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    82 (  1):  filter-substs-and-contract => ( 0p,     82f,  0o,    1+ 0i :(Mu -> TList -> Mu))
#    78 (  1):    collect-args-and-lambdas => ( 0p,     78f,  0o,    1+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    66 (  2):                       foldr => ( 0p,     66f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu)),
#                                   filter => ( 0p,     66f,  0o,    1+ 0i :(Callable -> TList -> TList))
#    60 (  1):               <<Aka+TTerm>> => ( 0p,     60f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  1):                    Term-eq? => ( 0p,     58f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    51 (  1):               <<Aka+TTerm>> => ( 0p,     51f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    47 (  1):                         not => ( 0p,     47f,  0o,    1+ 0i :(TBool -> TBool))
#    34 (  1):                           Y => ( 0p,     34f,  0o,    2+ 0i :(Callable -> Mu))
#    32 (  1):                           I => ( 0p,     32f,  0o,    1+ 0i :(Mu -> Mu))
#    31 (  1):                        VarT => ( 0p,     31f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    18 (  1):                       foldl => ( 0p,     18f,  0o,    2+ 0i :(Callable -> Mu -> TList -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     3 (  2):                      findFP => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 20):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      car => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      cdr => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))

Output completed (1 min 3 sec consumed) - Normal Termination