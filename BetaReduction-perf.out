---------- run perl6-m ----------
1..7
# CurryStats: ( 1p,    405f,  0o,  507+5i)
#   180 (  1):                        AppT => ( 0p,    180f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   119 (  1):                        LamT => ( 0p,    119f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#    31 (  1):                           Y => ( 0p,     31f,  0o,    2+ 0i :(Callable -> Mu))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    29 (  1):                        VarT => ( 0p,     29f,  0o,    1+ 0i :(Str -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                      findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 30):                           I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      car => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      cdr => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                     cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                    #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                    foldl => ( 0p,      0f,  0o,    2+ 0i :(Callable -> Mu -> TList -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                   #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                  Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                                 Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
# 2.39 = 1.67 + 0.72 sec (70% + 30%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
# 2.45 = 1.70 + 0.75 sec (69% + 31%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
# 0.02 = 0.02 + 0.00 sec (100% + 0%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
# 0.03 = 0.03 + 0.00 sec (100% + 0%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.25 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: (18p,   6960f,  0o, 1154+5i)
#   511 (  1):               free-varName? => ( 0p,    511f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   483 (  1):                     Str-eq? => ( 0p,    483f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   403 (  1):                      #false => ( 0p,    403f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   335 (  2):                       π2->2 => ( 0p,    335f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    335f,  0o,    1+ 0i :(TPair -> Mu))
#   299 (  1):                        Pair => ( 0p,    299f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   263 (  1):    Term->srcLesser-internal => ( 0p,    263f,  0o,    1+ 0i :(TTerm -> TPair))
#   233 (  1):                        AppT => ( 0p,    233f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   197 (  1):                        LamT => ( 0p,    197f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   177 (  2):                       π2->1 => ( 0p,    177f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    177f,  0o,    1+ 0i :(TPair -> Mu))
#   158 (  1):                       #true => ( 0p,    158f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   127 (  1):          betaContract_multi => ( 0p,    127f,  0o,    1+ 0i :(TTerm -> Mu))
#   108 (  2):                        cons => ( 0p,    108f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                            <<Aka+TTerm>> => ( 0p,    108f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   104 (  1):                        Some => ( 0p,    104f,  0o,    1+ 0i :(Mu -> Mu))
#   100 (  1):      subst-par-alpha_direct => ( 0p,    100f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#    94 (  1):                       first => ( 0p,     94f,  0o,    1+ 0i :(Callable -> TList -> Mu))
#    93 (  1):                        None => ( 0p,     93f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#    85 (  1):                         nil => ( 0p,     85f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#    72 (  1):               <<Aka+TTerm>> => ( 0p,     72f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    69 (  1):                collect-args => ( 0p,     69f,  0o,    1+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    68 (  1):               <<Aka+TTerm>> => ( 0p,     68f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    66 (  1):               <<Aka+TTerm>> => ( 0p,     66f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    60 (  1):               <<Aka+TTerm>> => ( 0p,     60f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  1):               <<Aka+TTerm>> => ( 0p,     58f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    56 (  2):                      exists => ( 0p,     56f,  0o,    2+ 0i :(Callable -> TList -> Mu)),
#                                <<TTerm>> => ( 0p,     56f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    52 (  1):               <<Aka+TTerm>> => ( 0p,     52f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    38 (  1):                    Term-eq? => ( 0p,     38f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    33 (  1):                           Y => ( 0p,     33f,  0o,    2+ 0i :(Callable -> Mu))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    29 (  1):                        VarT => ( 0p,     29f,  0o,    1+ 0i :(Str -> TTerm))
#    20 (  1):                       foldr => ( 0p,     20f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu))
#    17 (  1):                  foldl(1/3) => ( 0p,     17f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#     8 (  1):                       foldl => (17p,      8f,  0o,    2+ 0i :(Callable -> Mu -> TList -> Mu))
#     5 (  1):                           I => ( 0p,      5f,  0o,    1+ 0i :(Mu -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     3 (  2):                      findFP => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 21):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      car => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      cdr => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
# 4.08 = 4.03 + 0.05 sec (99% + 1%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: (29p,   9476f,  0o, 1512+5i)
#   681 (  1):               free-varName? => ( 0p,    681f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   637 (  1):                     Str-eq? => ( 0p,    637f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   530 (  1):                      #false => ( 0p,    530f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   426 (  2):                       π2->2 => ( 0p,    426f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    426f,  0o,    1+ 0i :(TPair -> Mu))
#   386 (  1):                        Pair => ( 0p,    386f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   339 (  1):    Term->srcLesser-internal => ( 0p,    339f,  0o,    1+ 0i :(TTerm -> TPair))
#   289 (  1):                        LamT => ( 0p,    289f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   262 (  1):                        AppT => ( 0p,    262f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   256 (  1):          betaContract_multi => ( 0p,    256f,  0o,    1+ 0i :(TTerm -> Mu))
#   219 (  2):                       π2->1 => ( 0p,    219f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    219f,  0o,    1+ 0i :(TPair -> Mu))
#   215 (  1):                        Some => ( 0p,    215f,  0o,    1+ 0i :(Mu -> Mu))
#   198 (  1):                       #true => ( 0p,    198f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   147 (  1):                        cons => ( 0p,    147f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   142 (  1):      subst-par-alpha_direct => ( 0p,    142f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#   138 (  1):                        None => ( 0p,    138f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   128 (  1):                         nil => ( 0p,    128f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   125 (  1):               <<Aka+TTerm>> => ( 0p,    125f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   118 (  1):                       first => ( 0p,    118f,  0o,    1+ 0i :(Callable -> TList -> Mu))
#   106 (  1):                collect-args => ( 0p,    106f,  0o,    1+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    81 (  1):               <<Aka+TTerm>> => ( 0p,     81f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    79 (  1):               <<Aka+TTerm>> => ( 0p,     79f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    70 (  1):               <<Aka+TTerm>> => ( 0p,     70f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    65 (  1):               <<Aka+TTerm>> => ( 0p,     65f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    64 (  1):                      exists => ( 0p,     64f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#    62 (  1):               <<Aka+TTerm>> => ( 0p,     62f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    60 (  1):               <<Aka+TTerm>> => ( 0p,     60f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  1):                    Term-eq? => ( 0p,     58f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    56 (  1):                   <<TTerm>> => ( 0p,     56f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    53 (  1):               <<Aka+TTerm>> => ( 0p,     53f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    33 (  1):                           Y => ( 0p,     33f,  0o,    2+ 0i :(Callable -> Mu))
#    31 (  1):                       foldr => ( 0p,     31f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    29 (  1):                        VarT => ( 0p,     29f,  0o,    1+ 0i :(Str -> TTerm))
#    28 (  1):                  foldl(1/3) => ( 0p,     28f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#    23 (  1):                       foldl => (28p,     23f,  0o,    2+ 0i :(Callable -> Mu -> TList -> Mu))
#     6 (  1):                           I => ( 0p,      6f,  0o,    1+ 0i :(Mu -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     3 (  2):                      findFP => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      3f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 21):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      car => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      cdr => ( 0p,      0f,  0o,    1+ 0i :(TList -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))

Output completed (1 min 0 sec consumed) - Normal Termination