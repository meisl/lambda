---------- run perl6-m ----------
1..7
# CurryStats: ( 1p,    401f,  0o,  503+5i)
#   178 (  1):                        AppT => ( 0p,    178f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   118 (  1):                        LamT => ( 0p,    118f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#    30 (  2):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                                        Y => ( 0p,     30f,  0o,    2+ 0i :(Callable -> Mu))
#    29 (  1):                        VarT => ( 0p,     29f,  0o,    1+ 0i :(Str -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                      findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 27):                           I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                     cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                    #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                   #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                  Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                                 Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                        subst-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                       subst-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
# 3.16 = 2.44 + 0.72 sec (77% + 23%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
# 3.44 = 2.66 + 0.78 sec (77% + 23%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
# 0.02 = 0.00 + 0.02 sec (0% + 100%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
# 0.02 = 0.02 + 0.00 sec (100% + 0%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.3 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 1p,   8954f,  0o, 1280+5i)
#  1048 (  1):               free-varName? => ( 0p,   1048f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   956 (  1):                     Str-eq? => ( 0p,    956f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   865 (  1):                      #false => ( 0p,    865f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   311 (  1):                        AppT => ( 0p,    311f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   294 (  1):                        LamT => ( 0p,    294f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   273 (  1):                betaContract => ( 0p,    273f,  0o,    2+ 0i :(TTerm -> Mu))
#   265 (  3):                        Pair => ( 0p,    265f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                    π2->2 => ( 0p,    265f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    265f,  0o,    1+ 0i :(TPair -> Mu))
#   263 (  1):    Term->srcLesser-internal => ( 0p,    263f,  0o,    1+ 0i :(TTerm -> TPair))
#   227 (  1):                       #true => ( 0p,    227f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   198 (  1):                        Some => ( 0p,    198f,  0o,    1+ 0i :(Mu -> Mu))
#   183 (  1):               <<Aka+TTerm>> => ( 0p,    183f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   181 (  1):          subst-alpha_direct => ( 0p,    181f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm))
#   133 (  1):                        None => ( 0p,    133f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   104 (  1):               <<Aka+TTerm>> => ( 0p,    104f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    99 (  2):               <<Aka+TTerm>> => ( 0p,     99f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     99f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    97 (  1):               <<Aka+TTerm>> => ( 0p,     97f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    89 (  1):               <<Aka+TTerm>> => ( 0p,     89f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    85 (  1):           subst-alpha_Maybe => ( 0p,     85f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe))
#    83 (  1):               <<Aka+TTerm>> => ( 0p,     83f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    80 (  1):               <<Aka+TTerm>> => ( 0p,     80f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    79 (  2):                   <<TTerm>> => ( 0p,     79f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     79f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    69 (  1):               <<Aka+TTerm>> => ( 0p,     69f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    64 (  2):                       π2->1 => ( 0p,     64f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,     64f,  0o,    1+ 0i :(TPair -> Mu))
#    58 (  1):               <<Aka+TTerm>> => ( 0p,     58f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    38 (  1):                    Term-eq? => ( 0p,     38f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    31 (  2):                           Y => ( 0p,     31f,  0o,    2+ 0i :(Callable -> Mu)),
#                                     VarT => ( 0p,     31f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#     8 (  1):                  betaReduce => ( 0p,      8f,  0o,    0+ 1i :(Mu -> Mu))
#     5 (  2):                           I => ( 0p,      5f,  0o,    1+ 0i :(Mu -> Mu)),
#                   subst-par-alpha_direct => ( 0p,      5f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  4):                         nil => ( 0p,      2f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                     cons => ( 0p,      2f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                   findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 16):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
# 3.63 = 3.58 + 0.05 sec (99% + 1%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 1p,  11395f,  0o, 1626+5i)
#  1265 (  1):               free-varName? => ( 0p,   1265f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#  1145 (  1):                     Str-eq? => ( 0p,   1145f,  0o,    1+ 0i :(Str -> Str -> TBool))
#  1030 (  1):                      #false => ( 0p,   1030f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   435 (  1):                betaContract => ( 0p,    435f,  0o,    2+ 0i :(TTerm -> Mu))
#   395 (  1):                        LamT => ( 0p,    395f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   343 (  1):                        AppT => ( 0p,    343f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   341 (  3):                        Pair => ( 0p,    341f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                    π2->2 => ( 0p,    341f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    341f,  0o,    1+ 0i :(TPair -> Mu))
#   339 (  1):    Term->srcLesser-internal => ( 0p,    339f,  0o,    1+ 0i :(TTerm -> TPair))
#   335 (  1):                        Some => ( 0p,    335f,  0o,    1+ 0i :(Mu -> Mu))
#   269 (  1):                       #true => ( 0p,    269f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   201 (  1):               <<Aka+TTerm>> => ( 0p,    201f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   194 (  1):          subst-alpha_direct => ( 0p,    194f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TTerm))
#   184 (  1):                        None => ( 0p,    184f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   121 (  1):           subst-alpha_Maybe => ( 0p,    121f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe))
#   114 (  3):               <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    94 (  1):               <<Aka+TTerm>> => ( 0p,     94f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    83 (  2):               <<Aka+TTerm>> => ( 0p,     83f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     83f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    80 (  1):               <<Aka+TTerm>> => ( 0p,     80f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    79 (  2):                   <<TTerm>> => ( 0p,     79f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     79f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    76 (  2):                       π2->1 => ( 0p,     76f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,     76f,  0o,    1+ 0i :(TPair -> Mu))
#    58 (  2):                    Term-eq? => ( 0p,     58f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                            <<Aka+TTerm>> => ( 0p,     58f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    55 (  1):               <<Aka+TTerm>> => ( 0p,     55f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    31 (  2):                           Y => ( 0p,     31f,  0o,    2+ 0i :(Callable -> Mu)),
#                                     VarT => ( 0p,     31f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    10 (  1):                  betaReduce => ( 0p,     10f,  0o,    0+ 1i :(Mu -> Mu))
#     6 (  1):                           I => ( 0p,      6f,  0o,    1+ 0i :(Mu -> Mu))
#     5 (  1):      subst-par-alpha_direct => ( 0p,      5f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  4):                         nil => ( 0p,      2f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                     cons => ( 0p,      2f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                   findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 16):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))

Output completed (59 sec consumed) - Normal Termination