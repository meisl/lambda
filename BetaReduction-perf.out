---------- run perl6-m ----------
1..5
# CurryStats: ( 2p,     74f,  0o,  169+5i)
#    30 (  1):                       B => ( 1p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    21 (  1):                       Y => ( 0p,     21f,  0o,    2+ 0i :(Callable -> Mu))
#     9 (  1):                    VarT => ( 0p,      9f,  0o,    1+ 0i :(Str -> TTerm))
#     4 (  2):                       K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                  K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                  findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                       findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 21):                       I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                  _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                  _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                  nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                  not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                 AppT => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm)),
#                                 LamT => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm)),
#                                 _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                 cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                subst => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm -> TTerm)),
#                               #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                               B(1/2) => ( 0p,      0f,  0o,    0+ 0i :(Callable -> Mu)),
#                              Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                             Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                            free-vars => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                          subst-first => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> Mu)),
#                         Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                     subst-first_VarT => ( 0p,      0f,  0o,    1+ 0i :(Str -> TList -> Mu)),
#                     subst-with-alpha => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TList -> TTerm -> Mu))
ok 1 - (x x) reduces to itself (sanity check)
ok 2 - ((λx.x) x) reduces to x (sanity check)
ok 3 - $bigTerm.lambda is (λf1.(λf2.(λf3.(λf4.(λf5.((λy.(λ_.y)) ((λg.(λh.((λy.(λ_.y)) (g h)))) ((λg.(λh.((λy.(λ_.y)) (g h)))) (λk.(((λk.(((λk.(((λk.(((λk.(((λx.x) k) f1)) k) f2)) k) f3)) k) f4)) k) f5))))))))))
ok 4 - $expectedTerm.lambda is (λf1.(λf2.(λf3.(λf4.(λf5.(λ_.(λh.(λ_.(λ_.(((((h f1) f2) f3) f4) f5))))))))))
# CurryStats: ( 3p,    522f,  0o,  234+5i)
#   112 (  1):            Term->source => ( 0p,    112f,  0o,    1+ 0i :(TTerm -> Str))
#    59 (  1):                       I => ( 0p,     59f,  0o,    1+ 0i :(Mu -> Mu))
#    31 (  1):                    LamT => ( 0p,     31f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#    30 (  1):                       B => ( 1p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    24 (  1):                    AppT => ( 0p,     24f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#    21 (  1):                       Y => ( 0p,     21f,  0o,    2+ 0i :(Callable -> Mu))
#    14 (  1):                    VarT => ( 0p,     14f,  0o,    1+ 0i :(Str -> TTerm))
#     5 (  1):                     nil => ( 0p,      5f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#     4 (  3):                       K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                  K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                               #false => ( 0p,      4f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#     2 (  2):                    cons => ( 0p,      2f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                            subst-seq => ( 0p,      2f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe))
#     1 (  7):                   #true => ( 0p,      1f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                subst => ( 0p,      1f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm -> TTerm)),
#                               findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                              Str-eq? => ( 1p,      1f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                             Term-eq? => ( 0p,      1f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                         Str-eq?(1/2) => ( 0p,      1f,  0o,    0+ 0i :(Str -> TBool)),
#                       findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 (  9):                     _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                  _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                  not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                 _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                               B(1/2) => ( 0p,      0f,  0o,    0+ 0i :(Callable -> Mu)),
#                            free-vars => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                          subst-first => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> Mu)),
#                     subst-first_VarT => ( 0p,      0f,  0o,    1+ 0i :(Str -> TList -> Mu)),
#                     subst-with-alpha => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TList -> TTerm -> Mu))
# 5.8 sec consumed for β-reduction
ok 5 - $bigTerm reduces to (λf1.(λf2.(λf3.(λf4.(λf5.(λ_.(λh.(λ_.(λ_.(((((h f1) f2) f3) f4) f5))))))))))
# CurryStats: (40p,   6075f,  0o,  635+5i)
#   455 (  1):                  #false => ( 0p,    455f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   396 (  2):                   π1->1 => ( 0p,    396f,  0o,    0+ 0i :(Mu -> Mu)),
#                           VarT->name => ( 0p,    396f,  0o,    1+ 0i :(TTerm -> Str))
#   255 (  1):                  exists => ( 0p,    255f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   220 (  1):                 Str-eq? => (38p,    220f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   204 (  1):               <<TTerm>> => ( 0p,    204f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   175 (  1):             free-under? => ( 0p,    175f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm -> TBool))
#   174 (  1):      free-vars-internal => ( 1p,    174f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
#   157 (  1):                     nil => ( 0p,    157f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   148 (  1):                    Some => ( 0p,    148f,  0o,    1+ 0i :(Mu -> Mu))
#   147 (  1):            betaContract => ( 0p,    147f,  0o,    2+ 0i :(TTerm -> Mu))
#   141 (  1):            Term->source => ( 0p,    141f,  0o,    1+ 0i :(TTerm -> Str))
#   132 (  1):                    LamT => ( 0p,    132f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   126 (  1):               <<TTerm>> => ( 0p,    126f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   122 (  1):               subst-seq => ( 0p,    122f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe))
#   119 (  1):                   #true => ( 0p,    119f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   112 (  1):                    cons => ( 0p,    112f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   105 (  1):         LamT-into-Maybe => ( 0p,    105f,  0o,    0+ 0i name:(Mu -> Mu -> Mu))
#    91 (  1):               <<TTerm>> => ( 0p,     91f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    88 (  2):                    None => ( 0p,     88f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu)),
#                            <<TTerm>> => ( 0p,     88f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    75 (  2):                       I => ( 0p,     75f,  0o,    1+ 0i :(Mu -> Mu)),
#                             K1#false => ( 0p,     75f,  0o,    1+ 0i :(Mu -> Mu))
#    70 (  1):               <<TTerm>> => ( 0p,     70f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    63 (  1):               <<TTerm>> => ( 0p,     63f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  1):               <<TTerm>> => ( 0p,     58f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    57 (  3):                   π2->1 => ( 0p,     57f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                            Pair->fst => ( 0p,     57f,  0o,    1+ 0i :(TPair -> Mu)),
#                            foldr-rec => ( 0p,     57f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#    56 (  1):                    AppT => ( 0p,     56f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#    53 (  1):               <<TTerm>> => ( 0p,     53f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    52 (  1):                Term-eq? => ( 0p,     52f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    38 (  1):            Str-eq?(1/2) => ( 0p,     38f,  0o,    0+ 0i :(Str -> TBool))
#    30 (  1):                       B => ( 1p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    21 (  1):                       Y => ( 0p,     21f,  0o,    2+ 0i :(Callable -> Mu))
#    14 (  1):                    VarT => ( 0p,     14f,  0o,    1+ 0i :(Str -> TTerm))
#    13 (  1):                   subst => ( 0p,     13f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm -> TTerm))
#     4 (  2):                       K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                  K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                  findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                       findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 (  9):                     _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                  _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                  not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                 _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                               B(1/2) => ( 0p,      0f,  0o,    0+ 0i :(Callable -> Mu)),
#                            free-vars => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                          subst-first => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> Mu)),
#                     subst-first_VarT => ( 0p,      0f,  0o,    1+ 0i :(Str -> TList -> Mu)),
#                     subst-with-alpha => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TList -> TTerm -> Mu))

Output completed (34 sec consumed) - Normal Termination