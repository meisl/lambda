---------- run perl6-m ----------
1..7
# CurryStats: ( 1p,    266f,  0o,  363+5i)
#    87 (  1):                        LamT => ( 0p,     87f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#    86 (  1):                        AppT => ( 0p,     86f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    25 (  1):                           Y => ( 0p,     25f,  0o,    2+ 0i :(Callable -> Mu))
#    22 (  1):                        VarT => ( 0p,     22f,  0o,    1+ 0i :(Str -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                      findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 25):                           I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                     cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                    #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                   #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                  Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                                 Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
# 4.55 = 3.42 + 1.13 sec (75% + 25%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
# 4.92 = 3.67 + 1.25 sec (75% + 25%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
# 0.03 = 0.02 + 0.02 sec (50% + 50%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
# 0.05 = 0.05 + 0.00 sec (100% + 0%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.28 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 1p,  11529f,  0o, 1406+5i)
#  1139 (  1):               free-varName? => ( 0p,   1139f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#   956 (  1):                     Str-eq? => ( 0p,    956f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   926 (  1):                      #false => ( 0p,    926f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   363 (  2):                       π2->2 => ( 0p,    363f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    363f,  0o,    1+ 0i :(TPair -> Mu))
#   344 (  1):                        Some => ( 0p,    344f,  0o,    1+ 0i :(Mu -> Mu))
#   301 (  1):                        Pair => ( 0p,    301f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   273 (  1):                betaContract => ( 0p,    273f,  0o,    2+ 0i :(TTerm -> Mu))
#   271 (  1):       subst-par-alpha_Maybe => ( 0p,    271f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe))
#   264 (  1):                        None => ( 0p,    264f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   263 (  2):                        LamT => ( 0p,    263f,  0o,    1+ 0i :(Str -> TTerm -> TTerm)),
#                 Term->srcLesser-internal => ( 0p,    263f,  0o,    1+ 0i :(TTerm -> TPair))
#   246 (  2):                       π2->1 => ( 0p,    246f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    246f,  0o,    1+ 0i :(TPair -> Mu))
#   238 (  1):                         nil => ( 0p,    238f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   228 (  1):                       #true => ( 0p,    228f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   204 (  1):                        AppT => ( 0p,    204f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   183 (  1):               <<Aka+TTerm>> => ( 0p,    183f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   149 (  1):                       first => ( 0p,    149f,  0o,    1+ 0i :(Callable -> TList -> Mu))
#   123 (  1):                      exists => ( 0p,    123f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   104 (  1):               <<Aka+TTerm>> => ( 0p,    104f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   100 (  1):                        cons => ( 0p,    100f,  0o,    1+ 0i :(Mu -> TList -> TList))
#    99 (  2):               <<Aka+TTerm>> => ( 0p,     99f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,     99f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    97 (  1):               <<Aka+TTerm>> => ( 0p,     97f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    95 (  1):                   <<TTerm>> => ( 0p,     95f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    93 (  1):                   foldr-rec => ( 0p,     93f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#    92 (  2):                       foldr => ( 0p,     92f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu)),
#                                   filter => ( 0p,     92f,  0o,    1+ 0i :(Callable -> TList -> TList))
#    91 (  1):                   <<TTerm>> => ( 0p,     91f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    89 (  1):               <<Aka+TTerm>> => ( 0p,     89f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    87 (  2):                   <<TTerm>> => ( 0p,     87f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,     87f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    69 (  1):               <<Aka+TTerm>> => ( 0p,     69f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  1):               <<Aka+TTerm>> => ( 0p,     58f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    54 (  1):                   <<TTerm>> => ( 0p,     54f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    53 (  1):               <<Aka+TTerm>> => ( 0p,     53f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    50 (  1):                   <<TTerm>> => ( 0p,     50f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    38 (  1):                    Term-eq? => ( 0p,     38f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    26 (  1):                           Y => ( 0p,     26f,  0o,    2+ 0i :(Callable -> Mu))
#    24 (  1):                        VarT => ( 0p,     24f,  0o,    1+ 0i :(Str -> TTerm))
#     8 (  1):                  betaReduce => ( 0p,      8f,  0o,    0+ 1i :(Mu -> Mu))
#     5 (  1):                           I => ( 0p,      5f,  0o,    1+ 0i :(Mu -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  2):                      findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 16):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# 4.70 = 4.69 + 0.02 sec (100% + 0%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 1p,  14395f,  0o, 1802+5i)
#  1370 (  1):               free-varName? => ( 0p,   1370f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#  1145 (  1):                     Str-eq? => ( 0p,   1145f,  0o,    1+ 0i :(Str -> Str -> TBool))
#  1100 (  1):                      #false => ( 0p,   1100f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   502 (  1):                        Some => ( 0p,    502f,  0o,    1+ 0i :(Mu -> Mu))
#   456 (  2):                       π2->2 => ( 0p,    456f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    456f,  0o,    1+ 0i :(TPair -> Mu))
#   435 (  1):                betaContract => ( 0p,    435f,  0o,    2+ 0i :(TTerm -> Mu))
#   389 (  1):                        Pair => ( 0p,    389f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   364 (  1):                        LamT => ( 0p,    364f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   339 (  1):    Term->srcLesser-internal => ( 0p,    339f,  0o,    1+ 0i :(TTerm -> TPair))
#   326 (  1):                        None => ( 0p,    326f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   320 (  1):       subst-par-alpha_Maybe => ( 0p,    320f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe))
#   291 (  2):                       π2->1 => ( 0p,    291f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    291f,  0o,    1+ 0i :(TPair -> Mu))
#   273 (  1):                         nil => ( 0p,    273f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   270 (  1):                       #true => ( 0p,    270f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   236 (  1):                        AppT => ( 0p,    236f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   201 (  1):               <<Aka+TTerm>> => ( 0p,    201f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   175 (  1):                       first => ( 0p,    175f,  0o,    1+ 0i :(Callable -> TList -> Mu))
#   133 (  1):                      exists => ( 0p,    133f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   117 (  1):                        cons => ( 0p,    117f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   114 (  3):               <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                            <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   107 (  1):                   foldr-rec => ( 0p,    107f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#   106 (  2):                       foldr => ( 0p,    106f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu)),
#                                   filter => ( 0p,    106f,  0o,    1+ 0i :(Callable -> TList -> TList))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    95 (  1):                   <<TTerm>> => ( 0p,     95f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    94 (  1):               <<Aka+TTerm>> => ( 0p,     94f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    91 (  1):                   <<TTerm>> => ( 0p,     91f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    87 (  2):                   <<TTerm>> => ( 0p,     87f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,     87f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    83 (  1):               <<Aka+TTerm>> => ( 0p,     83f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  2):                    Term-eq? => ( 0p,     58f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                            <<Aka+TTerm>> => ( 0p,     58f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    55 (  1):               <<Aka+TTerm>> => ( 0p,     55f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    54 (  1):                   <<TTerm>> => ( 0p,     54f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    53 (  1):               <<Aka+TTerm>> => ( 0p,     53f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    50 (  1):                   <<TTerm>> => ( 0p,     50f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    26 (  1):                           Y => ( 0p,     26f,  0o,    2+ 0i :(Callable -> Mu))
#    24 (  1):                        VarT => ( 0p,     24f,  0o,    1+ 0i :(Str -> TTerm))
#    10 (  1):                  betaReduce => ( 0p,     10f,  0o,    0+ 1i :(Mu -> Mu))
#     6 (  1):                           I => ( 0p,      6f,  0o,    1+ 0i :(Mu -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  2):                      findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 16):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))

Output completed (1 min 2 sec consumed) - Normal Termination