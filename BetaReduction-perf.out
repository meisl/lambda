---------- run perl6-m ----------
1..7
# CurryStats: ( 0p,      0f,  0o,    0+0i)

# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β0   (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β1   λa.λb.(λx.(λx.λy.(λf1.λf2.λ_.λh.h f1 f2) y x) ((λy.(λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h)) x)) b a
#     =_β2   λa.λb.(λy.λ_.λh.h y (λ_.λh.h b (λh.λ_.h))) a
#     =_β3   λa.λb.λ_.λh.h a (λ_.λh.h b (λh.λ_.h))
#     (3 steps)
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β0   λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β1   λa.λb.λ_.λh.h a (λ_.λh.h b (λh.λ_.h))
#     (1 steps)
# 5.95 = 4.38 + 1.58 sec (73% + 27%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β0   (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β1   λx.λy.(λx.(λx.λy.(λf1.λf2.λ_.λh.h f1 f2) y x) ((λy.(λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h)) x)) y x
#     =_β2   λx.λy.(λα1.λ_.λh.h α1 (λ_.λh.h y (λh.λ_.h))) x
#     =_β3   λx.λy.λ_.λh.h x (λ_.λh.h y (λh.λ_.h))
#     (3 steps)
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β0   λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β1   λx.λy.λ_.λh.h x (λ_.λh.h y (λh.λ_.h))
#     (1 steps)
# 6.81 = 5.13 + 1.69 sec (75% + 25%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
#     =_β0   (x x)
#     (0 steps)
#     =_β0   (x x)
#     (0 steps)
# 0.09 = 0.05 + 0.05 sec (50% + 50%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
#     =_β0   (λx.x) x
#     =_β1   x
#     (1 steps)
#     =_β0   x
#     (0 steps)
# 0.16 = 0.13 + 0.03 sec (80% + 20%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.28 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 0p,   9045f,  0o,  598+0i)
#   932 (  1):              free-varName? => ( 0p,    932f,  0o,    0+ 0i :(Str -> TTerm -> TBool))
#   922 (  1):                    Str-eq? => ( 0p,    922f,  0o,    0+ 0i :(Str -> Str -> TBool))
#   861 (  1):                     #false => ( 0p,    861f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   299 (  1):     subst-par-alpha_direct => ( 0p,    299f,  0o,    0+ 0i :(TList -> TTerm -> TTerm))
#   298 (  2):                       None => ( 0p,    298f,  0o,    0+ 0i TMaybe:(Mu -> Mu -> Mu)),
#                                   #true => ( 0p,    298f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   288 (  2):                      π2->1 => ( 0p,    288f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->fst => ( 0p,    288f,  0o,    0+ 0i :(TPair -> Mu))
#   271 (  1):                        nil => ( 0p,    271f,  0o,    0+ 0i TList:(Mu -> Mu -> Mu))
#   238 (  1):         betaContract_multi => ( 0p,    238f,  0o,    0+ 0i :(TTerm -> Mu))
#   235 (  1):                      first => ( 0p,    235f,  0o,    0+ 0i :(Callable -> TList -> Mu))
#   223 (  1):                       cons => ( 0p,    223f,  0o,    0+ 0i :(Mu -> TList -> TList))
#   207 (  1):              <<Aka+TTerm>> => ( 0p,    207f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   179 (  2):                      π2->2 => ( 0p,    179f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->snd => ( 0p,    179f,  0o,    0+ 0i :(TPair -> Mu))
#   161 (  1):                checkSubsts => ( 0p,    161f,  0o,    0+ 0i :(TList -> Str -> TTerm -> TBool -> Mu -> Mu))
#   106 (  1):                       Some => ( 0p,    106f,  0o,    0+ 0i :(Mu -> Mu))
#   105 (  1):               collect-args => ( 0p,    105f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#   104 (  3):              <<Aka+TTerm>> => ( 0p,    104f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,    104f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,    104f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    98 (  1):                       AppT => ( 0p,     98f,  0o,    0+ 0i :(TTerm -> TTerm -> TTerm))
#    97 (  1):                       LamT => ( 0p,     97f,  0o,    0+ 0i :(Str -> TTerm -> TTerm))
#    87 (  1):              <<Aka+TTerm>> => ( 0p,     87f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    85 (  1):              <<Aka+TTerm>> => ( 0p,     85f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    83 (  1):                     K1None => ( 0p,     83f,  0o,    0+ 0i :(Mu -> Mu))
#    80 (  1):              <<Aka+TTerm>> => ( 0p,     80f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    74 (  1):                       Pair => ( 0p,     74f,  0o,    0+ 0i :(Mu -> Mu -> Mu))
#    72 (  1):              <<Aka+TTerm>> => ( 0p,     72f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    61 (  1):   collect-args-and-lambdas => ( 0p,     61f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    60 (  1): filter-substs-and-contract => ( 0p,     60f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#    36 (  1):                        not => ( 0p,     36f,  0o,    0+ 0i :(TBool -> TBool))
#    14 (  1):                          I => ( 0p,     14f,  0o,    0+ 0i :(Mu -> Mu))
#     7 (  1):                      foldl => ( 0p,      7f,  0o,    0+ 0i :(Callable -> Mu -> TList -> Mu))
#     1 (  1):                       VarT => ( 0p,      1f,  0o,    0+ 0i :(Str -> TTerm))
#     =_β0   λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
#     =_β1   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.(λh.λ_.(λk.k f1 f2 f3 f4 f5) h) h
#     =_β2   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
#     (2 steps)
#     =_β0   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
#     (0 steps)
# 3.23 = 2.97 + 0.27 sec (92% + 8%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 0p,  10682f,  0o,  761+0i)
#  1022 (  1):              free-varName? => ( 0p,   1022f,  0o,    0+ 0i :(Str -> TTerm -> TBool))
#  1017 (  1):                    Str-eq? => ( 0p,   1017f,  0o,    0+ 0i :(Str -> Str -> TBool))
#   944 (  1):                     #false => ( 0p,    944f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   380 (  1):                       None => ( 0p,    380f,  0o,    0+ 0i TMaybe:(Mu -> Mu -> Mu))
#   363 (  1):                      #true => ( 0p,    363f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   362 (  1):     subst-par-alpha_direct => ( 0p,    362f,  0o,    0+ 0i :(TList -> TTerm -> TTerm))
#   341 (  2):                      π2->1 => ( 0p,    341f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->fst => ( 0p,    341f,  0o,    0+ 0i :(TPair -> Mu))
#   332 (  1):                        nil => ( 0p,    332f,  0o,    0+ 0i TList:(Mu -> Mu -> Mu))
#   314 (  1):         betaContract_multi => ( 0p,    314f,  0o,    0+ 0i :(TTerm -> Mu))
#   291 (  1):                      first => ( 0p,    291f,  0o,    0+ 0i :(Callable -> TList -> Mu))
#   271 (  1):                       cons => ( 0p,    271f,  0o,    0+ 0i :(Mu -> TList -> TList))
#   221 (  1):              <<Aka+TTerm>> => ( 0p,    221f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   210 (  2):                      π2->2 => ( 0p,    210f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->snd => ( 0p,    210f,  0o,    0+ 0i :(TPair -> Mu))
#   177 (  1):                checkSubsts => ( 0p,    177f,  0o,    0+ 0i :(TList -> Str -> TTerm -> TBool -> Mu -> Mu))
#   146 (  1):                       Some => ( 0p,    146f,  0o,    0+ 0i :(Mu -> Mu))
#   139 (  1):               collect-args => ( 0p,    139f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#   125 (  1):                       AppT => ( 0p,    125f,  0o,    0+ 0i :(TTerm -> TTerm -> TTerm))
#   122 (  1):                       LamT => ( 0p,    122f,  0o,    0+ 0i :(Str -> TTerm -> TTerm))
#   115 (  1):              <<Aka+TTerm>> => ( 0p,    115f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   110 (  1):                     K1None => ( 0p,    110f,  0o,    0+ 0i :(Mu -> Mu))
#   105 (  2):              <<Aka+TTerm>> => ( 0p,    105f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,    105f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    97 (  2):                       Pair => ( 0p,     97f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,     97f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    90 (  1):              <<Aka+TTerm>> => ( 0p,     90f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    89 (  1):              <<Aka+TTerm>> => ( 0p,     89f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    82 (  1): filter-substs-and-contract => ( 0p,     82f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#    78 (  1):   collect-args-and-lambdas => ( 0p,     78f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    72 (  1):              <<Aka+TTerm>> => ( 0p,     72f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    47 (  1):                        not => ( 0p,     47f,  0o,    0+ 0i :(TBool -> TBool))
#    21 (  1):                          I => ( 0p,     21f,  0o,    0+ 0i :(Mu -> Mu))
#    18 (  1):                      foldl => ( 0p,     18f,  0o,    0+ 0i :(Callable -> Mu -> TList -> Mu))
#     1 (  1):                       VarT => ( 0p,      1f,  0o,    0+ 0i :(Str -> TTerm))

Output completed (1 min 1 sec consumed) - Normal Termination