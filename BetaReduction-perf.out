---------- run perl6-m ----------
1..7
# CurryStats: ( 1p,    322f,  0o,  419+5i)
#   115 (  1):                        AppT => ( 0p,    115f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   103 (  1):                        LamT => ( 0p,    103f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#    31 (  1):                        VarT => ( 0p,     31f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    27 (  1):                           Y => ( 0p,     27f,  0o,    2+ 0i :(Callable -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     1 (  2):                      findFP => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      1f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 25):                           I => ( 0p,      0f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      nil => ( 0p,      0f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                     cons => ( 0p,      0f,  0o,    1+ 0i :(Mu -> TList -> TList)),
#                                    #true => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    subst => ( 0p,      0f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe)),
#                                   #false => ( 0p,      0f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu)),
#                                  Str-eq? => ( 0p,      0f,  0o,    1+ 0i :(Str -> Str -> TBool)),
#                                 Term-eq? => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                                subst-seq => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe)),
#                               betaReduce => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 1i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe)),
#                   free-varNames-internal => ( 1p,      0f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList)),
#                   subst-par-alpha_direct => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
# 6.06 = 4.78 + 1.28 sec (79% + 21%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
# 7.08 = 5.67 + 1.41 sec (80% + 20%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
# 0.00 = 0.00 + 0.00 sec (0% + 0%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
# 0.08 = 0.08 + 0.00 sec (100% + 0%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.25 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 1p,  12713f,  0o, 1675+5i)
#   861 (  1):                      #false => ( 0p,    861f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   848 (  1):                     Str-eq? => ( 0p,    848f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   580 (  1):                   subst-seq => ( 0p,    580f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe))
#   408 (  1):                        None => ( 0p,    408f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu))
#   390 (  1):                         nil => ( 0p,    390f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   369 (  2):                       π2->1 => ( 0p,    369f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    369f,  0o,    1+ 0i :(TPair -> Mu))
#   360 (  1):                      exists => ( 0p,    360f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   354 (  1):                        cons => ( 0p,    354f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   338 (  1):      free-varNames-internal => ( 1p,    338f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
#   312 (  1):                       #true => ( 0p,    312f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   304 (  1):                        Some => ( 0p,    304f,  0o,    1+ 0i :(Mu -> Mu))
#   302 (  2):                       π2->2 => ( 0p,    302f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    302f,  0o,    1+ 0i :(TPair -> Mu))
#   301 (  1):                        Pair => ( 0p,    301f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   279 (  1):                        LamT => ( 0p,    279f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   273 (  1):                betaContract => ( 0p,    273f,  0o,    2+ 0i :(TTerm -> Mu))
#   263 (  1):    Term->srcLesser-internal => ( 0p,    263f,  0o,    1+ 0i :(TTerm -> TPair))
#   261 (  1):             freeName-under? => ( 0p,    261f,  0o,    1+ 0i :(Str -> Str -> TTerm -> TBool))
#   233 (  1):                        AppT => ( 0p,    233f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   170 (  1):               <<Aka+TTerm>> => ( 0p,    170f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   156 (  1):                   foldr-rec => ( 0p,    156f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#   155 (  1):                       foldr => ( 0p,    155f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu))
#   153 (  1):                      except => ( 0p,    153f,  0o,    1+ 0i :(Callable -> TList -> TList))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    97 (  1):               <<Aka+TTerm>> => ( 0p,     97f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    87 (  1):                    K1#false => ( 0p,     87f,  0o,    1+ 0i :(Mu -> Mu))
#    85 (  1):               <<Aka+TTerm>> => ( 0p,     85f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    83 (  1):               <<Aka+TTerm>> => ( 0p,     83f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    81 (  1):                   <<TTerm>> => ( 0p,     81f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    75 (  1):               <<Aka+TTerm>> => ( 0p,     75f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    74 (  1):                   <<TTerm>> => ( 0p,     74f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    73 (  2):                   <<TTerm>> => ( 0p,     73f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,     73f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    70 (  1):               free-varName? => ( 0p,     70f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#    66 (  1):               <<Aka+TTerm>> => ( 0p,     66f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    38 (  1):                    Term-eq? => ( 0p,     38f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    37 (  1):               free-varNames => ( 0p,     37f,  0o,    0+ 1i :(TTerm -> TList))
#    36 (  1):                       subst => ( 0p,     36f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe))
#    33 (  1):                        VarT => ( 0p,     33f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    28 (  1):                           Y => ( 0p,     28f,  0o,    2+ 0i :(Callable -> Mu))
#     8 (  1):                  betaReduce => ( 0p,      8f,  0o,    0+ 1i :(Mu -> Mu))
#     6 (  1):      subst-par-alpha_direct => ( 0p,      6f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#     5 (  1):                           I => ( 0p,      5f,  0o,    1+ 0i :(Mu -> Mu))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  2):                      findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 12):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe))
# 5.34 = 5.33 + 0.02 sec (100% + 0%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 1p,  17411f,  0o, 2152+5i)
#  1324 (  1):                      #false => ( 0p,   1324f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#  1220 (  1):                     Str-eq? => ( 0p,   1220f,  0o,    1+ 0i :(Str -> Str -> TBool))
#   700 (  1):                   subst-seq => ( 0p,    700f,  0o,    1+ 0i :(TTerm -> TList -> TMaybe))
#   659 (  1):                      exists => ( 0p,    659f,  0o,    2+ 0i :(Callable -> TList -> Mu))
#   530 (  1):                         nil => ( 0p,    530f,  0o,    1+ 0i TList:(Mu -> Mu -> Mu))
#   512 (  2):                        None => ( 0p,    512f,  0o,    1+ 0i TMaybe:(Mu -> Mu -> Mu)),
#                   free-varNames-internal => ( 1p,    512f,  0o,    1+ 0i :(TList -> TList -> TTerm -> TList))
#   464 (  1):                        cons => ( 0p,    464f,  0o,    1+ 0i :(Mu -> TList -> TList))
#   450 (  1):                        Some => ( 0p,    450f,  0o,    1+ 0i :(Mu -> Mu))
#   437 (  2):                       π2->1 => ( 0p,    437f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->fst => ( 0p,    437f,  0o,    1+ 0i :(TPair -> Mu))
#   435 (  2):                betaContract => ( 0p,    435f,  0o,    2+ 0i :(TTerm -> Mu)),
#                          freeName-under? => ( 0p,    435f,  0o,    1+ 0i :(Str -> Str -> TTerm -> TBool))
#   431 (  1):                       #true => ( 0p,    431f,  0o,    1+ 0i TBool:(Mu -> Mu -> Mu))
#   390 (  2):                       π2->2 => ( 0p,    390f,  0o,    1+ 0i :(Mu -> Mu -> Mu)),
#                                Pair->snd => ( 0p,    390f,  0o,    1+ 0i :(TPair -> Mu))
#   389 (  1):                        Pair => ( 0p,    389f,  0o,    1+ 0i :(Mu -> Mu -> Mu))
#   380 (  1):                        LamT => ( 0p,    380f,  0o,    1+ 0i :(Str -> TTerm -> TTerm))
#   339 (  1):    Term->srcLesser-internal => ( 0p,    339f,  0o,    1+ 0i :(TTerm -> TPair))
#   265 (  1):                        AppT => ( 0p,    265f,  0o,    1+ 0i :(TTerm -> TTerm -> TTerm))
#   207 (  1):               <<Aka+TTerm>> => ( 0p,    207f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   178 (  1):                   foldr-rec => ( 0p,    178f,  0o,    1+ 0i :(Callable -> Mu -> TList -> Mu))
#   177 (  1):                       foldr => ( 0p,    177f,  0o,    0+ 0i name:(Callable -> Mu -> TList -> Mu))
#   175 (  1):                      except => ( 0p,    175f,  0o,    1+ 0i :(Callable -> TList -> TList))
#   160 (  1):                    K1#false => ( 0p,    160f,  0o,    1+ 0i :(Mu -> Mu))
#   115 (  1):               <<Aka+TTerm>> => ( 0p,    115f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   114 (  1):               <<Aka+TTerm>> => ( 0p,    114f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   107 (  1):               <<Aka+TTerm>> => ( 0p,    107f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   102 (  1):               <<Aka+TTerm>> => ( 0p,    102f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    88 (  1):               <<Aka+TTerm>> => ( 0p,     88f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    81 (  1):                   <<TTerm>> => ( 0p,     81f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    80 (  1):               <<Aka+TTerm>> => ( 0p,     80f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    74 (  1):                   <<TTerm>> => ( 0p,     74f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    73 (  2):                   <<TTerm>> => ( 0p,     73f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                                <<TTerm>> => ( 0p,     73f,  0o,    1+ 0i TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    70 (  1):               free-varName? => ( 0p,     70f,  0o,    1+ 0i :(Str -> TTerm -> TBool))
#    65 (  1):               <<Aka+TTerm>> => ( 0p,     65f,  0o,    1+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    58 (  1):                    Term-eq? => ( 0p,     58f,  0o,    1+ 0i :(TTerm -> TTerm -> TBool))
#    49 (  1):               free-varNames => ( 0p,     49f,  0o,    0+ 1i :(TTerm -> TList))
#    48 (  1):                       subst => ( 0p,     48f,  0o,    1+ 0i :(Str -> TTerm -> TTerm -> TMaybe))
#    33 (  1):                        VarT => ( 0p,     33f,  0o,    1+ 0i :(Str -> TTerm))
#    30 (  1):                           B => ( 0p,     30f,  0o,    1+ 0i :(Callable -> Callable -> Mu))
#    28 (  1):                           Y => ( 0p,     28f,  0o,    2+ 0i :(Callable -> Mu))
#    10 (  1):                  betaReduce => ( 0p,     10f,  0o,    0+ 1i :(Mu -> Mu))
#     6 (  2):                           I => ( 0p,      6f,  0o,    1+ 0i :(Mu -> Mu)),
#                   subst-par-alpha_direct => ( 0p,      6f,  0o,    1+ 0i :(TList -> TTerm -> TTerm))
#     4 (  2):                           K => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu)),
#                                      K^2 => ( 0p,      4f,  0o,    1+ 0i :(Mu -> Mu))
#     2 (  2):                      findFP => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Callable -> Mu)),
#                           findFP-inMaybe => ( 0p,      2f,  0o,    1+ 0i :(Callable -> Mu))
#     0 ( 12):                         _if => ( 0p,      0f,  0o,    1+ 0i :(TBool -> Callable -> Callable -> Mu)),
#                                      _or => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                      not => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool)),
#                                     _and => ( 0p,      0f,  0o,    1+ 0i :(TBool -> TBool -> TBool)),
#                                     caar => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                    free? => ( 0p,      0f,  0o,    0+ 1i :(Mu -> Mu)),
#                                 map-iter => ( 0p,      0f,  0o,    0+ 1i :(Callable -> Mu -> Mu)),
#                             Term->source => ( 0p,      0f,  0o,    1+ 0i :(TTerm -> Str)),
#                            free-varNames => ( 0p,      0f,  0o,    0+ 0i :(TTerm -> TList)),
#                       findFP-inMaybe_dbg => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    findFP-inMaybe_dbgXXX => ( 0p,      0f,  0o,    1+ 0i :(Callable -> Mu)),
#                    subst-par-alpha_Maybe => ( 0p,      0f,  0o,    1+ 0i :(TList -> TTerm -> TMaybe))

Output completed (1 min 8 sec consumed) - Normal Termination