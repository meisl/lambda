---------- run perl6-m ----------
1..7
# CurryStats: ( 0p,      0f,  0o,    0+0i)

# (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =  (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β0   (λf.λa.λb.f b a) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β1   λa.λb.λ_.λh.h a (λ_.λh.h b (λh.λ_.h))
#     (1 steps)
# λa.λb.cons a (cons b nil)  =  λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β0   λa.λb.(λf1.λf2.λ_.λh.h f1 f2) a ((λf1.λf2.λ_.λh.h f1 f2) b (λh.λ_.h))
#     =_β1   λa.λb.λ_.λh.h a (λ_.λh.h b (λh.λ_.h))
#     (1 steps)
# 4.48 = 3.27 + 1.22 sec (73% + 27%) consumed for beta-reduction
ok 1 - (λf.λa.λb.f b a) (B (C cons) (C cons nil))  =_β*  λa.λb.cons a (cons b nil)  [NO alpha-conv needed]
# (C (B (C cons) (C cons nil)))  =  (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β0   (λf.λx.λy.f y x) ((λf.λg.λx.f (g x)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2)) ((λf.λx.λy.f y x) (λf1.λf2.λ_.λh.h f1 f2) (λh.λ_.h)))
#     =_β1   λx.λy.λ_.λh.h x (λ_.λh.h y (λh.λ_.h))
#     (1 steps)
# λx.λy.cons x (cons y nil)  =  λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β0   λx.λy.(λf1.λf2.λ_.λh.h f1 f2) x ((λf1.λf2.λ_.λh.h f1 f2) y (λh.λ_.h))
#     =_β1   λx.λy.λ_.λh.h x (λ_.λh.h y (λh.λ_.h))
#     (1 steps)
# 4.80 = 3.48 + 1.31 sec (73% + 27%) consumed for beta-reduction
ok 2 - (C (B (C cons) (C cons nil)))  =_β*  λx.λy.cons x (cons y nil)  [DOES need alpha-conv]
#     =_β0   (x x)
#     (0 steps)
#     =_β0   (x x)
#     (0 steps)
# 0.11 = 0.05 + 0.06 sec (43% + 57%) consumed for beta-reduction
ok 3 - (x x)  =_β*  (x x)  (sanity check)
#     =_β0   (λx.x) x
#     =_β1   x
#     (1 steps)
#     =_β0   x
#     (0 steps)
# 0.17 = 0.14 + 0.03 sec (82% + 18%) consumed for beta-reduction
ok 4 - (λx.x) x  =_β*  x  (sanity check)
# 0.28 sec consumed for big-term construction
ok 5 - $bigTerm.lambda is λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
ok 6 - $expectedTerm.lambda is λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
# CurryStats: ( 0p,   7472f,  0o,  449+0i)
#   650 (  1):                     #false => ( 0p,    650f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   560 (  1):          not-free-varName? => ( 0p,    560f,  0o,    0+ 0i :(Str -> TTerm -> TBool))
#   419 (  1):                       None => ( 0p,    419f,  0o,    0+ 0i TMaybe:(Mu -> Mu -> Mu))
#   409 (  1):                    Str-eq? => ( 0p,    409f,  0o,    0+ 0i :(Str -> Str -> TBool))
#   382 (  1):         betaContract_multi => ( 0p,    382f,  0o,    0+ 0i :(TTerm -> Mu))
#   341 (  1):                    Str-ne? => ( 0p,    341f,  0o,    0+ 0i :(Str -> Str -> TBool))
#   252 (  1):                      #true => ( 0p,    252f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   211 (  1):                       cons => ( 0p,    211f,  0o,    0+ 0i :(Mu -> TList -> TList))
#   204 (  1):              <<Aka+TTerm>> => ( 0p,    204f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   197 (  1):              free-varName? => ( 0p,    197f,  0o,    0+ 0i :(Str -> TTerm -> TBool))
#   175 (  1):                        nil => ( 0p,    175f,  0o,    0+ 0i TList:(Mu -> Mu -> Mu))
#   164 (  1):     subst-par-alpha_direct => ( 0p,    164f,  0o,    0+ 0i :(TList -> TTerm -> TTerm))
#   151 (  1):               collect-args => ( 0p,    151f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#   126 (  1):      except-substs_noDupes => ( 0p,    126f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#   125 (  1):                     K1None => ( 0p,    125f,  0o,    0+ 0i :(Mu -> Mu))
#   123 (  1):                      first => ( 0p,    123f,  0o,    0+ 0i :(Callable -> TList -> Mu))
#   116 (  1):                     exists => ( 0p,    116f,  0o,    0+ 0i :(Callable -> TList -> TBool))
#   107 (  2):                      π2->2 => ( 0p,    107f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->snd => ( 0p,    107f,  0o,    0+ 0i :(TPair -> Mu))
#    93 (  2):                      π2->1 => ( 0p,     93f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->fst => ( 0p,     93f,  0o,    0+ 0i :(TPair -> Mu))
#    87 (  2):              <<Aka+TTerm>> => ( 0p,     87f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,     87f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    83 (  1):   collect-args-and-lambdas => ( 0p,     83f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    81 (  1):                       Some => ( 0p,     81f,  0o,    0+ 0i :(Mu -> Mu))
#    74 (  3):              <<Aka+TTerm>> => ( 0p,     74f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,     74f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,     74f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    62 (  1):                       LamT => ( 0p,     62f,  0o,    0+ 0i :(Str -> TTerm -> TTerm))
#    58 (  2):              <<Aka+TTerm>> => ( 0p,     58f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#              filter-substs-and-contract => ( 0p,     58f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#    50 (  1):              <<Aka+TTerm>> => ( 0p,     50f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    48 (  1):                       AppT => ( 0p,     48f,  0o,    0+ 0i :(TTerm -> TTerm -> TTerm))
#    47 (  1):                       Pair => ( 0p,     47f,  0o,    0+ 0i :(Mu -> Mu -> Mu))
#     8 (  1):                          I => ( 0p,      8f,  0o,    0+ 0i :(Mu -> Mu))
#     1 (  1):                      foldl => ( 0p,      1f,  0o,    0+ 0i :(Callable -> Mu -> TList -> Mu))
#     =_β0   λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))
#     =_β1   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
#     (1 steps)
#     =_β0   λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5
#     (0 steps)
# 3.08 = 2.81 + 0.27 sec (91% + 9%) consumed for beta-reduction
ok 7 - λf1.λf2.λf3.λf4.λf5.(λy.λ_.y) ((λg.λh.(λy.λ_.y) (g h)) ((λg.λh.(λy.λ_.y) (g h)) (λk.(λk.(λk.(λk.(λk.(λx.x) k f1) k f2) k f3) k f4) k f5)))  =_β*  λf1.λf2.λf3.λf4.λf5.λ_.λh.λ_.λ_.h f1 f2 f3 f4 f5  
# CurryStats: ( 0p,   9177f,  0o,  606+0i)
#   771 (  1):                     #false => ( 0p,    771f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   614 (  1):          not-free-varName? => ( 0p,    614f,  0o,    0+ 0i :(Str -> TTerm -> TBool))
#   542 (  1):                       None => ( 0p,    542f,  0o,    0+ 0i TMaybe:(Mu -> Mu -> Mu))
#   483 (  1):         betaContract_multi => ( 0p,    483f,  0o,    0+ 0i :(TTerm -> Mu))
#   478 (  1):                    Str-eq? => ( 0p,    478f,  0o,    0+ 0i :(Str -> Str -> TBool))
#   367 (  1):                    Str-ne? => ( 0p,    367f,  0o,    0+ 0i :(Str -> Str -> TBool))
#   271 (  1):                       cons => ( 0p,    271f,  0o,    0+ 0i :(Mu -> TList -> TList))
#   268 (  1):                      #true => ( 0p,    268f,  0o,    0+ 0i TBool:(Mu -> Mu -> Mu))
#   236 (  1):                        nil => ( 0p,    236f,  0o,    0+ 0i TList:(Mu -> Mu -> Mu))
#   233 (  1):              free-varName? => ( 0p,    233f,  0o,    0+ 0i :(Str -> TTerm -> TBool))
#   227 (  1):     subst-par-alpha_direct => ( 0p,    227f,  0o,    0+ 0i :(TList -> TTerm -> TTerm))
#   223 (  1):              <<Aka+TTerm>> => ( 0p,    223f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#   202 (  1):               collect-args => ( 0p,    202f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#   179 (  1):                      first => ( 0p,    179f,  0o,    0+ 0i :(Callable -> TList -> Mu))
#   169 (  1):                     K1None => ( 0p,    169f,  0o,    0+ 0i :(Mu -> Mu))
#   142 (  1):      except-substs_noDupes => ( 0p,    142f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#   132 (  1):                     exists => ( 0p,    132f,  0o,    0+ 0i :(Callable -> TList -> TBool))
#   127 (  4):                      π2->1 => ( 0p,    127f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                                   π2->2 => ( 0p,    127f,  0o,    0+ 0i :(Mu -> Mu -> Mu)),
#                               Pair->fst => ( 0p,    127f,  0o,    0+ 0i :(TPair -> Mu)),
#                               Pair->snd => ( 0p,    127f,  0o,    0+ 0i :(TPair -> Mu))
#   116 (  1):                       Some => ( 0p,    116f,  0o,    0+ 0i :(Mu -> Mu))
#   105 (  1):   collect-args-and-lambdas => ( 0p,    105f,  0o,    0+ 0i :(Mu -> Mu -> TTerm -> TList -> TTerm -> Mu))
#    99 (  1):              <<Aka+TTerm>> => ( 0p,     99f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    89 (  1):              <<Aka+TTerm>> => ( 0p,     89f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    88 (  1):              <<Aka+TTerm>> => ( 0p,     88f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    82 (  1):                       LamT => ( 0p,     82f,  0o,    0+ 0i :(Str -> TTerm -> TTerm))
#    80 (  1): filter-substs-and-contract => ( 0p,     80f,  0o,    0+ 0i :(Mu -> TList -> Mu))
#    75 (  3):                       AppT => ( 0p,     75f,  0o,    0+ 0i :(TTerm -> TTerm -> TTerm)),
#                           <<Aka+TTerm>> => ( 0p,     75f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu)),
#                           <<Aka+TTerm>> => ( 0p,     75f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    63 (  1):              <<Aka+TTerm>> => ( 0p,     63f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    62 (  1):                       Pair => ( 0p,     62f,  0o,    0+ 0i :(Mu -> Mu -> Mu))
#    58 (  1):              <<Aka+TTerm>> => ( 0p,     58f,  0o,    0+ 0i Aka+TTerm:(Callable -> Callable -> Callable -> Callable -> Mu))
#    14 (  1):                          I => ( 0p,     14f,  0o,    0+ 0i :(Mu -> Mu))
#    12 (  1):                      foldl => ( 0p,     12f,  0o,    0+ 0i :(Callable -> Mu -> TList -> Mu))

Output completed (59 sec consumed) - Normal Termination