──:CompUnit+{StrByDump}
  └─╥Block :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => []})
    ╟─bind ::(Str)
    ║ ├○ .src :decl(static) ::(Str)
    ║ └◙ SVal "\n#\"foo\"  # type str\n\n#42     # ERROR NYI\n\n#λx.x    # type t0 -> t0\n\n#λx.λ_.x   # type t0 -> NQPMu -> t0\n\n#λ_.\"foo\"    # type: NQPMu -> str\n\n#(λx.x) \"foo\"    # type: t5 where t5 = str\n\n#(\"foo\" \"bar\")   # Type Error: cannot apply str to str\n\n#(\"foo\" λx.x)   # Type Error: cannot apply str to Void -> t0 where t0 = t5 -> t5\n\n((λx.x) λx.x)   # type: t5 where t5 = Void -> t0; t0 = t6 -> t6\n\n#(δ (# Combinators:\n#    #(M λu.u u)                  # self-application\n#    #(K λx.λ_.x)                 # (make) a constant function\n#    (I λx.x)                    # identity\n#   )\n#    I \"foo\"\n#)\n\n" ::(Str)
    ╟─bind ::(Array)
    ║ ├○ .λinfo :decl(static) ::(Array)
    ║ └─list ::(Array)
    ║   ├─list ::(Array)
    ║   │ ├◙ SVal "x" ::(Str)
    ║   │ ├◙ IVal 324 ::(Int)
    ║   │ ├◙ IVal 4 ::(Int)
    ║   │ └◙ SVal "" ::(Str)
    ║   └─list ::(Array)
    ║     ├◙ SVal "x" ::(Str)
    ║     ├◙ IVal 330 ::(Int)
    ║     ├◙ IVal 4 ::(Int)
    ║     └◙ SVal "" ::(Str)
    ╟─bind ::(Void -> Str) :annotations({"constraints" => "t10 = (Void -> Str)"})
    ║ ├○ &banner :decl(static) ::(Void -> Str)
    ║ └─╥Block "&banner" ::(Void -> Str) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [], "optional" => [], "constraints" => "t10 = (Void -> Str)"})
    ║   ╙◙ SVal "This is L v0.0.1" ::(Str)
    ╟─bind ::(Str -> Str) :annotations({"constraints" => "t11 = (t12 -> Str)  &  t12 = Str"})
    ║ ├○ &strLit :decl(static) ::(Str -> Str)
    ║ └─╥Block "&strLit" ::(Str -> Str) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical s :decl(param))], "optional" => [], "constraints" => "t11 = (t12 -> Str)  &  t12 = Str"})
    ║   ╟○ s :decl(param) ::(Str) :annotations({"positional_index" => 0})
    ║   ╟─bind ::(Str)
    ║   ║ ├○ foo :decl(var) ::(Str)
    ║   ║ └◙ SVal "bar" ::(Str)
    ║   ╙─concat ::(Str)
    ║     ├◙ SVal "\"" ::(Str)
    ║     └─concat ::(Str)
    ║       ├─escape ::(Str)
    ║       │ └○ s ::(Str)
    ║       └◙ SVal "\"" ::(Str)
    ╟─bind ::((Array × Int) -> Array) :annotations({"constraints" => "t14 = ((t15 × t16) -> Array)  &  t15 = Array  &  t16 = Int  &  t21 = Int  &  t23 = t24  &  t25 = Int"})
    ║ ├○ &sublist :decl(static) ::((Array × Int) -> Array)
    ║ └─╥Block "&sublist" ::((Array × Int) -> Array) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical list :decl(param)), QAST::Var(lexical from :decl(param))], "optional" => [], "constraints" => "t14 = ((t15 × t16) -> Array)  &  t15 = Array  &  t16 = Int  &  t21 = Int  &  t23 = t24  &  t25 = Int"})
    ║   ╟○ list :decl(param) ::(Array) :annotations({"positional_index" => 0})
    ║   ╟○ from :decl(param) ::(Int) :annotations({"positional_index" => 1})
    ║   ╟─bind ::(Array)
    ║   ║ ├○ out :decl(var) ::(Array)
    ║   ║ └─list ::(Array)
    ║   ╟─bind ::(Int)
    ║   ║ ├○ n :decl(var) ::(Int)
    ║   ║ └─elems ::(Int)
    ║   ║   └○ list ::(Array)
    ║   ╟─bind ::(Int)
    ║   ║ ├○ count :decl(var) ::(Int)
    ║   ║ └○ n ::(Int)
    ║   ╟─bind ::(Int)
    ║   ║ ├○ to :decl(var) ::(Int)
    ║   ║ └─add_i ::(Int)
    ║   ║   ├○ from ::(Int)
    ║   ║   └○ count ::(Int)
    ║   ╟─if ::(Bool + Int)
    ║   ║ ├─isgt_i ::(Bool)
    ║   ║ │ ├○ to ::(Int)
    ║   ║ │ └○ n ::(Int)
    ║   ║ └─bind ::(Int)
    ║   ║   ├○ to ::(Int)
    ║   ║   └○ n ::(Int)
    ║   ╟─while ::(Bool)
    ║   ║ ├─islt_i ::(Bool)
    ║   ║ │ ├○ from ::(Int)
    ║   ║ │ └○ to ::(Int)
    ║   ║ └─┬Stmts ::(Int)
    ║   ║   ├─push ::(Void)
    ║   ║   │ ├○ out ::(Array)
    ║   ║   │ └─atpos ::(t24)
    ║   ║   │   ├○ list ::(Array)
    ║   ║   │   └○ from ::(Int)
    ║   ║   └─bind ::(Int)
    ║   ║     ├○ from ::(Int)
    ║   ║     └─add_i ::(Int)
    ║   ║       ├○ from ::(Int)
    ║   ║       └◙ IVal 1 ::(Int)
    ║   ╙○ out ::(Array)
    ╟─bind ::(t28 -> (Bool + Int + Num + Str + Array + t32)) :annotations({"constraints" => "t27 = (t28 -> (t32 + t33))  &  t30 = Void  &  t31 = t32  &  t33 = (Bool + Int + Num + Str + Array)"})
    ║ ├○ &force-new :decl(static) ::(t28 -> (Bool + Int + Num + Str + Array + t32))
    ║ └─╥Block "&force-new" ::(t28 -> (Bool + Int + Num + Str + Array + t32)) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical x :decl(param))], "optional" => [], "constraints" => "t27 = (t28 -> (t32 + t33))  &  t30 = Void  &  t31 = t32  &  t33 = (Bool + Int + Num + Str + Array)"})
    ║   ╟○ x :decl(param) ::(t28) :annotations({"positional_index" => 0})
    ║   ╟─bind ::(Str)
    ║   ║ ├○ foo :decl(var) ::(Str)
    ║   ║ └◙ SVal "bar" ::(Str)
    ║   ╙─if ::(Bool + Int + Num + Str + Array + t32)
    ║     ├─isinvokable ::(Bool)
    ║     │ └○ x ::(t28)
    ║     ├─call ::(t32)
    ║     │ └○ x ::(Void -> t32)
    ║     └○ x ::(Bool + Int + Num + Str + Array)
    ╟─bind ::((Bool -> Bool) + (Int -> Int) + (Num -> Num) + (Str -> Str) + (Array -> Array) + ((Void -> t3) -> t3)) :annotations({"constraints" => (NQPMu, Type object)})
    ║ ├○ &force :decl(static) ::((Bool -> Bool) + (Int -> Int) + (Num -> Num) + (Str -> Str) + (Array -> Array) + ((Void -> t3) -> t3))
    ║ └─╥Block "&force" ::((Bool -> Bool) + (Int -> Int) + (Num -> Num) + (Str -> Str) + (Array -> Array) + ((Void -> t3) -> t3)) :annotations({"constrain-self" => (Var)})
    ║   ╟○ x :decl(param) :annotations({"positional_index" => 0})
    ║   ╟─bind
    ║   ║ ├○ foo :decl(var)
    ║   ║ └◙ SVal "bar"
    ║   ╙─if ::((Bool -> Bool) + (Int -> Int) + (Num -> Num) + (Str -> Str) + (Array -> Array) + ((Void -> t3) -> t3))
    ║     ├─isinvokable
    ║     │ └○ x ::(Bool + Int + Num + Str + Array + (Void -> t3))
    ║     ├─call x
    ║     └○ x ::(Bool + Int + Num + Str + Array + (Void -> t3))
    ╟─bind ::((Void -> t41) -> Void -> t41) :annotations({"constraints" => "t35 = (t36 -> Void -> t41)  &  t36 = (Void -> t39)  &  t37 = t39  &  t37 = t40  &  t39 = t41"})
    ║ ├○ &delayMemo :decl(static) ::((Void -> t41) -> Void -> t41)
    ║ └─╥Block "&delayMemo" ::((Void -> t41) -> Void -> t41) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical x :decl(param))], "optional" => [], "constraints" => "t35 = (t36 -> Void -> t41)  &  t36 = (Void -> t39)  &  t37 = t39  &  t37 = t40  &  t39 = t41"})
    ║   ╟○ x :decl(param) ::(Void -> t41) :annotations({"positional_index" => 0})
    ║   ╟○ result :decl(var) ::(t41)
    ║   ╟─bind ::(Int)
    ║   ║ ├○ wasRun :decl(var) ::(Int)
    ║   ║ └◙ IVal 0 ::(Int)
    ║   ╙─╥Block ::(Void -> t41) :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => [], "constraints" => "t36 = (Void -> t39)  &  t37 = t39  &  t37 = t40  &  t39 = t41"})
    ║     ╙─if ::(t41)
    ║       ├○ wasRun ::(Int)
    ║       ├○ result ::(t41)
    ║       └─┬Stmts ::(t41)
    ║         ├─bind ::(Int)
    ║         │ ├○ wasRun ::(Int)
    ║         │ └◙ IVal 1 ::(Int)
    ║         └─bind ::(t41)
    ║           ├○ result ::(t41)
    ║           └─call x ::(t41)
    ╟─bind ::((t43 × Str × (Int -> t53) × (Void -> t57)) -> (t53 + t57)) :annotations({"constraints" => "t42 = ((t43 × t44 × t45 × t46) -> (t56 + t57))  &  t44 = Str  &  t45 = (Int -> t51)  &  t46 = (Void -> t52)  &  t46 = (Void -> t55)  &  t47 = Str  &  t47 = t50  &  t51 = t53  &  t52 = t54  &  t55 = t57  &  t56 = (t53 + t54)"})
    ║ ├○ &ifTag :decl(static) ::((t43 × Str × (Int -> t53) × (Void -> t57)) -> (t53 + t57))
    ║ └─╥Block "&ifTag" ::((t43 × Str × (Int -> t53) × (Void -> t57)) -> (t53 + t57)) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical subject :decl(param)), QAST::Var(lexical tag :decl(param)), QAST::Var(lexical then :decl(param)), QAST::Var(lexical else :decl(param))], "optional" => [], "constraints" => "t42 = ((t43 × t44 × t45 × t46) -> (t56 + t57))  &  t44 = Str  &  t45 = (Int -> t51)  &  t46 = (Void -> t52)  &  t46 = (Void -> t55)  &  t47 = Str  &  t47 = t50  &  t51 = t53  &  t52 = t54  &  t55 = t57  &  t56 = (t53 + t54)"})
    ║   ╟○ subject :decl(param) ::(t43) :annotations({"positional_index" => 0})
    ║   ╟○ tag :decl(param) ::(Str) :annotations({"positional_index" => 1})
    ║   ╟○ then :decl(param) ::(Int -> t53) :annotations({"positional_index" => 2})
    ║   ╟○ else :decl(param) ::(Void -> t57) :annotations({"positional_index" => 3})
    ║   ╟○ tagAndId :decl(var) ::(Str)
    ║   ╙─if ::(t53 + t57)
    ║     ├─islist ::(Bool)
    ║     │ └○ subject ::(t43)
    ║     ├─┬Stmts ::(t53 + t57)
    ║     │ ├─bind ::(Str)
    ║     │ │ ├○ tagAndId ::(Str)
    ║     │ │ └─atpos ::(Str)
    ║     │ │   ├○ subject ::(Array)
    ║     │ │   └◙ IVal 0 ::(Int)
    ║     │ └─if ::(t53 + t57)
    ║     │   ├─iseq_s ::(Bool)
    ║     │   │ ├○ tag ::(Str)
    ║     │   │ └─substr ::(Str)
    ║     │   │   ├○ tagAndId ::(Str)
    ║     │   │   ├◙ IVal 0 ::(Int)
    ║     │   │   └◙ IVal 1 ::(Int)
    ║     │   ├─call then ::(t53)
    ║     │   │ └─atpos ::(Int)
    ║     │   │   ├─radix
    ║     │   │   │ ├◙ IVal 10
    ║     │   │   │ ├○ tagAndId
    ║     │   │   │ ├◙ IVal 1
    ║     │   │   │ └◙ IVal 0
    ║     │   │   └◙ IVal 0
    ║     │   └─call else ::(t57)
    ║     └─call else ::(t57)
    ╟─bind ::((Array × Str × Int) -> (Void + t63)) :annotations({"constraints" => "t43 = t59  &  t53 = t63  &  t57 = Void  &  t58 = ((t59 × t60 × t61) -> (t53 + t57))  &  t59 = Array  &  t60 = Str  &  t61 = Int  &  t62 = Int"})
    ║ ├○ &->#n :decl(static) ::((Array × Str × Int) -> (Void + t63))
    ║ └─╥Block "&->#n" ::((Array × Str × Int) -> (Void + t63)) :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical subject :decl(param)), QAST::Var(lexical tag :decl(param)), QAST::Var(lexical index :decl(param))], "optional" => [], "constraints" => "t43 = t59  &  t53 = t63  &  t57 = Void  &  t58 = ((t59 × t60 × t61) -> (t53 + t57))  &  t59 = Array  &  t60 = Str  &  t61 = Int  &  t62 = Int"})
    ║   ╟○ subject :decl(param) ::(Array) :annotations({"positional_index" => 0})
    ║   ╟○ tag :decl(param) ::(Str) :annotations({"positional_index" => 1})
    ║   ╟○ index :decl(param) ::(Int) :annotations({"positional_index" => 2})
    ║   ╙─call &ifTag ::(Void + t63) :annotations({"inlined" => "&->#n"})
    ║     ├○ subject ::(Array)
    ║     ├○ tag ::(Str)
    ║     ├─╥Block ::(Int -> t63) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical _ :decl(param))], "optional" => [], "constraints" => "t59 = Array  &  t61 = Int"})
    ║     │ ╟○ _ :decl(param) ::(Int) :annotations({"positional_index" => 0})
    ║     │ ╙─atpos ::(t63)
    ║     │   ├○ subject ::(Array)
    ║     │   └○ index ::(Int)
    ║     └─╥Block ::(Void -> Void) :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => [], "constraints" => "t60 = Str"})
    ║       ╙─die ::(Void)
    ║         └─concat ::(Str) :returns(str)
    ║           ├◙ SVal "ERROR: " ::(Str)
    ║           └─concat ::(Str) :returns(str)
    ║             ├◙ SVal "no such tag: " ::(Str)
    ║             └○ tag ::(Str) :returns(str)
    ╟─bind
    ║ ├○ &strOut-new :decl(static) ::(t64)
    ║ └─╥Block "&strOut-new" :annotations({"named" => {}, "constrain-self" => (Var), "slurpy" => [], "positional" => [QAST::Var(lexical u :decl(param)), QAST::Var(lexical indent :decl(param))], "optional" => []})
    ║   ╟○ u :decl(param) ::(t65) :annotations({"positional_index" => 0})
    ║   ╟○ indent :decl(param) ::(t66) :annotations({"positional_index" => 1})
    ║   ╟─bind ::(t70 + t71)
    ║   ║ ├○ v :decl(var) ::(t70 + t71)
    ║   ║ └─if ::(t70 + t71)
    ║   ║   ├─isinvokable ::(Bool)
    ║   ║   │ └○ u ::(t65)
    ║   ║   ├─call ::(t69)
    ║   ║   │ └○ u ::(t68 -> t69)
    ║   ║   └○ u ::(Bool + Int + Num + Str + Array)
    ║   ╙─typecase
    ║     ├─call &ifTag
    ║     │ ├○ v ::(Array)
    ║     │ ├◙ SVal "λ" ::(Str)
    ║     │ ├─╥Block :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical id :decl(param))], "optional" => []})
    ║     │ │ ╟○ id :decl(param) ::(t74) :annotations({"positional_index" => 0})
    ║     │ │ ╟─bind ::(Array)
    ║     │ │ ║ ├○ fvars :decl(var) ::(Array)
    ║     │ │ ║ └─call &sublist ::(Array)
    ║     │ │ ║   ├○ v ::(Array)
    ║     │ │ ║   └◙ IVal 2 ::(Int)
    ║     │ │ ╟─bind ::(t77)
    ║     │ │ ║ ├○ info :decl(var) ::(t77)
    ║     │ │ ║ └─atpos ::(t77)
    ║     │ │ ║   ├○ .λinfo ::(Array)
    ║     │ │ ║   └○ id ::(t74)
    ║     │ │ ╟─bind ::(Array)
    ║     │ │ ║ ├○ fvn2dBI :decl(var) ::(Array)
    ║     │ │ ║ └─split ::(Array)
    ║     │ │ ║   ├◙ SVal " " ::(Str)
    ║     │ │ ║   └─atpos ::(t79)
    ║     │ │ ║     ├○ info ::(t77)
    ║     │ │ ║     └◙ IVal 3 ::(Int)
    ║     │ │ ╟─bind ::(t81)
    ║     │ │ ║ ├○ from :decl(var) ::(t81)
    ║     │ │ ║ └─atpos ::(t81)
    ║     │ │ ║   ├○ info ::(t77)
    ║     │ │ ║   └◙ IVal 1 ::(Int)
    ║     │ │ ╟─bind ::(t83)
    ║     │ │ ║ ├○ length :decl(var) ::(t83)
    ║     │ │ ║ └─atpos ::(t83)
    ║     │ │ ║   ├○ info ::(t77)
    ║     │ │ ║   └◙ IVal 2 ::(Int)
    ║     │ │ ╟─bind ::(Str)
    ║     │ │ ║ ├○ src :decl(var) ::(Str) :returns(str)
    ║     │ │ ║ └─substr ::(Str)
    ║     │ │ ║   ├○ .src ::(Str)
    ║     │ │ ║   ├○ from ::(t81)
    ║     │ │ ║   └○ length ::(t83)
    ║     │ │ ╟─bind ::(Int)
    ║     │ │ ║ ├○ i :decl(var) ::(Int)
    ║     │ │ ║ └◙ IVal 0 ::(Int)
    ║     │ │ ╟─for
    ║     │ │ ║ ├○ fvn2dBI ::(Array)
    ║     │ │ ║ └─╥Block ::(t86 -> Str) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical pair :decl(param))], "optional" => [], "constraints" => "t64 = ((t92 × Str) -> t95)  &  t66 = Str  &  t86 = Str  &  t86 = Array  &  t88 = Str  &  t90 = Int  &  t90 = Str  &  t93 = Str  &  t95 = t97  &  t96 = Str  &  t97 = Str"})
    ║     │ │ ║   ╟○ pair :decl(param) ::(t86) :annotations({"positional_index" => 0})
    ║     │ │ ║   ╟─bind ::(Array)
    ║     │ │ ║   ║ ├○ pair ::(t86)
    ║     │ │ ║   ║ └─split ::(Array)
    ║     │ │ ║   ║   ├◙ SVal "." ::(Str)
    ║     │ │ ║   ║   └○ pair ::(t86)
    ║     │ │ ║   ╟─bind ::(t88)
    ║     │ │ ║   ║ ├○ name :decl(var) ::(t88) :returns(str)
    ║     │ │ ║   ║ └─atpos ::(t88)
    ║     │ │ ║   ║   ├○ pair ::(t86)
    ║     │ │ ║   ║   └◙ IVal 0 ::(Int)
    ║     │ │ ║   ╟─bind ::(t90)
    ║     │ │ ║   ║ ├○ dBI :decl(var) ::(t90)
    ║     │ │ ║   ║ └─atpos ::(t90)
    ║     │ │ ║   ║   ├○ pair ::(t86)
    ║     │ │ ║   ║   └◙ IVal 1 ::(Int)
    ║     │ │ ║   ╟─bind ::(t92)
    ║     │ │ ║   ║ ├○ val :decl(var) ::(t92)
    ║     │ │ ║   ║ └─atpos ::(t92)
    ║     │ │ ║   ║   ├○ fvars ::(Array)
    ║     │ │ ║   ║   └○ i ::(Int)
    ║     │ │ ║   ╟─bind ::(Int)
    ║     │ │ ║   ║ ├○ i ::(Int)
    ║     │ │ ║   ║ └─add_i ::(Int)
    ║     │ │ ║   ║   ├○ i ::(Int)
    ║     │ │ ║   ║   └◙ IVal 1 ::(Int)
    ║     │ │ ║   ╟─if ::(Bool + t93)
    ║     │ │ ║   ║ ├─not_i ::(Int)
    ║     │ │ ║   ║ │ └○ dBI ::(t90)
    ║     │ │ ║   ║ └─bind ::(Str)
    ║     │ │ ║   ║   ├○ dBI ::(t90)
    ║     │ │ ║   ║   └◙ SVal "∞" ::(Str)
    ║     │ │ ║   ╙─bind ::(Str)
    ║     │ │ ║     ├○ src ::(Str) :returns(str)
    ║     │ │ ║     └─concat ::(Str) :returns(str)
    ║     │ │ ║       ├─concat ::(Str) :returns(str)
    ║     │ │ ║       │ ├─concat ::(Str) :returns(str)
    ║     │ │ ║       │ │ ├○ src ::(Str) :returns(str)
    ║     │ │ ║       │ │ └─concat ::(Str)
    ║     │ │ ║       │ │   ├◙ SVal "\n" ::(Str)
    ║     │ │ ║       │ │   └○ indent ::(t66)
    ║     │ │ ║       │ └─concat ::(Str)
    ║     │ │ ║       │   ├◙ SVal "# where " ::(Str)
    ║     │ │ ║       │   └○ name ::(t88) :returns(str)
    ║     │ │ ║       └─concat ::(Str)
    ║     │ │ ║         ├◙ SVal " = " ::(Str)
    ║     │ │ ║         └─if ::(t96 + t97)
    ║     │ │ ║           ├─iseq_s ::(Bool)
    ║     │ │ ║           │ ├○ name ::(t88) :returns(str)
    ║     │ │ ║           │ └◙ SVal "self" ::(Str)
    ║     │ │ ║           ├◙ SVal "..." ::(Str)
    ║     │ │ ║           └─call &strOut-new ::(t95)
    ║     │ │ ║             ├○ val ::(t92)
    ║     │ │ ║             └─concat ::(Str)
    ║     │ │ ║               ├○ indent ::(t66)
    ║     │ │ ║               └◙ SVal "#           " ::(Str)
    ║     │ │ ╙○ src ::(Str) :returns(str)
    ║     │ └─╥Block :annotations({"delayed" => "simple"})
    ║     │   ╙─reprname
    ║     │     └○ v
    ║     ├─stringify ::(Str)
    ║     │ └○ v ::(Int)
    ║     ├─call &strLit
    ║     │ └○ v
    ║     ├─stringify
    ║     │ └○ v
    ║     └─╥Block :annotations({"delayed" => "simple"})
    ║       ╙─reprname
    ║         └○ v
    ╟─bind
    ║ ├○ &strOut :decl(static)
    ║ └─╥Block "&strOut"
    ║   ╟○ v :decl(param) :annotations({"positional_index" => 0})
    ║   ╟○ indent :decl(param) :annotations({"positional_index" => 1})
    ║   ╟─bind
    ║   ║ ├○ v
    ║   ║ └─call &force :annotations({"forced" => QAST::Var(lexical v)})
    ║   ║   └○ v
    ║   ╙─if
    ║     ├─isstr
    ║     │ └○ v
    ║     ├─call &strLit
    ║     │ └○ v
    ║     └─call &ifTag
    ║       ├○ v
    ║       ├◙ SVal "λ"
    ║       ├─╥Block
    ║       │ ╟○ id :decl(param)
    ║       │ ╟─bind
    ║       │ ║ ├○ fvars :decl(var)
    ║       │ ║ └─call &sublist
    ║       │ ║   ├○ v
    ║       │ ║   └◙ IVal 2
    ║       │ ╟─bind
    ║       │ ║ ├○ info :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ .λinfo
    ║       │ ║   └○ id
    ║       │ ╟─bind
    ║       │ ║ ├○ fvn2dBI :decl(var)
    ║       │ ║ └─split
    ║       │ ║   ├◙ SVal " "
    ║       │ ║   └─atpos
    ║       │ ║     ├○ info
    ║       │ ║     └◙ IVal 3
    ║       │ ╟─bind
    ║       │ ║ ├○ from :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ info
    ║       │ ║   └◙ IVal 1
    ║       │ ╟─bind
    ║       │ ║ ├○ length :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ info
    ║       │ ║   └◙ IVal 2
    ║       │ ╟─bind
    ║       │ ║ ├○ src :decl(var)
    ║       │ ║ └─substr
    ║       │ ║   ├○ .src
    ║       │ ║   ├○ from
    ║       │ ║   └○ length
    ║       │ ╟─bind
    ║       │ ║ ├○ i :decl(var)
    ║       │ ║ └◙ IVal 0
    ║       │ ╟─for
    ║       │ ║ ├○ fvn2dBI
    ║       │ ║ └─╥Block
    ║       │ ║   ╟○ pair :decl(param)
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ pair
    ║       │ ║   ║ └─split
    ║       │ ║   ║   ├◙ SVal "."
    ║       │ ║   ║   └○ pair
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ name :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ pair
    ║       │ ║   ║   └◙ IVal 0
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ dBI :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ pair
    ║       │ ║   ║   └◙ IVal 1
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ val :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ fvars
    ║       │ ║   ║   └○ i
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ i
    ║       │ ║   ║ └─add_i
    ║       │ ║   ║   ├○ i
    ║       │ ║   ║   └◙ IVal 1
    ║       │ ║   ╟─if
    ║       │ ║   ║ ├─not_i
    ║       │ ║   ║ │ └○ dBI
    ║       │ ║   ║ └─bind
    ║       │ ║   ║   ├○ dBI
    ║       │ ║   ║   └◙ SVal "∞"
    ║       │ ║   ╙─bind
    ║       │ ║     ├○ src
    ║       │ ║     └─concat :returns(str)
    ║       │ ║       ├─concat :returns(str)
    ║       │ ║       │ ├─concat :returns(str)
    ║       │ ║       │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ │ │ ├─call &force :annotations({"forced" => QAST::Var(lexical src)})
    ║       │ ║       │ │ │ │ │ │ └○ src
    ║       │ ║       │ │ │ │ │ └◙ SVal "\n"
    ║       │ ║       │ │ │ │ └─call &force :annotations({"forced" => QAST::Var(lexical indent)})
    ║       │ ║       │ │ │ │   └○ indent
    ║       │ ║       │ │ │ └◙ SVal "# where "
    ║       │ ║       │ │ └─call &force :annotations({"forced" => QAST::Var(lexical name)})
    ║       │ ║       │ │   └○ name
    ║       │ ║       │ └◙ SVal " = "
    ║       │ ║       └─call &force :annotations({"forced" => QAST::Op(if)})
    ║       │ ║         └─if
    ║       │ ║           ├─iseq_s
    ║       │ ║           │ ├○ name
    ║       │ ║           │ └◙ SVal "self"
    ║       │ ║           ├◙ SVal "..."
    ║       │ ║           └─call &strOut
    ║       │ ║             ├○ val
    ║       │ ║             └─concat :returns(str)
    ║       │ ║               ├─call &force :annotations({"forced" => QAST::Var(lexical indent)})
    ║       │ ║               │ └○ indent
    ║       │ ║               └◙ SVal "#           "
    ║       │ ╙○ src
    ║       └─if
    ║         ├─isint
    ║         │ └○ v
    ║         ├○ v
    ║         └─╥Block :annotations({"delayed" => "simple"})
    ║           ╙─reprname
    ║             └○ v
    ╟─bind
    ║ ├○ &say :decl(static)
    ║ └─╥Block "&say"
    ║   ╟○ v :decl(param) :annotations({"positional_index" => 0})
    ║   ╟─bind
    ║   ║ ├○ v
    ║   ║ └─call &force :annotations({"forced" => QAST::Var(lexical v)})
    ║   ║   └○ v
    ║   ╙─say
    ║     └─if
    ║       ├─isstr
    ║       │ └○ v
    ║       ├○ v
    ║       └─call &strOut
    ║         ├○ v
    ║         └◙ SVal ""
    ╟─bind
    ║ ├○ &apply1 :decl(static)
    ║ └─╥Block "&apply1"
    ║   ╟○ f :decl(param) :annotations({"positional_index" => 0})
    ║   ╟○ a1 :decl(param) :annotations({"positional_index" => 1})
    ║   ╟○ result :decl(var)
    ║   ╟─bind
    ║   ║ ├○ f
    ║   ║ └─call &force :annotations({"forced" => QAST::Var(lexical f)})
    ║   ║   └○ f
    ║   ╟─bind
    ║   ║ ├○ result
    ║   ║ └─call
    ║   ║   ├─defor
    ║   ║   │ ├─call &ifTag ::(Void + t63) :annotations({"inlined" => "&->#n"})
    ║   ║   │ │ ├○ f
    ║   ║   │ │ ├◙ SVal "λ"
    ║   ║   │ │ ├─╥Block ::(Int -> t63) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical _ :decl(param))], "optional" => [], "constraints" => "t59 = Array  &  t61 = Int"})
    ║   ║   │ │ │ ╟○ _ :decl(param) ::(Int) :annotations({"positional_index" => 0})
    ║   ║   │ │ │ ╙─atpos ::(t63)
    ║   ║   │ │ │   ├○ f
    ║   ║   │ │ │   └◙ IVal 1
    ║   ║   │ │ └─╥Block ::(Void -> Void) :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => [], "constraints" => "t60 = Str"})
    ║   ║   │ │   ╙─die ::(Void)
    ║   ║   │ │     └─concat ::(Str) :returns(str)
    ║   ║   │ │       ├◙ SVal "ERROR: " ::(Str)
    ║   ║   │ │       └─concat ::(Str) :returns(str)
    ║   ║   │ │         ├◙ SVal "no such tag: " ::(Str)
    ║   ║   │ │         └◙ SVal "λ"
    ║   ║   │ └─die
    ║   ║   │   └─concat :returns(str)
    ║   ║   │     ├─concat :returns(str)
    ║   ║   │     │ ├─concat :returns(str)
    ║   ║   │     │ │ ├◙ SVal "ERROR: cannot apply "
    ║   ║   │     │ │ └─call &force :annotations({"forced" => QAST::Op(call &strOut)})
    ║   ║   │     │ │   └─call &strOut
    ║   ║   │     │ │     ├○ f
    ║   ║   │     │ │     └◙ SVal ""
    ║   ║   │     │ └◙ SVal " to "
    ║   ║   │     └─call &force :annotations({"forced" => QAST::Op(call &strOut)})
    ║   ║   │       └─call &strOut
    ║   ║   │         ├○ a1
    ║   ║   │         └◙ SVal ""
    ║   ║   └○ a1
    ║   ╙─call &force :annotations({"forced" => QAST::Var(lexical result)})
    ║     └○ result
    ╟─bind
    ║ ├○ .qastSize :decl(static)
    ║ └◙ NVal 521
    ╟─bind
    ║ ├○ .blockCount :decl(static)
    ║ └◙ NVal 27
    ╟─bind
    ║ ├○ .listCount :decl(static)
    ║ └◙ NVal 6
    ╟─bind
    ║ ├○ .ivalCount :decl(static)
    ║ └◙ NVal 31
    ╟─bind
    ║ ├○ .svalCount :decl(static)
    ║ └◙ NVal 42
    ╟─bind
    ║ ├○ .svalSize :decl(static)
    ║ └◙ NVal 738
    ╙─╥Block :blocktype(immediate)
      ╟○ local mainResult :decl(var)
      ╟─bind
      ║ ├○ local mainResult
      ║ └─call &strOut
      ║   ├─call &apply1 :annotations({"FV" => {}})  ««"(λx.x) λx.x"
      ║   │ ├─list :annotations({"parent" => QAST::Op(call &apply1), "infoIdx" => 0, "FV" => {}})  ««"λx.x"
      ║   │ │ ├◙ SVal "λ0"
      ║   │ │ └─╥Block  ««"x"
      ║   │ │   ╟○ x :decl(param)
      ║   │ │   ╙○ x :annotations({"parent" => QAST::Op(list), "bound_at" => QAST::Op(list), "deBruijnIdx" => 1, "FV" => {"x" => [QAST::Var(lexical x)]}})
      ║   │ └─call &delayMemo :annotations({"delayed" => "memo"})  ««"λx.x"
      ║   │   └─╥Block :annotations({"delayed" => "simple"})
      ║   │     ╙─list :annotations({"parent" => QAST::Op(call &apply1), "infoIdx" => 1, "FV" => {}})  ««"λx.x"
      ║   │       ├◙ SVal "λ1"
      ║   │       └─╥Block  ««"x"
      ║   │         ╟○ x :decl(param)
      ║   │         ╙○ x :annotations({"parent" => QAST::Op(list), "bound_at" => QAST::Op(list), "deBruijnIdx" => 1, "FV" => {"x" => [QAST::Var(lexical x)]}})
      ║   └◙ SVal ""
      ╙○ local mainResult