──:CompUnit+{StrByDump}
  └─:Block :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => []})
    ╟─bind ::(Str)
    ║ ├○ .src :decl(static) ::(Str)
    ║ └◙ SVal "\n#\"foo\"  # type str\n\n#42     # ERROR NYI\n\n#λx.x    # type t0 -> t0\n\n#λx.λ_.x   # type t0 -> NQPMu -> t0\n\n#λ_.\"foo\"    # type: NQPMu -> str\n\n#(λx.x) \"foo\"    # type: t5 where t5 = str\n\n#(\"foo\" \"bar\")   # Type Error: cannot apply str to str\n\n#(\"foo\" λx.x)   # Type Error: cannot apply str to Void -> t0 where t0 = t5 -> t5\n\n((λx.x) λx.x)   # type: t5 where t5 = Void -> t0; t0 = t6 -> t6\n\n#(δ (# Combinators:\n#    #(M λu.u u)                  # self-application\n#    #(K λx.λ_.x)                 # (make) a constant function\n#    (I λx.x)                    # identity\n#   )\n#    I \"foo\"\n#)\n\n" ::(Str)
    ╟─bind ::(Array)
    ║ ├○ .λinfo :decl(static) ::(Array)
    ║ └─list ::(Array)
    ║   ├─list ::(Array)
    ║   │ ├◙ SVal "x" ::(Str)
    ║   │ ├◙ IVal 324 ::(Int)
    ║   │ ├◙ IVal 4 ::(Int)
    ║   │ └◙ SVal "" ::(Str)
    ║   └─list ::(Array)
    ║     ├◙ SVal "x" ::(Str)
    ║     ├◙ IVal 330 ::(Int)
    ║     ├◙ IVal 4 ::(Int)
    ║     └◙ SVal "" ::(Str)
    ╟─bind ::(Void -> Str)
    ║ ├○ &banner :decl(static) ::(Void -> Str)
    ║ └─:Block "&banner" ::(Void -> Str) :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => []})
    ║   ╙◙ SVal "This is L v0.0.1" ::(Str)
    ╟─bind ::(t18 -> Str)
    ║ ├○ &strLit :decl(static) ::(t18 -> Str)
    ║ └─:Block "&strLit" ::(t18 -> Str) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical s :decl(param))], "optional" => []})
    ║   ╟○ s :decl(param) ::(t18) :annotations({"positional_index" => 0})
    ║   ╟○ foo :decl(var) ::(t19)
    ║   ╙─concat ::(Str)
    ║     ├◙ SVal "\"" ::(Str)
    ║     └─concat ::(Str)
    ║       ├─escape ::(Str)
    ║       │ └○ s ::(t18)
    ║       └◙ SVal "\"" ::(Str)
    ╟─bind ::(t21 -> t22 -> Array)
    ║ ├○ &sublist :decl(static) ::(t21 -> t22 -> Array)
    ║ └─:Block "&sublist" ::(t21 -> t22 -> Array) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical list :decl(param)), QAST::Var(lexical from :decl(param))], "optional" => []})
    ║   ╟○ list :decl(param) ::(t21) :annotations({"positional_index" => 0})
    ║   ╟○ from :decl(param) ::(t22) :annotations({"positional_index" => 1})
    ║   ╟─bind ::(Int)
    ║   ║ ├○ n :decl(var) ::(Int)
    ║   ║ └─elems ::(Int)
    ║   ║   └○ list ::(t21)
    ║   ╟─bind ::(Int)
    ║   ║ ├○ count :decl(var) ::(Int)
    ║   ║ └○ n ::(Int)
    ║   ╟─bind ::(Int)
    ║   ║ ├○ to :decl(var) ::(Int)
    ║   ║ └─add_i ::(Int)
    ║   ║   ├○ from ::(t22)
    ║   ║   └○ count ::(Int)
    ║   ╟─bind ::(Array)
    ║   ║ ├○ out :decl(var) ::(Array)
    ║   ║ └─list ::(Array)
    ║   ╟─if ::(t27)
    ║   ║ ├─isgt_i ::(Bool)
    ║   ║ │ ├○ to ::(Int)
    ║   ║ │ └○ n ::(Int)
    ║   ║ └─bind ::(Int)
    ║   ║   ├○ to ::(Int)
    ║   ║   └○ n ::(Int)
    ║   ╟─while ::(t28)
    ║   ║ ├─islt_i ::(Bool)
    ║   ║ │ ├○ from ::(t22)
    ║   ║ │ └○ to ::(Int)
    ║   ║ └─:Stmts ::(Int)
    ║   ║   ├─push ::(Void)
    ║   ║   │ ├○ out ::(Array)
    ║   ║   │ └─atpos ::(t4)
    ║   ║   │   ├○ list ::(t21)
    ║   ║   │   └○ from ::(t22)
    ║   ║   └─bind ::(Int)
    ║   ║     ├○ from ::(t22)
    ║   ║     └─add_i ::(Int)
    ║   ║       ├○ from ::(t22)
    ║   ║       └◙ IVal 1 ::(Int)
    ║   ╙○ out ::(Array)
    ╟─bind ::(t30 -> t33)
    ║ ├○ &force :decl(static) ::(t30 -> t33)
    ║ └─:Block "&force" ::(t30 -> t33) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical x :decl(param))], "optional" => []})
    ║   ╟○ x :decl(param) ::(t30) :annotations({"positional_index" => 0})
    ║   ╟─bind ::(Str)
    ║   ║ ├○ foo :decl(var) ::(Str)
    ║   ║ └◙ SVal "bar" ::(Str)
    ║   ╙─if ::(t33)
    ║     ├─isinvokable ::(Bool)
    ║     │ └○ x ::(t30)
    ║     ├─call x ::(t32)
    ║     └○ x ::(t30)
    ╟─bind ::(t35 -> t36 -> t37 -> t38 -> t45)
    ║ ├○ &ifTag :decl(static) ::(t35 -> t36 -> t37 -> t38 -> t45)
    ║ └─:Block "&ifTag" ::(t35 -> t36 -> t37 -> t38 -> t45) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical subject :decl(param)), QAST::Var(lexical tag :decl(param)), QAST::Var(lexical then :decl(param)), QAST::Var(lexical else :decl(param))], "optional" => []})
    ║   ╟○ subject :decl(param) ::(t35) :annotations({"positional_index" => 0})
    ║   ╟○ tag :decl(param) ::(t36) :annotations({"positional_index" => 1})
    ║   ╟○ then :decl(param) ::(t37) :annotations({"positional_index" => 2})
    ║   ╟○ else :decl(param) ::(t38) :annotations({"positional_index" => 3})
    ║   ╟○ tagAndId :decl(var) ::(t39)
    ║   ╙─if ::(t45)
    ║     ├─islist ::(Bool)
    ║     │ └○ subject ::(t35)
    ║     ├─:Stmts ::(t43)
    ║     │ ├─bind ::(t4)
    ║     │ │ ├○ tagAndId ::(t39)
    ║     │ │ └─atpos ::(t4)
    ║     │ │   ├○ subject ::(t35)
    ║     │ │   └◙ IVal 0 ::(Int)
    ║     │ └─if ::(t43)
    ║     │   ├─iseq_s ::(Bool)
    ║     │   │ ├○ tag ::(t36)
    ║     │   │ └─substr ::(t40)
    ║     │   │   ├○ tagAndId ::(t39)
    ║     │   │   ├◙ IVal 0 ::(Int)
    ║     │   │   └◙ IVal 1 ::(Int)
    ║     │   ├─call then ::(t41)
    ║     │   │ └─atpos ::(t4)
    ║     │   │   ├─radix ::(Array)
    ║     │   │   │ ├◙ IVal 10 ::(Int)
    ║     │   │   │ ├○ tagAndId ::(t39)
    ║     │   │   │ ├◙ IVal 1 ::(Int)
    ║     │   │   │ └◙ IVal 0 ::(Int)
    ║     │   │   └◙ IVal 0 ::(Int)
    ║     │   └─call &force ::(t42) :annotations({"forced" => QAST::Var(lexical else)})
    ║     │     └○ else ::(t38)
    ║     └─call &force ::(t44) :annotations({"forced" => QAST::Var(lexical else)})
    ║       └○ else ::(t38)
    ╟─bind ::(t47 -> t48 -> t49 -> t53)
    ║ ├○ &->#n :decl(static) ::(t47 -> t48 -> t49 -> t53)
    ║ └─:Block "&->#n" ::(t47 -> t48 -> t49 -> t53) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical subject :decl(param)), QAST::Var(lexical tag :decl(param)), QAST::Var(lexical index :decl(param))], "optional" => []})
    ║   ╟○ subject :decl(param) ::(t47) :annotations({"positional_index" => 0})
    ║   ╟○ tag :decl(param) ::(t48) :annotations({"positional_index" => 1})
    ║   ╟○ index :decl(param) ::(t49) :annotations({"positional_index" => 2})
    ║   ╙─call &ifTag ::(t53) :annotations({"inlined" => "&->#n"})
    ║     ├○ subject ::(t47)
    ║     ├○ tag ::(t48)
    ║     ├─:Block ::(t50 -> t4) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical _ :decl(param))], "optional" => []})
    ║     │ ╟○ _ :decl(param) ::(t50) :annotations({"positional_index" => 0})
    ║     │ ╙─atpos ::(t4)
    ║     │   ├○ subject ::(t47)
    ║     │   └○ index ::(t49)
    ║     └─:Block ::(Void -> Void) :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => []})
    ║       ╙─die ::(Void)
    ║         └─concat ::(Str) :returns(str)
    ║           ├◙ SVal "ERROR: " ::(Str)
    ║           └─call &force ::(t52) :annotations({"forced" => QAST::Op(concat)})
    ║             └─concat ::(Str) :returns(str)
    ║               ├◙ SVal "no such tag: " ::(Str)
    ║               └─call &force ::(t51) :annotations({"forced" => QAST::Var(lexical tag)})
    ║                 └○ tag ::(t48)
    ╟─bind
    ║ ├○ &strOut :decl(static)
    ║ └─:Block "&strOut" :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical v :decl(param)), QAST::Var(lexical indent :decl(param))], "optional" => []})
    ║   ╟○ v :decl(param) ::(t55) :annotations({"positional_index" => 0})
    ║   ╟○ indent :decl(param) ::(t56) :annotations({"positional_index" => 1})
    ║   ╟─bind ::(t57)
    ║   ║ ├○ v ::(t55)
    ║   ║ └─call &force ::(t57) :annotations({"forced" => QAST::Var(lexical v)})
    ║   ║   └○ v ::(t55)
    ║   ╙─if
    ║     ├─isstr ::(Bool)
    ║     │ └○ v ::(t55)
    ║     ├─call &strLit ::(t58)
    ║     │ └○ v ::(t55)
    ║     └─call &ifTag
    ║       ├○ v ::(t55)
    ║       ├◙ SVal "λ" ::(Str)
    ║       ├─:Block :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical id :decl(param))], "optional" => []})
    ║       │ ╟○ id :decl(param) ::(t59) :annotations({"positional_index" => 0})
    ║       │ ╟─bind ::(t60)
    ║       │ ║ ├○ fvars :decl(var) ::(t60)
    ║       │ ║ └─call &sublist ::(t60)
    ║       │ ║   ├○ v ::(t55)
    ║       │ ║   └◙ IVal 2 ::(Int)
    ║       │ ╟─bind ::(t4)
    ║       │ ║ ├○ info :decl(var) ::(t4)
    ║       │ ║ └─atpos ::(t4)
    ║       │ ║   ├○ .λinfo ::(Array)
    ║       │ ║   └○ id ::(t59)
    ║       │ ╟─bind ::(Array)
    ║       │ ║ ├○ fvn2dBI :decl(var) ::(Array)
    ║       │ ║ └─split ::(Array)
    ║       │ ║   ├◙ SVal " " ::(Str)
    ║       │ ║   └─atpos ::(t4)
    ║       │ ║     ├○ info ::(t4)
    ║       │ ║     └◙ IVal 3 ::(Int)
    ║       │ ╟─bind ::(t4)
    ║       │ ║ ├○ from :decl(var) ::(t4)
    ║       │ ║ └─atpos ::(t4)
    ║       │ ║   ├○ info ::(t4)
    ║       │ ║   └◙ IVal 1 ::(Int)
    ║       │ ╟─bind ::(t4)
    ║       │ ║ ├○ length :decl(var) ::(t4)
    ║       │ ║ └─atpos ::(t4)
    ║       │ ║   ├○ info ::(t4)
    ║       │ ║   └◙ IVal 2 ::(Int)
    ║       │ ╟─bind ::(t66)
    ║       │ ║ ├○ src :decl(var) ::(t66)
    ║       │ ║ └─substr ::(t66)
    ║       │ ║   ├○ .src ::(Str)
    ║       │ ║   ├○ from ::(t4)
    ║       │ ║   └○ length ::(t4)
    ║       │ ╟─bind ::(Int)
    ║       │ ║ ├○ i :decl(var) ::(Int)
    ║       │ ║ └◙ IVal 0 ::(Int)
    ║       │ ╟─for
    ║       │ ║ ├○ fvn2dBI ::(Array)
    ║       │ ║ └─:Block :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical pair :decl(param))], "optional" => []})
    ║       │ ║   ╟○ pair :decl(param) ::(t69) :annotations({"positional_index" => 0})
    ║       │ ║   ╟─bind ::(Array)
    ║       │ ║   ║ ├○ pair ::(t69)
    ║       │ ║   ║ └─split ::(Array)
    ║       │ ║   ║   ├◙ SVal "." ::(Str)
    ║       │ ║   ║   └○ pair ::(t69)
    ║       │ ║   ╟─bind ::(t4)
    ║       │ ║   ║ ├○ name :decl(var) ::(t4)
    ║       │ ║   ║ └─atpos ::(t4)
    ║       │ ║   ║   ├○ pair ::(t69)
    ║       │ ║   ║   └◙ IVal 0 ::(Int)
    ║       │ ║   ╟─bind ::(t4)
    ║       │ ║   ║ ├○ dBI :decl(var) ::(t4)
    ║       │ ║   ║ └─atpos ::(t4)
    ║       │ ║   ║   ├○ pair ::(t69)
    ║       │ ║   ║   └◙ IVal 1 ::(Int)
    ║       │ ║   ╟─bind ::(t4)
    ║       │ ║   ║ ├○ val :decl(var) ::(t4)
    ║       │ ║   ║ └─atpos ::(t4)
    ║       │ ║   ║   ├○ fvars ::(t60)
    ║       │ ║   ║   └○ i ::(Int)
    ║       │ ║   ╟─bind ::(Int)
    ║       │ ║   ║ ├○ i ::(Int)
    ║       │ ║   ║ └─add_i ::(Int)
    ║       │ ║   ║   ├○ i ::(Int)
    ║       │ ║   ║   └◙ IVal 1 ::(Int)
    ║       │ ║   ╟─if
    ║       │ ║   ║ ├─not_i ::(Int)
    ║       │ ║   ║ │ └○ dBI ::(t4)
    ║       │ ║   ║ └─bind ::(Str)
    ║       │ ║   ║   ├○ dBI ::(t4)
    ║       │ ║   ║   └◙ SVal "∞" ::(Str)
    ║       │ ║   ╙─bind
    ║       │ ║     ├○ src
    ║       │ ║     └─concat :returns(str)
    ║       │ ║       ├─concat :returns(str)
    ║       │ ║       │ ├─concat :returns(str)
    ║       │ ║       │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ │ │ ├─call &force :annotations({"forced" => QAST::Var(lexical src)})
    ║       │ ║       │ │ │ │ │ │ └○ src
    ║       │ ║       │ │ │ │ │ └◙ SVal "\n"
    ║       │ ║       │ │ │ │ └─call &force :annotations({"forced" => QAST::Var(lexical indent)})
    ║       │ ║       │ │ │ │   └○ indent
    ║       │ ║       │ │ │ └◙ SVal "# where "
    ║       │ ║       │ │ └─call &force :annotations({"forced" => QAST::Var(lexical name)})
    ║       │ ║       │ │   └○ name
    ║       │ ║       │ └◙ SVal " = "
    ║       │ ║       └─call &force :annotations({"forced" => QAST::Op(if)})
    ║       │ ║         └─if
    ║       │ ║           ├─iseq_s
    ║       │ ║           │ ├○ name
    ║       │ ║           │ └◙ SVal "self"
    ║       │ ║           ├◙ SVal "..."
    ║       │ ║           └─call &strOut
    ║       │ ║             ├○ val
    ║       │ ║             └─concat :returns(str)
    ║       │ ║               ├─call &force :annotations({"forced" => QAST::Var(lexical indent)})
    ║       │ ║               │ └○ indent
    ║       │ ║               └◙ SVal "#           "
    ║       │ ╙○ src
    ║       └─if
    ║         ├─isint
    ║         │ └○ v ::(t55)
    ║         ├○ v ::(t55)
    ║         └─:Block :annotations({"delayed" => "simple"})
    ║           ╙─reprname
    ║             └○ v ::(t55)
    ╟─bind
    ║ ├○ &delayMemo :decl(static)
    ║ └─:Block "&delayMemo"
    ║   ╟○ x :decl(param) :annotations({"positional_index" => 0})
    ║   ╟○ result :decl(var)
    ║   ╟─bind
    ║   ║ ├○ wasRun :decl(var)
    ║   ║ └◙ IVal 0
    ║   ╙─:Block
    ║     ╙─if
    ║       ├○ result
    ║       ├○ wasRun
    ║       └─:Stmts
    ║         ├─bind
    ║         │ ├○ result
    ║         │ └◙ IVal 1
    ║         └─bind
    ║           ├○ wasRun
    ║           └─call x
    ╟─bind
    ║ ├○ &say :decl(static)
    ║ └─:Block "&say"
    ║   ╟○ v :decl(param) :annotations({"positional_index" => 0})
    ║   ╟─bind
    ║   ║ ├○ v
    ║   ║ └─call &force :annotations({"forced" => QAST::Var(lexical v)})
    ║   ║   └○ v
    ║   ╙─say
    ║     └─if
    ║       ├─isstr
    ║       │ └○ v
    ║       ├○ v
    ║       └─call &strOut
    ║         ├○ v
    ║         └◙ SVal ""
    ╟─bind
    ║ ├○ &apply1 :decl(static)
    ║ └─:Block "&apply1"
    ║   ╟○ f :decl(param) :annotations({"positional_index" => 0})
    ║   ╟○ a1 :decl(param) :annotations({"positional_index" => 1})
    ║   ╟○ result :decl(var)
    ║   ╟─bind
    ║   ║ ├○ f
    ║   ║ └─call &force :annotations({"forced" => QAST::Var(lexical f)})
    ║   ║   └○ f
    ║   ╟─bind
    ║   ║ ├○ result
    ║   ║ └─call
    ║   ║   ├─defor
    ║   ║   │ ├─call &ifTag ::(t53) :annotations({"inlined" => "&->#n"})
    ║   ║   │ │ ├○ f
    ║   ║   │ │ ├◙ SVal "λ"
    ║   ║   │ │ ├─:Block ::(t50 -> t4) :annotations({"named" => {}, "slurpy" => [], "positional" => [QAST::Var(lexical _ :decl(param))], "optional" => []})
    ║   ║   │ │ │ ╟○ _ :decl(param) ::(t50) :annotations({"positional_index" => 0})
    ║   ║   │ │ │ ╙─atpos ::(t4)
    ║   ║   │ │ │   ├○ f
    ║   ║   │ │ │   └◙ IVal 1
    ║   ║   │ │ └─:Block ::(Void -> Void) :annotations({"named" => {}, "slurpy" => [], "positional" => [], "optional" => []})
    ║   ║   │ │   ╙─die ::(Void)
    ║   ║   │ │     └─concat ::(Str) :returns(str)
    ║   ║   │ │       ├◙ SVal "ERROR: " ::(Str)
    ║   ║   │ │       └─call &force ::(t52) :annotations({"forced" => QAST::Op(concat)})
    ║   ║   │ │         └─concat ::(Str) :returns(str)
    ║   ║   │ │           ├◙ SVal "no such tag: " ::(Str)
    ║   ║   │ │           └─call &force ::(t51) :annotations({"forced" => QAST::Var(lexical tag)})
    ║   ║   │ │             └◙ SVal "λ"
    ║   ║   │ └─die
    ║   ║   │   └─concat :returns(str)
    ║   ║   │     ├─concat :returns(str)
    ║   ║   │     │ ├─concat :returns(str)
    ║   ║   │     │ │ ├◙ SVal "ERROR: cannot apply "
    ║   ║   │     │ │ └─call &force :annotations({"forced" => QAST::Op(call &strOut)})
    ║   ║   │     │ │   └─call &strOut
    ║   ║   │     │ │     ├○ f
    ║   ║   │     │ │     └◙ SVal ""
    ║   ║   │     │ └◙ SVal " to "
    ║   ║   │     └─call &force :annotations({"forced" => QAST::Op(call &strOut)})
    ║   ║   │       └─call &strOut
    ║   ║   │         ├○ a1
    ║   ║   │         └◙ SVal ""
    ║   ║   └○ a1
    ║   ╙─call &force :annotations({"forced" => QAST::Var(lexical result)})
    ║     └○ result
    ╟─bind
    ║ ├○ .qastSize :decl(static)
    ║ └◙ NVal 383
    ╟─bind
    ║ ├○ .blockCount :decl(static)
    ║ └◙ NVal 21
    ╟─bind
    ║ ├○ .listCount :decl(static)
    ║ └◙ NVal 6
    ╟─bind
    ║ ├○ .ivalCount :decl(static)
    ║ └◙ NVal 23
    ╟─bind
    ║ ├○ .svalCount :decl(static)
    ║ └◙ NVal 30
    ╟─bind
    ║ ├○ .svalSize :decl(static)
    ║ └◙ NVal 697
    ╙─:Block :blocktype(immediate)
      ╟○ local mainResult :decl(var)
      ╟─bind
      ║ ├○ local mainResult
      ║ └─call &strOut
      ║   ├─call &apply1 :annotations({"FV" => {}})  ««"(λx.x) λx.x"
      ║   │ ├─list :annotations({"parent" => QAST::Op(call &apply1), "infoIdx" => 0, "FV" => {}})  ««"λx.x"
      ║   │ │ ├◙ SVal "λ0"
      ║   │ │ └─:Block  ««"x"
      ║   │ │   ╟○ x :decl(param)
      ║   │ │   ╙○ x :annotations({"parent" => QAST::Op(list), "bound_at" => QAST::Op(list), "deBruijnIdx" => 1, "FV" => {"x" => [QAST::Var(lexical x)]}})
      ║   │ └─call &delayMemo :annotations({"delayed" => "memo"})  ««"λx.x"
      ║   │   └─:Block :annotations({"delayed" => "simple"})
      ║   │     ╙─list :annotations({"parent" => QAST::Op(call &apply1), "infoIdx" => 1, "FV" => {}})  ««"λx.x"
      ║   │       ├◙ SVal "λ1"
      ║   │       └─:Block  ««"x"
      ║   │         ╟○ x :decl(param)
      ║   │         ╙○ x :annotations({"parent" => QAST::Op(list), "bound_at" => QAST::Op(list), "deBruijnIdx" => 1, "FV" => {"x" => [QAST::Var(lexical x)]}})
      ║   └◙ SVal ""
      ╙○ local mainResult