──:CompUnit+{StrByDump}
  └─:Block
    ╟─bind :returns(str)
    ║ ├○ .src :decl(static) :returns(str)
    ║ └◙ SVal "\n#\"foo\"  # type str\n\n#42     # ERROR NYI\n\n#λx.x    # type t0 -> t0\n\n#λx.λ_.x   # type t0 -> NQPMu -> t0\n\n#λ_.\"foo\"    # type: NQPMu -> str\n\n#(λx.x) \"foo\"    # type: t5 where t5 = str\n\n#(\"foo\" \"bar\")   # Type Error: cannot apply str to str\n\n#(\"foo\" λx.x)   # Type Error: cannot apply str to Void -> t0 where t0 = t5 -> t5\n\n((λx.x) λx.x)   # type: t5 where t5 = Void -> t0; t0 = t6 -> t6\n\n#(δ (# Combinators:\n#    #(M λu.u u)                  # self-application\n#    #(K λx.λ_.x)                 # (make) a constant function\n#    (I λx.x)                    # identity\n#   )\n#    I \"foo\"\n#)\n\n"
    ╟─bind :returns(NQPArray)
    ║ ├○ .λinfo :decl(static) :returns(NQPArray)
    ║ └─list :returns(NQPArray)
    ║   ├─list :returns(NQPArray)
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 324
    ║   │ ├◙ IVal 4
    ║   │ └◙ SVal ""
    ║   └─list :returns(NQPArray)
    ║     ├◙ SVal "x"
    ║     ├◙ IVal 330
    ║     ├◙ IVal 4
    ║     └◙ SVal ""
    ╟─bind
    ║ ├○ &ifTag :decl(static)
    ║ └─:Block
    ║   ╟○ subject :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ tag :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟○ then :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 2 (int) ))
    ║   ╟○ else :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 3 (int) ))
    ║   ╟○ tagAndId :decl(var)
    ║   ╙─if
    ║     ├─islist
    ║     │ └○ subject
    ║     ├─:Stmts
    ║     │ ├─bind
    ║     │ │ ├○ tagAndId
    ║     │ │ └─atpos
    ║     │ │   ├○ subject
    ║     │ │   └◙ IVal 0
    ║     │ └─if
    ║     │   ├─iseq_s
    ║     │   │ ├○ tag
    ║     │   │ └─substr
    ║     │   │   ├○ tagAndId
    ║     │   │   ├◙ IVal 0
    ║     │   │   └◙ IVal 1
    ║     │   ├─call then
    ║     │   │ └─atpos
    ║     │   │   ├─radix
    ║     │   │   │ ├◙ IVal 10
    ║     │   │   │ ├○ tagAndId
    ║     │   │   │ ├◙ IVal 1
    ║     │   │   │ └◙ IVal 0
    ║     │   │   └◙ IVal 0
    ║     │   └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical else) ))
    ║     │     └○ else
    ║     └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical else) ))
    ║       └○ else
    ╟─bind
    ║ ├○ &->#n :decl(static)
    ║ └─:Block
    ║   ╟○ subject :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ tag :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟○ index :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 2 (int) ))
    ║   ╙─call &ifTag
    ║     ├○ subject
    ║     ├○ tag
    ║     ├─:Block
    ║     │ ╟○ _ :decl(param)
    ║     │ ╙─atpos
    ║     │   ├○ subject
    ║     │   └○ index
    ║     └─null
    ╟─bind
    ║ ├○ &sublist :decl(static)
    ║ └─:Block
    ║   ╟○ list :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ from :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟─bind :returns(int)
    ║   ║ ├○ n :decl(var) :returns(int)
    ║   ║ └─elems :returns(int)
    ║   ║   └○ list
    ║   ╟─bind :returns(int)
    ║   ║ ├○ count :decl(var) :returns(int)
    ║   ║ └○ n :returns(int)
    ║   ╟─bind :returns(int)
    ║   ║ ├○ to :decl(var) :returns(int)
    ║   ║ └─add_i :returns(int)
    ║   ║   ├○ from
    ║   ║   └○ count :returns(int)
    ║   ╟─bind :returns(NQPArray)
    ║   ║ ├○ out :decl(var) :returns(NQPArray)
    ║   ║ └─list :returns(NQPArray)
    ║   ╟─if
    ║   ║ ├─isgt_i
    ║   ║ │ ├○ to :returns(int)
    ║   ║ │ └○ n :returns(int)
    ║   ║ └─bind :returns(int)
    ║   ║   ├○ to :returns(int)
    ║   ║   └○ n :returns(int)
    ║   ╟─while
    ║   ║ ├─islt_i
    ║   ║ │ ├○ from
    ║   ║ │ └○ to :returns(int)
    ║   ║ └─:Stmts
    ║   ║   ├─push
    ║   ║   │ ├○ out :returns(NQPArray)
    ║   ║   │ └─atpos
    ║   ║   │   ├○ list
    ║   ║   │   └○ from
    ║   ║   └─bind :returns(int)
    ║   ║     ├○ from :returns(int)
    ║   ║     └─add_i :returns(int)
    ║   ║       ├○ from
    ║   ║       └◙ IVal 1
    ║   ╙○ out :returns(NQPArray)
    ╟─bind
    ║ ├○ &strOut :decl(static)
    ║ └─:Block
    ║   ╟○ v :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ indent :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟─bind
    ║   ║ ├○ v
    ║   ║ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical v) ))
    ║   ║   └○ v
    ║   ╙─if
    ║     ├─isstr
    ║     │ └○ v
    ║     ├─concat :returns(str) :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&strLit" (str) ))
    ║     │ ├◙ SVal "\""
    ║     │ └─concat :returns(str)
    ║     │   ├─escape :returns(str)
    ║     │   │ └○ v
    ║     │   └◙ SVal "\""
    ║     └─call &ifTag
    ║       ├○ v
    ║       ├◙ SVal "λ"
    ║       ├─:Block
    ║       │ ╟─bind
    ║       │ ║ ├○ id :decl(param)
    ║       │ ║ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical id) ))
    ║       │ ║   └○ id
    ║       │ ╟─bind
    ║       │ ║ ├○ fvars :decl(var)
    ║       │ ║ └─call &sublist
    ║       │ ║   ├○ v
    ║       │ ║   └◙ IVal 2
    ║       │ ╟─bind
    ║       │ ║ ├○ info :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ .λinfo
    ║       │ ║   └○ id
    ║       │ ╟─bind
    ║       │ ║ ├○ fvn2dBI :decl(var)
    ║       │ ║ └─split
    ║       │ ║   ├◙ SVal " "
    ║       │ ║   └─atpos
    ║       │ ║     ├○ info
    ║       │ ║     └◙ IVal 3
    ║       │ ╟─bind
    ║       │ ║ ├○ from :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ info
    ║       │ ║   └◙ IVal 1
    ║       │ ╟─bind
    ║       │ ║ ├○ length :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ info
    ║       │ ║   └◙ IVal 2
    ║       │ ╟─bind
    ║       │ ║ ├○ src :decl(var)
    ║       │ ║ └─substr
    ║       │ ║   ├○ .src
    ║       │ ║   ├○ from
    ║       │ ║   └○ length
    ║       │ ╟─bind :returns(int)
    ║       │ ║ ├○ i :decl(var)
    ║       │ ║ └◙ IVal 0
    ║       │ ╟─for
    ║       │ ║ ├○ fvn2dBI
    ║       │ ║ └─:Block
    ║       │ ║   ╟○ pair :decl(param)
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ pair
    ║       │ ║   ║ └─split
    ║       │ ║   ║   ├◙ SVal "."
    ║       │ ║   ║   └○ pair
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ name :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ pair
    ║       │ ║   ║   └◙ IVal 0
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ dBI :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ pair
    ║       │ ║   ║   └◙ IVal 1
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ val :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ fvars
    ║       │ ║   ║   └○ i
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ i
    ║       │ ║   ║ └─add_i
    ║       │ ║   ║   ├○ i
    ║       │ ║   ║   └◙ IVal 1
    ║       │ ║   ╟─if
    ║       │ ║   ║ ├─not_i
    ║       │ ║   ║ │ └○ dBI
    ║       │ ║   ║ └─bind :returns(str)
    ║       │ ║   ║   ├○ dBI :returns(str)
    ║       │ ║   ║   └◙ SVal "∞"
    ║       │ ║   ╙─bind :returns(str)
    ║       │ ║     ├○ src :returns(str)
    ║       │ ║     └─concat :returns(str)
    ║       │ ║       ├─concat :returns(str)
    ║       │ ║       │ ├─concat :returns(str)
    ║       │ ║       │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ │ ├─concat :returns(str)
    ║       │ ║       │ │ │ │ │ ├─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical src) ))
    ║       │ ║       │ │ │ │ │ │ └○ src
    ║       │ ║       │ │ │ │ │ └◙ SVal "\n"
    ║       │ ║       │ │ │ │ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical indent) ))
    ║       │ ║       │ │ │ │   └○ indent
    ║       │ ║       │ │ │ └◙ SVal "# where "
    ║       │ ║       │ │ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical name) ))
    ║       │ ║       │ │   └○ name
    ║       │ ║       │ └◙ SVal " = "
    ║       │ ║       └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Op(if) ))
    ║       │ ║         └─if
    ║       │ ║           ├─iseq_s
    ║       │ ║           │ ├○ name
    ║       │ ║           │ └◙ SVal "self"
    ║       │ ║           ├◙ SVal "..."
    ║       │ ║           └─call &strOut
    ║       │ ║             ├○ val
    ║       │ ║             └─concat :returns(str)
    ║       │ ║               ├─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical indent) ))
    ║       │ ║               │ └○ indent
    ║       │ ║               └◙ SVal "#           "
    ║       │ ╙○ src
    ║       └─if
    ║         ├─isint
    ║         │ └○ v
    ║         ├○ v
    ║         └─:Block :annotations(#`{BOOTHash:}nqp::hash( "delayed", "simple" (str) ))
    ║           ╙─reprname
    ║             └○ v
    ╟─bind
    ║ ├○ &delayMemo :decl(static)
    ║ └─:Block
    ║   ╟○ x :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ result :decl(var)
    ║   ╟─bind :returns(int)
    ║   ║ ├○ wasRun :decl(var)
    ║   ║ └◙ IVal 0
    ║   ╙─:Block
    ║     ╙─if
    ║       ├○ result
    ║       ├○ wasRun
    ║       └─:Stmts
    ║         ├─bind :returns(int)
    ║         │ ├○ result :returns(int)
    ║         │ └◙ IVal 1
    ║         └─bind
    ║           ├○ wasRun
    ║           └─call x
    ╟─bind
    ║ ├○ &force :decl(static)
    ║ └─:Block
    ║   ╟○ x :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟─bind :returns(str)
    ║   ║ ├○ foo :decl(var)
    ║   ║ └◙ SVal "bar"
    ║   ╙─if
    ║     ├─isinvokable
    ║     │ └○ x
    ║     ├─call x
    ║     └○ x
    ╟─bind
    ║ ├○ &say :decl(static)
    ║ └─:Block
    ║   ╟○ v :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟─bind
    ║   ║ ├○ v
    ║   ║ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical v) ))
    ║   ║   └○ v
    ║   ╙─say
    ║     └─if
    ║       ├─isstr
    ║       │ └○ v
    ║       ├○ v
    ║       └─call &strOut
    ║         ├○ v
    ║         └◙ SVal ""
    ╟─bind
    ║ ├○ &strLit :decl(static)
    ║ └─:Block
    ║   ╟○ s :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─concat :returns(str)
    ║     ├◙ SVal "\""
    ║     └─concat :returns(str)
    ║       ├─escape :returns(str)
    ║       │ └○ s
    ║       └◙ SVal "\""
    ╟─bind
    ║ ├○ &apply1 :decl(static)
    ║ └─:Block
    ║   ╟○ f :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ a1 :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟○ result :decl(var)
    ║   ╟─bind
    ║   ║ ├○ f
    ║   ║ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical f) ))
    ║   ║   └○ f
    ║   ╟─bind
    ║   ║ ├○ result
    ║   ║ └─call
    ║   ║   ├─defor
    ║   ║   │ ├─call &ifTag :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&->#n" (str) ))
    ║   ║   │ │ ├○ f
    ║   ║   │ │ ├◙ SVal "λ"
    ║   ║   │ │ ├─:Block
    ║   ║   │ │ │ ╟○ _ :decl(param)
    ║   ║   │ │ │ ╙─atpos
    ║   ║   │ │ │   ├○ f
    ║   ║   │ │ │   └◙ IVal 1
    ║   ║   │ │ └─null
    ║   ║   │ └─die
    ║   ║   │   └─concat :returns(str)
    ║   ║   │     ├─concat :returns(str)
    ║   ║   │     │ ├─concat :returns(str)
    ║   ║   │     │ │ ├◙ SVal "ERROR: cannot apply "
    ║   ║   │     │ │ └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Op(call &strOut) ))
    ║   ║   │     │ │   └─call &strOut
    ║   ║   │     │ │     ├○ f
    ║   ║   │     │ │     └◙ SVal ""
    ║   ║   │     │ └◙ SVal " to "
    ║   ║   │     └─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Op(call &strOut) ))
    ║   ║   │       └─call &strOut
    ║   ║   │         ├○ a1
    ║   ║   │         └◙ SVal ""
    ║   ║   └○ a1
    ║   ╙─call &force :annotations(#`{BOOTHash:}nqp::hash( "forced", QAST::Var(lexical result) ))
    ║     └○ result
    ╟─bind
    ║ ├○ .qastSize :decl(static)
    ║ └◙ NVal 373
    ╟─bind
    ║ ├○ .blockCount :decl(static)
    ║ └◙ NVal 19
    ╟─bind
    ║ ├○ .listCount :decl(static)
    ║ └◙ NVal 6
    ╟─bind
    ║ ├○ .ivalCount :decl(static)
    ║ └◙ NVal 23
    ╟─bind
    ║ ├○ .svalCount :decl(static)
    ║ └◙ NVal 27
    ╟─bind
    ║ ├○ .svalSize :decl(static)
    ║ └◙ NVal 661
    ╙─:Block :blocktype(immediate)
      ╟○ local mainResult :decl(var)
      ╟─bind
      ║ ├○ local mainResult
      ║ └─call &strOut
      ║   ├─call &apply1 :returns(t5) :annotations(#`{BOOTHash:}nqp::hash( "FV", #`{BOOTHash:}nqp::hash(  ) ))  ««"(λx.x) λx.x"
      ║   │ ├─list :returns(t5 -> t5) :annotations(#`{BOOTHash:}nqp::hash( "parent", QAST::Op(call &apply1), "infoIdx", 0 (int), "FV", #`{BOOTHash:}nqp::hash(  ) ))  ««"λx.x"
      ║   │ │ ├◙ SVal "λ0"
      ║   │ │ └─:Block  ««"x"
      ║   │ │   ╟○ x :decl(param) :returns(t5)
      ║   │ │   ╙○ x :returns(t5) :annotations(#`{BOOTHash:}nqp::hash( "parent", QAST::Op(list), "bound_at", QAST::Op(list), "deBruijnIdx", 1 (int), "FV", #`{BOOTHash:}nqp::hash( "x", #`{NQPArray:}[ QAST::Var(lexical x) ] ) ))
      ║   │ └─call &delayMemo :returns(Void -> t0) :annotations(#`{BOOTHash:}nqp::hash( "delayed", "memo" (str) ))  ««"λx.x"
      ║   │   └─:Block :returns(Void -> t6 -> t6) :annotations(#`{BOOTHash:}nqp::hash( "delayed", "simple" (str) ))
      ║   │     ╙─list :returns(t6 -> t6) :annotations(#`{BOOTHash:}nqp::hash( "parent", QAST::Op(call &apply1), "infoIdx", 1 (int), "FV", #`{BOOTHash:}nqp::hash(  ) ))  ««"λx.x"
      ║   │       ├◙ SVal "λ1"
      ║   │       └─:Block  ««"x"
      ║   │         ╟○ x :decl(param) :returns(t6)
      ║   │         ╙○ x :returns(t6) :annotations(#`{BOOTHash:}nqp::hash( "parent", QAST::Op(list), "bound_at", QAST::Op(list), "deBruijnIdx", 1 (int), "FV", #`{BOOTHash:}nqp::hash( "x", #`{NQPArray:}[ QAST::Var(lexical x) ] ) ))
      ║   └◙ SVal ""
      ╙○ local mainResult