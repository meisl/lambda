──CompUnit+{StrByDump}
  └─:Block
    ╟─bind
    ║ ├○ lexical .src :decl(static)
    ║ └◙ SVal "# ~> Compile Error: unbound variables y, z, w, u\n#(λx.λ_.y (x λy.x y z w)) \"fo\\noö\" \"bar\" \"baz\" λy.u \"qumbl\"\n\n# ~> (Runtime) ERROR: cannot apply \"xfo\\noö\" to λy.x y\n#(λx.λ_.(x λy.x y)) \"xfo\\noö\" \"xbar\" \"xbaz\" λz.\"qumbl\"\n\n#(λy.λz.λx.y (λy.y z)) \"y\" \"z\"\n\n# K applied to \"foo\" and something: ~> \"foo\"\n#(λx.λ_.x) \"foo\" (λf.λg.λx.f (g x))\n\n# Turing's Y:\n#(λU.U U) (λu.λf.f (u u f))\n\n# Turing's Y applied to a function that ignores param self:\n#(λU.U U) (λu.λf.f (u u f)) (λself.λx.x)\n\n\n(λU.λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n        (λnil.λcons.λcar.λcdr.λfoldl.\n            (λxs.\n                #nil\n                #car xs              # \"a\"\n                #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n                #cdr xs              # (cons \"b\" (cons \"c\" nil))\n                #car (cdr xs)        # \"b\"\n                #cdr (cdr xs)        # (cons \"c\", nil)\n                #car (cdr (cdr xs))  # \"c\"\n                #foldl (λx.λ_.x) \"zzz\" xs   # \"zzz\"\n                #foldl (λ_.λx.x) \"zzz\" xs   # \"c\"\n                foldl\n                #Y\n                #(λy.λx.λzzz.x y x) \"foo\" ((λx.λu.u x) ((λa.λb.λ_.a b) \"bar\" \"qumbl\"))\n                #\"foo\" \"bar\"\n            ) (cons \"a\" (cons \"b\" (cons \"c\" nil)))\n        )\n        (λonNil.λonCons.onNil)                  # ctor nil\n        (λx.λxs.λonNil.λonCons.onCons x xs)     # ctor cons\n        (λxs.xs (\"car\" \"nil\") (λhd.λtl.hd))     # car   (provoke error on nil)\n        (λxs.xs (\"cdr\" \"nil\") (λhd.λtl.tl))     # cdr   (provoke error on nil)\n        (Y λself.λf.λstart.λxs.                 # foldl\n            xs start\n               λhd.λtl.self f (f start hd) tl\n        )\n    )\n    (U U)   # Y\n)\n(λu.λf.f (u u f))       # U\n(λx.x x)                # M\n(λf.λx.λy.f y x)        # C\n(λf.λg.λx.f (g x))      # B\n(λf.λg.λx.f x (g x))    # S\n(λx.λ_.x)               # K\n(λx.x)                  # I\n"
    ╟─bind
    ║ ├○ lexical .λinfo :decl(static)
    ║ └─list
    ║   ├─list
    ║   │ ├◙ SVal "xs"
    ║   │ ├◙ IVal 581
    ║   │ ├◙ IVal 633
    ║   │ └◙ SVal "foldl.2"
    ║   ├─list
    ║   │ ├◙ SVal "foldl"
    ║   │ ├◙ IVal 560
    ║   │ ├◙ IVal 701
    ║   │ └◙ SVal "cons.4 nil.5"
    ║   ├─list
    ║   │ ├◙ SVal "cdr"
    ║   │ ├◙ IVal 555
    ║   │ ├◙ IVal 706
    ║   │ └◙ SVal "cons.4 nil.5"
    ║   ├─list
    ║   │ ├◙ SVal "car"
    ║   │ ├◙ IVal 550
    ║   │ ├◙ IVal 711
    ║   │ └◙ SVal "cons.4 nil.5"
    ║   ├─list
    ║   │ ├◙ SVal "cons"
    ║   │ ├◙ IVal 544
    ║   │ ├◙ IVal 717
    ║   │ └◙ SVal "nil.5"
    ║   ├─list
    ║   │ ├◙ SVal "nil"
    ║   │ ├◙ IVal 539
    ║   │ ├◙ IVal 722
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "onCons"
    ║   │ ├◙ IVal 1279
    ║   │ ├◙ IVal 13
    ║   │ └◙ SVal "onNil.2"
    ║   ├─list
    ║   │ ├◙ SVal "onNil"
    ║   │ ├◙ IVal 1272
    ║   │ ├◙ IVal 20
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "onCons"
    ║   │ ├◙ IVal 1345
    ║   │ ├◙ IVal 19
    ║   │ └◙ SVal "x.4 xs.3"
    ║   ├─list
    ║   │ ├◙ SVal "onNil"
    ║   │ ├◙ IVal 1338
    ║   │ ├◙ IVal 26
    ║   │ └◙ SVal "x.4 xs.3"
    ║   ├─list
    ║   │ ├◙ SVal "xs"
    ║   │ ├◙ IVal 1334
    ║   │ ├◙ IVal 30
    ║   │ └◙ SVal "x.4"
    ║   ├─list
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 1331
    ║   │ ├◙ IVal 33
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "tl"
    ║   │ ├◙ IVal 1417
    ║   │ ├◙ IVal 6
    ║   │ └◙ SVal "hd.2"
    ║   ├─list
    ║   │ ├◙ SVal "hd"
    ║   │ ├◙ IVal 1413
    ║   │ ├◙ IVal 10
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "xs"
    ║   │ ├◙ IVal 1391
    ║   │ ├◙ IVal 33
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "tl"
    ║   │ ├◙ IVal 1496
    ║   │ ├◙ IVal 6
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "hd"
    ║   │ ├◙ IVal 1492
    ║   │ ├◙ IVal 10
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "xs"
    ║   │ ├◙ IVal 1470
    ║   │ ├◙ IVal 33
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "tl"
    ║   │ ├◙ IVal 1636
    ║   │ ├◙ IVal 35
    ║   │ └◙ SVal "self.6 f.5 start.4 hd.2"
    ║   ├─list
    ║   │ ├◙ SVal "hd"
    ║   │ ├◙ IVal 1632
    ║   │ ├◙ IVal 39
    ║   │ └◙ SVal "self.6 f.5 start.4"
    ║   ├─list
    ║   │ ├◙ SVal "xs"
    ║   │ ├◙ IVal 1567
    ║   │ ├◙ IVal 104
    ║   │ └◙ SVal "start.4 self.6 f.5"
    ║   ├─list
    ║   │ ├◙ SVal "start"
    ║   │ ├◙ IVal 1560
    ║   │ ├◙ IVal 111
    ║   │ └◙ SVal "self.6 f.5"
    ║   ├─list
    ║   │ ├◙ SVal "f"
    ║   │ ├◙ IVal 1557
    ║   │ ├◙ IVal 114
    ║   │ └◙ SVal "self.6"
    ║   ├─list
    ║   │ ├◙ SVal "self"
    ║   │ ├◙ IVal 1551
    ║   │ ├◙ IVal 120
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "Y"
    ║   │ ├◙ IVal 509
    ║   │ ├◙ IVal 1168
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "I"
    ║   │ ├◙ IVal 500
    ║   │ ├◙ IVal 1195
    ║   │ └◙ SVal "U.7"
    ║   ├─list
    ║   │ ├◙ SVal "K"
    ║   │ ├◙ IVal 497
    ║   │ ├◙ IVal 1198
    ║   │ └◙ SVal "U.7"
    ║   ├─list
    ║   │ ├◙ SVal "S"
    ║   │ ├◙ IVal 494
    ║   │ ├◙ IVal 1201
    ║   │ └◙ SVal "U.7"
    ║   ├─list
    ║   │ ├◙ SVal "B"
    ║   │ ├◙ IVal 491
    ║   │ ├◙ IVal 1204
    ║   │ └◙ SVal "U.7"
    ║   ├─list
    ║   │ ├◙ SVal "C"
    ║   │ ├◙ IVal 488
    ║   │ ├◙ IVal 1207
    ║   │ └◙ SVal "U.7"
    ║   ├─list
    ║   │ ├◙ SVal "M"
    ║   │ ├◙ IVal 485
    ║   │ ├◙ IVal 1210
    ║   │ └◙ SVal "U.7"
    ║   ├─list
    ║   │ ├◙ SVal "U"
    ║   │ ├◙ IVal 482
    ║   │ ├◙ IVal 1213
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "f"
    ║   │ ├◙ IVal 1701
    ║   │ ├◙ IVal 12
    ║   │ └◙ SVal "u.2"
    ║   ├─list
    ║   │ ├◙ SVal "u"
    ║   │ ├◙ IVal 1698
    ║   │ ├◙ IVal 15
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 1726
    ║   │ ├◙ IVal 6
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "y"
    ║   │ ├◙ IVal 1760
    ║   │ ├◙ IVal 8
    ║   │ └◙ SVal "f.3 x.2"
    ║   ├─list
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 1757
    ║   │ ├◙ IVal 11
    ║   │ └◙ SVal "f.3"
    ║   ├─list
    ║   │ ├◙ SVal "f"
    ║   │ ├◙ IVal 1754
    ║   │ ├◙ IVal 14
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 1788
    ║   │ ├◙ IVal 10
    ║   │ └◙ SVal "f.3 g.2"
    ║   ├─list
    ║   │ ├◙ SVal "g"
    ║   │ ├◙ IVal 1785
    ║   │ ├◙ IVal 13
    ║   │ └◙ SVal "f.3"
    ║   ├─list
    ║   │ ├◙ SVal "f"
    ║   │ ├◙ IVal 1782
    ║   │ ├◙ IVal 16
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 1816
    ║   │ ├◙ IVal 12
    ║   │ └◙ SVal "f.3 g.2"
    ║   ├─list
    ║   │ ├◙ SVal "g"
    ║   │ ├◙ IVal 1813
    ║   │ ├◙ IVal 15
    ║   │ └◙ SVal "f.3"
    ║   ├─list
    ║   │ ├◙ SVal "f"
    ║   │ ├◙ IVal 1810
    ║   │ ├◙ IVal 18
    ║   │ └◙ SVal ""
    ║   ├─list
    ║   │ ├◙ SVal "_"
    ║   │ ├◙ IVal 1841
    ║   │ ├◙ IVal 4
    ║   │ └◙ SVal "x.2"
    ║   ├─list
    ║   │ ├◙ SVal "x"
    ║   │ ├◙ IVal 1838
    ║   │ ├◙ IVal 7
    ║   │ └◙ SVal ""
    ║   └─list
    ║     ├◙ SVal "x"
    ║     ├◙ IVal 1866
    ║     ├◙ IVal 4
    ║     └◙ SVal ""
    ╟─bind
    ║ ├○ lexical .ifTag :decl(static)
    ║ └─:Block
    ║   ╟○ lexical subject :decl(param)
    ║   ╟○ lexical tag :decl(param)
    ║   ╟○ lexical then :decl(param)
    ║   ╟○ lexical else :decl(param)
    ║   ╟○ lexical tagAndId :decl(var)
    ║   ╙─if
    ║     ├─islist
    ║     │ └○ lexical subject
    ║     ├─:Stmts
    ║     │ ├─bind
    ║     │ │ ├○ lexical tagAndId
    ║     │ │ └─atpos
    ║     │ │   ├○ lexical subject
    ║     │ │   └◙ IVal 0
    ║     │ └─if
    ║     │   ├─iseq_s
    ║     │   │ ├○ lexical tag
    ║     │   │ └─substr
    ║     │   │   ├○ lexical tagAndId
    ║     │   │   ├◙ IVal 0
    ║     │   │   └◙ IVal 1
    ║     │   ├─call then
    ║     │   │ └─atpos
    ║     │   │   ├─radix
    ║     │   │   │ ├◙ IVal 10
    ║     │   │   │ ├○ lexical tagAndId
    ║     │   │   │ ├◙ IVal 1
    ║     │   │   │ └◙ IVal 0
    ║     │   │   └◙ IVal 0
    ║     │   └─call .force
    ║     │     └○ lexical else
    ║     └─call .force
    ║       └○ lexical else
    ╟─bind
    ║ ├○ lexical .->#n :decl(static)
    ║ └─:Block
    ║   ╟○ lexical subject :decl(param)
    ║   ╟○ lexical tag :decl(param)
    ║   ╟○ lexical index :decl(param)
    ║   ╙─call .ifTag
    ║     ├○ lexical subject
    ║     ├○ lexical tag
    ║     ├─:Block
    ║     │ ╟○ lexical _ :decl(param)
    ║     │ ╙─atpos
    ║     │   ├○ lexical subject
    ║     │   └○ lexical index
    ║     └─null
    ╟─bind
    ║ ├○ lexical .sublist :decl(static)
    ║ └─:Block
    ║   ╟○ lexical list :decl(param)
    ║   ╟○ lexical from :decl(param)
    ║   ╟○ lexical count :decl(param) :default((elems) ( lexical list))
    ║   ╟─bind
    ║   ║ ├○ lexical n :decl(var)
    ║   ║ └─elems
    ║   ║   └○ lexical list
    ║   ╟─bind
    ║   ║ ├○ lexical out :decl(var)
    ║   ║ └─list
    ║   ╟─bind
    ║   ║ ├○ lexical to :decl(var)
    ║   ║ └─add_i
    ║   ║   ├○ lexical from
    ║   ║   └○ lexical count
    ║   ╟─if
    ║   ║ ├─isgt_i
    ║   ║ │ ├○ lexical to
    ║   ║ │ └○ lexical n
    ║   ║ └─bind
    ║   ║   ├○ lexical to
    ║   ║   └○ lexical n
    ║   ╟─while
    ║   ║ ├─islt_i
    ║   ║ │ ├○ lexical from
    ║   ║ │ └○ lexical to
    ║   ║ └─:Stmts
    ║   ║   ├─push
    ║   ║   │ ├○ lexical out
    ║   ║   │ └─atpos
    ║   ║   │   ├○ lexical list
    ║   ║   │   └○ lexical from
    ║   ║   └─bind
    ║   ║     ├○ lexical from
    ║   ║     └─add_i
    ║   ║       ├○ lexical from
    ║   ║       └◙ IVal 1
    ║   ╙○ lexical out
    ╟─bind
    ║ ├○ lexical .strOut :decl(static)
    ║ └─:Block
    ║   ╟○ lexical v :decl(param)
    ║   ╟○ lexical indent :decl(param)
    ║   ╟─bind
    ║   ║ ├○ lexical v
    ║   ║ └─call .force
    ║   ║   └○ lexical v
    ║   ╙─if
    ║     ├─isstr
    ║     │ └○ lexical v
    ║     ├─call .strLit
    ║     │ └○ lexical v
    ║     └─call .ifTag
    ║       ├○ lexical v
    ║       ├◙ SVal "λ"
    ║       ├─:Block
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical id :decl(param)
    ║       │ ║ └─call .force
    ║       │ ║   └○ lexical id
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical fvars :decl(var)
    ║       │ ║ └─call .sublist
    ║       │ ║   ├○ lexical v
    ║       │ ║   └◙ IVal 2
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical info :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ lexical .λinfo
    ║       │ ║   └○ lexical id
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical fvn2dBI :decl(var)
    ║       │ ║ └─split
    ║       │ ║   ├◙ SVal " "
    ║       │ ║   └─atpos
    ║       │ ║     ├○ lexical info
    ║       │ ║     └◙ IVal 3
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical from :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ lexical info
    ║       │ ║   └◙ IVal 1
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical length :decl(var)
    ║       │ ║ └─atpos
    ║       │ ║   ├○ lexical info
    ║       │ ║   └◙ IVal 2
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical src :decl(var)
    ║       │ ║ └─concat
    ║       │ ║   ├─concat
    ║       │ ║   │ ├─concat
    ║       │ ║   │ │ ├─call .force
    ║       │ ║   │ │ │ └─substr
    ║       │ ║   │ │ │   ├○ lexical .src
    ║       │ ║   │ │ │   ├○ lexical from
    ║       │ ║   │ │ │   └○ lexical length
    ║       │ ║   │ │ └◙ SVal "  # :tag("
    ║       │ ║   │ └─call .force
    ║       │ ║   │   └─call .strLit
    ║       │ ║   │     └─atpos
    ║       │ ║   │       ├○ lexical v
    ║       │ ║   │       └◙ IVal 0
    ║       │ ║   └◙ SVal ")"
    ║       │ ╟─bind
    ║       │ ║ ├○ lexical i :decl(var)
    ║       │ ║ └◙ IVal 0
    ║       │ ╟─for
    ║       │ ║ ├○ lexical fvn2dBI
    ║       │ ║ └─:Block
    ║       │ ║   ╟○ lexical pair :decl(param)
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ lexical pair
    ║       │ ║   ║ └─split
    ║       │ ║   ║   ├◙ SVal "."
    ║       │ ║   ║   └○ lexical pair
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ lexical name :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ lexical pair
    ║       │ ║   ║   └◙ IVal 0
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ lexical dBI :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ lexical pair
    ║       │ ║   ║   └◙ IVal 1
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ lexical val :decl(var)
    ║       │ ║   ║ └─atpos
    ║       │ ║   ║   ├○ lexical fvars
    ║       │ ║   ║   └○ lexical i
    ║       │ ║   ╟─bind
    ║       │ ║   ║ ├○ lexical i
    ║       │ ║   ║ └─add_i
    ║       │ ║   ║   ├○ lexical i
    ║       │ ║   ║   └◙ IVal 1
    ║       │ ║   ╟─if
    ║       │ ║   ║ ├─not_i
    ║       │ ║   ║ │ └○ lexical dBI
    ║       │ ║   ║ └─bind
    ║       │ ║   ║   ├○ lexical dBI
    ║       │ ║   ║   └◙ SVal "∞"
    ║       │ ║   ╙─bind
    ║       │ ║     ├○ lexical src
    ║       │ ║     └─concat
    ║       │ ║       ├─concat
    ║       │ ║       │ ├─concat
    ║       │ ║       │ │ ├─concat
    ║       │ ║       │ │ │ ├─concat
    ║       │ ║       │ │ │ │ ├─concat
    ║       │ ║       │ │ │ │ │ ├─concat
    ║       │ ║       │ │ │ │ │ │ ├─concat
    ║       │ ║       │ │ │ │ │ │ │ ├─call .force
    ║       │ ║       │ │ │ │ │ │ │ │ └○ lexical src
    ║       │ ║       │ │ │ │ │ │ │ └◙ SVal "\n"
    ║       │ ║       │ │ │ │ │ │ └─call .force
    ║       │ ║       │ │ │ │ │ │   └○ lexical indent
    ║       │ ║       │ │ │ │ │ └◙ SVal "# where "
    ║       │ ║       │ │ │ │ └─call .force
    ║       │ ║       │ │ │ │   └○ lexical name
    ║       │ ║       │ │ │ └◙ SVal "("
    ║       │ ║       │ │ └─call .force
    ║       │ ║       │ │   └○ lexical dBI
    ║       │ ║       │ └◙ SVal ") = "
    ║       │ ║       └─call .force
    ║       │ ║         └─if
    ║       │ ║           ├─iseq_s
    ║       │ ║           │ ├○ lexical name
    ║       │ ║           │ └◙ SVal "self"
    ║       │ ║           ├◙ SVal "..."
    ║       │ ║           └─call .strOut
    ║       │ ║             ├○ lexical val
    ║       │ ║             └─concat
    ║       │ ║               ├─call .force
    ║       │ ║               │ └○ lexical indent
    ║       │ ║               └◙ SVal "#           "
    ║       │ ╙○ lexical src
    ║       └─:Block
    ║         ╙─reprname
    ║           └○ lexical v
    ╟─bind
    ║ ├○ lexical .delayMemo :decl(static)
    ║ └─:Block
    ║   ╟○ lexical block :decl(param)
    ║   ╟─bind
    ║   ║ ├○ lexical wasRun :decl(var)
    ║   ║ └◙ IVal 0
    ║   ╟○ lexical result :decl(var)
    ║   ╙─:Block
    ║     ╙─if
    ║       ├○ lexical wasRun
    ║       ├○ lexical result
    ║       └─:Stmts
    ║         ├─bind
    ║         │ ├○ lexical wasRun
    ║         │ └◙ IVal 1
    ║         └─bind
    ║           ├○ lexical result
    ║           └─call block
    ╟─bind
    ║ ├○ lexical .force :decl(static)
    ║ └─:Block
    ║   ╟○ lexical x :decl(param)
    ║   ╙─if
    ║     ├─isinvokable
    ║     │ └○ lexical x
    ║     ├─call x
    ║     └○ lexical x
    ╟─bind
    ║ ├○ lexical .say :decl(static)
    ║ └─:Block
    ║   ╟○ lexical v :decl(param)
    ║   ╟─bind
    ║   ║ ├○ lexical v
    ║   ║ └─call .force
    ║   ║   └○ lexical v
    ║   ╙─say
    ║     └─if
    ║       ├─isstr
    ║       │ └○ lexical v
    ║       ├○ lexical v
    ║       └─call .strOut
    ║         ├○ lexical v
    ║         └◙ SVal ""
    ╟─bind
    ║ ├○ lexical .strLit :decl(static)
    ║ └─:Block
    ║   ╟○ lexical s :decl(param)
    ║   ╙─concat
    ║     ├─concat
    ║     │ ├◙ SVal "\""
    ║     │ └─call .force
    ║     │   └─escape
    ║     │     └○ lexical s
    ║     └◙ SVal "\""
    ╟─bind
    ║ ├○ lexical .apply1 :decl(static)
    ║ └─:Block
    ║   ╟○ lexical f :decl(param)
    ║   ╟○ lexical a1 :decl(param)
    ║   ╟○ lexical result :decl(var)
    ║   ╟─bind
    ║   ║ ├○ lexical f
    ║   ║ └─call .force
    ║   ║   └○ lexical f
    ║   ╟─bind
    ║   ║ ├○ lexical result
    ║   ║ └─call
    ║   ║   ├─defor
    ║   ║   │ ├─call .->#n
    ║   ║   │ │ ├○ lexical f
    ║   ║   │ │ ├◙ SVal "λ"
    ║   ║   │ │ └◙ IVal 1
    ║   ║   │ └─die
    ║   ║   │   └─concat
    ║   ║   │     ├─concat
    ║   ║   │     │ ├─concat
    ║   ║   │     │ │ ├◙ SVal "ERROR: cannot apply "
    ║   ║   │     │ │ └─call .force
    ║   ║   │     │ │   └─call .strLit
    ║   ║   │     │ │     └○ lexical f
    ║   ║   │     │ └◙ SVal " to "
    ║   ║   │     └─call .force
    ║   ║   │       └─call .strOut
    ║   ║   │         ├○ lexical a1
    ║   ║   │         └◙ SVal ""
    ║   ║   └○ lexical a1
    ║   ╙─call .force
    ║     └○ lexical result
    ╟─bind
    ║ ├○ lexical .testDelay01 :decl(static)
    ║ └─call .delayMemo
    ║   └─:Block
    ║     ╟─say
    ║     ║ └◙ SVal ".testDelay01 forced!!!!"
    ║     ╙◙ SVal "42"
    ╟─bind
    ║ ├○ lexical .testDelay02 :decl(static)
    ║ └─:Block
    ║   ╟○ lexical delayed :decl(param)
    ║   ╟○ lexical simple :decl(var)
    ║   ╟○ lexical memo :decl(var)
    ║   ╟─bind
    ║   ║ ├○ lexical simple
    ║   ║ └○ lexical delayed
    ║   ╟─bind
    ║   ║ ├○ lexical memo
    ║   ║ └○ lexical delayed
    ║   ╙○ lexical memo
    ╟─bind
    ║ ├○ lexical .qastSize :decl(static)
    ║ └◙ NVal 1028
    ╟─bind
    ║ ├○ lexical .blockCount :decl(static)
    ║ └◙ NVal 91
    ╟─bind
    ║ ├○ lexical .listCount :decl(static)
    ║ └◙ NVal 96
    ╟─bind
    ║ ├○ lexical .ivalCount :decl(static)
    ║ └◙ NVal 114
    ╟─bind
    ║ ├○ lexical .svalCount :decl(static)
    ║ └◙ NVal 180
    ╟─bind
    ║ ├○ lexical .svalSize :decl(static)
    ║ └◙ NVal 2637
    ╙─:Block :blocktype(immediate)
      ╟○ local mainResult :decl(var)
      ╟─call .say
      ║ └─concat
      ║   ├─concat
      ║   │ ├─concat
      ║   │ │ ├─concat
      ║   │ │ │ ├─concat
      ║   │ │ │ │ ├─concat
      ║   │ │ │ │ │ ├─concat
      ║   │ │ │ │ │ │ ├─concat
      ║   │ │ │ │ │ │ │ ├─concat
      ║   │ │ │ │ │ │ │ │ ├─concat
      ║   │ │ │ │ │ │ │ │ │ ├─concat
      ║   │ │ │ │ │ │ │ │ │ │ ├─concat
      ║   │ │ │ │ │ │ │ │ │ │ │ ├◙ SVal "47 lambdas\n"
      ║   │ │ │ │ │ │ │ │ │ │ │ └─call .force
      ║   │ │ │ │ │ │ │ │ │ │ │   └○ lexical .qastSize
      ║   │ │ │ │ │ │ │ │ │ │ └◙ SVal " QAST::Node s\n"
      ║   │ │ │ │ │ │ │ │ │ └─call .force
      ║   │ │ │ │ │ │ │ │ │   └○ lexical .blockCount
      ║   │ │ │ │ │ │ │ │ └◙ SVal " QAST::Block s\n"
      ║   │ │ │ │ │ │ │ └─call .force
      ║   │ │ │ │ │ │ │   └○ lexical .listCount
      ║   │ │ │ │ │ │ └◙ SVal " QAST::Op(list) s\n"
      ║   │ │ │ │ │ └─call .force
      ║   │ │ │ │ │   └○ lexical .ivalCount
      ║   │ │ │ │ └◙ SVal " QAST::IVal s\n"
      ║   │ │ │ └─call .force
      ║   │ │ │   └○ lexical .svalSize
      ║   │ │ └◙ SVal " chars ttl in "
      ║   │ └─call .force
      ║   │   └○ lexical .svalCount
      ║   └◙ SVal " QAST::SVal s\n------------------------------------------------"
      ╟─bind
      ║ ├○ local mainResult
      ║ └─call .strOut
      ║   ├─call .apply1  ««"(λU.λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\"...
      ║   │ ├─call .apply1
      ║   │ │ ├─call .apply1
      ║   │ │ │ ├─call .apply1
      ║   │ │ │ │ ├─call .apply1
      ║   │ │ │ │ │ ├─call .apply1
      ║   │ │ │ │ │ │ ├─call .apply1
      ║   │ │ │ │ │ │ │ ├─list
      ║   │ │ │ │ │ │ │ │ ├◙ SVal "λ31"
      ║   │ │ │ │ │ │ │ │ └─:Block  ««"λU.λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n"...
      ║   │ │ │ │ │ │ │ │   ╟○ lexical U :decl(param)
      ║   │ │ │ │ │ │ │ │   ╙─list
      ║   │ │ │ │ │ │ │ │     ├◙ SVal "λ30"
      ║   │ │ │ │ │ │ │ │     ├─:Block  ««"λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n   "...
      ║   │ │ │ │ │ │ │ │     │ ╟○ lexical M :decl(param)
      ║   │ │ │ │ │ │ │ │     │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   ├◙ SVal "λ29"
      ║   │ │ │ │ │ │ │ │     │   ├─:Block  ««"λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n      "...
      ║   │ │ │ │ │ │ │ │     │   │ ╟○ lexical C :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   ├◙ SVal "λ28"
      ║   │ │ │ │ │ │ │ │     │   │   ├─:Block  ««"λB.λS.λK.λI.\n    (λY.\n        # Lists:\n        ("...
      ║   │ │ │ │ │ │ │ │     │   │   │ ╟○ lexical B :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   ├◙ SVal "λ27"
      ║   │ │ │ │ │ │ │ │     │   │   │   ├─:Block  ««"λS.λK.λI.\n    (λY.\n        # Lists:\n        (λni"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │ ╟○ lexical S :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   ├◙ SVal "λ26"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   ├─:Block  ««"λK.λI.\n    (λY.\n        # Lists:\n        (λnil.λ"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │ ╟○ lexical K :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   ├◙ SVal "λ25"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   ├─:Block  ««"λI.\n    (λY.\n        # Lists:\n        (λnil.λcon"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │ ╟○ lexical I :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │ ╙─call .apply1  ««"\n    (λY.\n        # Lists:\n        (λnil.λcons.λ"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   ├─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │ ├◙ SVal "λ24"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │ └─:Block  ««"λY.\n        # Lists:\n        (λnil.λcons.λcar.λcd"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │   ╟○ lexical Y :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │   ╙─call .apply1  ««"\n        # Lists:\n        (λnil.λcons.λcar.λcdr.λ"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ ├─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │ ├◙ SVal "λ5"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │ └─:Block  ««"λnil.λcons.λcar.λcdr.λfoldl.\n            (λxs.\n  "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │   ╟○ lexical nil :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │   ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     ├◙ SVal "λ4"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     ├─:Block  ««"λcons.λcar.λcdr.λfoldl.\n            (λxs.\n       "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │ ╟○ lexical cons :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   ├◙ SVal "λ3"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   ├─:Block  ««"λcar.λcdr.λfoldl.\n            (λxs.\n             "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │ ╟○ lexical car :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   ├◙ SVal "λ2"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   ├─:Block  ««"λcdr.λfoldl.\n            (λxs.\n                #n"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │ ╟○ lexical cdr :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   ├◙ SVal "λ1"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   ├─:Block  ««"λfoldl.\n            (λxs.\n                #nil\n "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │ ╟○ lexical foldl :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │ ╙─call .apply1  ««"\n            (λxs.\n                #nil\n        "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   ├─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   │ ├◙ SVal "λ0"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   │ ├─:Block  ««"λxs.\n                #nil\n                #car xs"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   │ │ ╟○ lexical xs :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   │ │ ╙○ lexical foldl
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   │ └○ lexical foldl
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │   └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │     └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │       ╙─call .apply1  ««"cons \"a\" (cons \"b\" (cons \"c\" nil))"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │         ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │         │ ├○ lexical cons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │         │ └◙ SVal "a"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │         └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │           └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │             ╙─call .apply1  ««"cons \"b\" (cons \"c\" nil)"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │               ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │               │ ├○ lexical cons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │               │ └◙ SVal "b"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │               └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │                 └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │                   ╙─call .apply1  ««"cons \"c\" nil"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │                     ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │                     │ ├○ lexical cons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │                     │ └◙ SVal "c"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   │                     └○ lexical nil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   ├○ lexical cons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   │   └○ lexical nil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   ├○ lexical cons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   │   └○ lexical nil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   ├○ lexical cons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     │   └○ lexical nil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ │     └○ lexical nil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │     ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │       ├◙ SVal "λ7"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │       └─:Block  ««"λonNil.λonCons.onNil"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │         ╟○ lexical onNil :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │         ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │           ├◙ SVal "λ6"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │           ├─:Block  ««"λonCons.onNil"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │           │ ╟○ lexical onCons :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │           │ ╙○ lexical onNil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ │           └○ lexical onNil
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │     ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │       ├◙ SVal "λ11"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │       └─:Block  ««"λx.λxs.λonNil.λonCons.onCons x xs"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │         ╟○ lexical x :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │         ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           ├◙ SVal "λ10"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           ├─:Block  ««"λxs.λonNil.λonCons.onCons x xs"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │ ╟○ lexical xs :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   ├◙ SVal "λ9"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   ├─:Block  ««"λonNil.λonCons.onCons x xs"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │ ╟○ lexical onNil :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   ├◙ SVal "λ8"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   ├─:Block  ««"λonCons.onCons x xs"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   │ ╟○ lexical onCons :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   │ ╙─call .apply1  ««"onCons x xs"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   │   ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   │   │ ├○ lexical onCons
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   │   │ └○ lexical x
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   │   └○ lexical xs
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   ├○ lexical x
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   │   └○ lexical xs
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   ├○ lexical x
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           │   └○ lexical xs
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ │           └○ lexical x
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │     ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │       ├◙ SVal "λ14"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │       └─:Block  ««"λxs.xs (\"car\" \"nil\") (λhd.λtl.hd)"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │         ╟○ lexical xs :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │         ╙─call .apply1  ««"xs (\"car\" \"nil\") (λhd.λtl.hd)"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           │ ├○ lexical xs
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           │     ╙─call .apply1  ««"\"car\" \"nil\""
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           │       ├◙ SVal "car"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           │       └◙ SVal "nil"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │           └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │             └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │               ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                 ├◙ SVal "λ13"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                 └─:Block  ««"λhd.λtl.hd"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                   ╟○ lexical hd :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                   ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                     ├◙ SVal "λ12"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                     ├─:Block  ««"λtl.hd"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                     │ ╟○ lexical tl :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                     │ ╙○ lexical hd
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ │                     └○ lexical hd
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │     ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │       ├◙ SVal "λ17"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │       └─:Block  ««"λxs.xs (\"cdr\" \"nil\") (λhd.λtl.tl)"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │         ╟○ lexical xs :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │         ╙─call .apply1  ««"xs (\"cdr\" \"nil\") (λhd.λtl.tl)"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           │ ├○ lexical xs
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           │     ╙─call .apply1  ««"\"cdr\" \"nil\""
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           │       ├◙ SVal "cdr"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           │       └◙ SVal "nil"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │           └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │             └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │               ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                 ├◙ SVal "λ16"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                 └─:Block  ««"λhd.λtl.tl"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                   ╟○ lexical hd :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                   ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                     ├◙ SVal "λ15"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                     └─:Block  ««"λtl.tl"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                       ╟○ lexical tl :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     │                       ╙○ lexical tl
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │     └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │       └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │         ╙─call .apply1  ««"Y λself.λf.λstart.λxs.                 # foldl\n   "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │           ├○ lexical Y
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │           └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │             └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │               ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                 ├◙ SVal "λ23"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                 └─:Block  ««"λself.λf.λstart.λxs.                 # foldl\n     "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                   ╟○ lexical self :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                   ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     ├◙ SVal "λ22"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     ├─:Block  ««"λf.λstart.λxs.                 # foldl\n           "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │ ╟○ lexical f :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   ├◙ SVal "λ21"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   ├─:Block  ««"λstart.λxs.                 # foldl\n            xs"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │ ╟○ lexical start :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   ├◙ SVal "λ20"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   ├─:Block  ««"λxs.                 # foldl\n            xs start\"...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │ ╟○ lexical xs :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │ ╙─call .apply1  ««"                 # foldl\n            xs start\n   "...
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │   ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │   │ ├○ lexical xs
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │   │ └○ lexical start
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │   └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │     └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │       ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         ├◙ SVal "λ19"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         ├─:Block  ««"λhd.λtl.self f (f start hd) tl\n        "
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │ ╟○ lexical hd :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │ ╙─list
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   ├◙ SVal "λ18"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   ├─:Block  ««"λtl.self f (f start hd) tl\n        "
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │ ╟○ lexical tl :decl(param)
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │ ╙─call .apply1  ««"self f (f start hd) tl\n        "
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │ ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │ │ ├○ lexical self
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │ │ └○ lexical f
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │ └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │   └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │     ╙─call .apply1  ««"f start hd"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │       ├─call .apply1
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │       │ ├○ lexical f
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │       │ └○ lexical start
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   │       └○ lexical hd
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   │   └○ lexical tl
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   ├○ lexical self
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   ├○ lexical f
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   ├○ lexical start
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         │   └○ lexical hd
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         ├○ lexical self
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         ├○ lexical f
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   │         └○ lexical start
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   ├○ lexical start
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   ├○ lexical self
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   │   └○ lexical f
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   ├○ lexical self
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     │   └○ lexical f
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   │                     └○ lexical self
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │   └─call .delayMemo
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │     └─:Block
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │       ╙─call .apply1  ««"U U"
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │         ├○ lexical U
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   │         └○ lexical U
      ║   │ │ │ │ │ │ │ │     │   │   │   │   │   └○ lexical U
      ║   │ │ │ │ │ │ │ │     │   │   │   │   └○ lexical U
      ║   │ │ │ │ │ │ │ │     │   │   │   └○ lexical U
      ║   │ │ │ │ │ │ │ │     │   │   └○ lexical U
      ║   │ │ │ │ │ │ │ │     │   └○ lexical U
      ║   │ │ │ │ │ │ │ │     └○ lexical U
      ║   │ │ │ │ │ │ │ └─call .delayMemo
      ║   │ │ │ │ │ │ │   └─:Block
      ║   │ │ │ │ │ │ │     ╙─list
      ║   │ │ │ │ │ │ │       ├◙ SVal "λ33"
      ║   │ │ │ │ │ │ │       └─:Block  ««"λu.λf.f (u u f)"
      ║   │ │ │ │ │ │ │         ╟○ lexical u :decl(param)
      ║   │ │ │ │ │ │ │         ╙─list
      ║   │ │ │ │ │ │ │           ├◙ SVal "λ32"
      ║   │ │ │ │ │ │ │           ├─:Block  ««"λf.f (u u f)"
      ║   │ │ │ │ │ │ │           │ ╟○ lexical f :decl(param)
      ║   │ │ │ │ │ │ │           │ ╙─call .apply1  ««"f (u u f)"
      ║   │ │ │ │ │ │ │           │   ├○ lexical f
      ║   │ │ │ │ │ │ │           │   └─call .delayMemo
      ║   │ │ │ │ │ │ │           │     └─:Block
      ║   │ │ │ │ │ │ │           │       ╙─call .apply1  ««"u u f"
      ║   │ │ │ │ │ │ │           │         ├─call .apply1
      ║   │ │ │ │ │ │ │           │         │ ├○ lexical u
      ║   │ │ │ │ │ │ │           │         │ └○ lexical u
      ║   │ │ │ │ │ │ │           │         └○ lexical f
      ║   │ │ │ │ │ │ │           └○ lexical u
      ║   │ │ │ │ │ │ └─call .delayMemo
      ║   │ │ │ │ │ │   └─:Block
      ║   │ │ │ │ │ │     ╙─list
      ║   │ │ │ │ │ │       ├◙ SVal "λ34"
      ║   │ │ │ │ │ │       └─:Block  ««"λx.x x"
      ║   │ │ │ │ │ │         ╟○ lexical x :decl(param)
      ║   │ │ │ │ │ │         ╙─call .apply1  ««"x x"
      ║   │ │ │ │ │ │           ├○ lexical x
      ║   │ │ │ │ │ │           └○ lexical x
      ║   │ │ │ │ │ └─call .delayMemo
      ║   │ │ │ │ │   └─:Block
      ║   │ │ │ │ │     ╙─list
      ║   │ │ │ │ │       ├◙ SVal "λ37"
      ║   │ │ │ │ │       └─:Block  ««"λf.λx.λy.f y x"
      ║   │ │ │ │ │         ╟○ lexical f :decl(param)
      ║   │ │ │ │ │         ╙─list
      ║   │ │ │ │ │           ├◙ SVal "λ36"
      ║   │ │ │ │ │           ├─:Block  ««"λx.λy.f y x"
      ║   │ │ │ │ │           │ ╟○ lexical x :decl(param)
      ║   │ │ │ │ │           │ ╙─list
      ║   │ │ │ │ │           │   ├◙ SVal "λ35"
      ║   │ │ │ │ │           │   ├─:Block  ««"λy.f y x"
      ║   │ │ │ │ │           │   │ ╟○ lexical y :decl(param)
      ║   │ │ │ │ │           │   │ ╙─call .apply1  ««"f y x"
      ║   │ │ │ │ │           │   │   ├─call .apply1
      ║   │ │ │ │ │           │   │   │ ├○ lexical f
      ║   │ │ │ │ │           │   │   │ └○ lexical y
      ║   │ │ │ │ │           │   │   └○ lexical x
      ║   │ │ │ │ │           │   ├○ lexical f
      ║   │ │ │ │ │           │   └○ lexical x
      ║   │ │ │ │ │           └○ lexical f
      ║   │ │ │ │ └─call .delayMemo
      ║   │ │ │ │   └─:Block
      ║   │ │ │ │     ╙─list
      ║   │ │ │ │       ├◙ SVal "λ40"
      ║   │ │ │ │       └─:Block  ««"λf.λg.λx.f (g x)"
      ║   │ │ │ │         ╟○ lexical f :decl(param)
      ║   │ │ │ │         ╙─list
      ║   │ │ │ │           ├◙ SVal "λ39"
      ║   │ │ │ │           ├─:Block  ««"λg.λx.f (g x)"
      ║   │ │ │ │           │ ╟○ lexical g :decl(param)
      ║   │ │ │ │           │ ╙─list
      ║   │ │ │ │           │   ├◙ SVal "λ38"
      ║   │ │ │ │           │   ├─:Block  ««"λx.f (g x)"
      ║   │ │ │ │           │   │ ╟○ lexical x :decl(param)
      ║   │ │ │ │           │   │ ╙─call .apply1  ««"f (g x)"
      ║   │ │ │ │           │   │   ├○ lexical f
      ║   │ │ │ │           │   │   └─call .delayMemo
      ║   │ │ │ │           │   │     └─:Block
      ║   │ │ │ │           │   │       ╙─call .apply1  ««"g x"
      ║   │ │ │ │           │   │         ├○ lexical g
      ║   │ │ │ │           │   │         └○ lexical x
      ║   │ │ │ │           │   ├○ lexical f
      ║   │ │ │ │           │   └○ lexical g
      ║   │ │ │ │           └○ lexical f
      ║   │ │ │ └─call .delayMemo
      ║   │ │ │   └─:Block
      ║   │ │ │     ╙─list
      ║   │ │ │       ├◙ SVal "λ43"
      ║   │ │ │       └─:Block  ««"λf.λg.λx.f x (g x)"
      ║   │ │ │         ╟○ lexical f :decl(param)
      ║   │ │ │         ╙─list
      ║   │ │ │           ├◙ SVal "λ42"
      ║   │ │ │           ├─:Block  ««"λg.λx.f x (g x)"
      ║   │ │ │           │ ╟○ lexical g :decl(param)
      ║   │ │ │           │ ╙─list
      ║   │ │ │           │   ├◙ SVal "λ41"
      ║   │ │ │           │   ├─:Block  ««"λx.f x (g x)"
      ║   │ │ │           │   │ ╟○ lexical x :decl(param)
      ║   │ │ │           │   │ ╙─call .apply1  ««"f x (g x)"
      ║   │ │ │           │   │   ├─call .apply1
      ║   │ │ │           │   │   │ ├○ lexical f
      ║   │ │ │           │   │   │ └○ lexical x
      ║   │ │ │           │   │   └─call .delayMemo
      ║   │ │ │           │   │     └─:Block
      ║   │ │ │           │   │       ╙─call .apply1  ««"g x"
      ║   │ │ │           │   │         ├○ lexical g
      ║   │ │ │           │   │         └○ lexical x
      ║   │ │ │           │   ├○ lexical f
      ║   │ │ │           │   └○ lexical g
      ║   │ │ │           └○ lexical f
      ║   │ │ └─call .delayMemo
      ║   │ │   └─:Block
      ║   │ │     ╙─list
      ║   │ │       ├◙ SVal "λ45"
      ║   │ │       └─:Block  ««"λx.λ_.x"
      ║   │ │         ╟○ lexical x :decl(param)
      ║   │ │         ╙─list
      ║   │ │           ├◙ SVal "λ44"
      ║   │ │           ├─:Block  ««"λ_.x"
      ║   │ │           │ ╟○ lexical _ :decl(param)
      ║   │ │           │ ╙○ lexical x
      ║   │ │           └○ lexical x
      ║   │ └─call .delayMemo
      ║   │   └─:Block
      ║   │     ╙─list
      ║   │       ├◙ SVal "λ46"
      ║   │       └─:Block  ««"λx.x"
      ║   │         ╟○ lexical x :decl(param)
      ║   │         ╙○ lexical x
      ║   └◙ SVal ""
      ╟─call .say
      ║ └◙ SVal "------------------------------------------------"
      ╙○ local mainResult