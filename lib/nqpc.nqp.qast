──:CompUnit+{StrByDump}
  └─:Block
    ╟○ @ARGS :decl(param) :slurpy(1)
    ╟○ GLOBALish :decl(static) :default((GLOBALish, Type object))
    ╟○ $?PACKAGE :decl(static) :default((GLOBALish, Type object))
    ╟○ EXPORT :decl(static) :default((EXPORT, Type object))
    ╟─bind
    ║ ├○ @?DEPENDENCIES :decl(static)
    ║ └─list
    ║   ├◙ SVal "nqp"
    ║   ├◙ SVal "NQPHLL"
    ║   ├◙ SVal "Util"
    ║   └◙ SVal "Util::QAST"
    ╟○ &min :decl(static) :default((NQPRoutine, invokable))
    ╟○ &max :decl(static) :default((NQPRoutine, invokable))
    ╟○ &unixify :decl(static) :default((NQPRoutine, invokable))
    ╟○ &describe :decl(static) :default((NQPRoutine, invokable))
    ╟○ &say :decl(static) :default((NQPRoutine, invokable))
    ╟○ &trim :decl(static) :default((NQPRoutine, invokable))
    ╟○ &join :decl(static) :default((NQPRoutine, invokable))
    ╟○ &istype :decl(static) :default((NQPRoutine, invokable))
    ╟○ &linesFrom :decl(static) :default((NQPRoutine, invokable))
    ╟○ StrByDump :decl(static) :default((StrByDump, Type object))
    ╟○ &dump :decl(static) :default((NQPRoutine, invokable))
    ╟○ &qastChildren :decl(static) :default((NQPRoutine, invokable))
    ╟○ &removeChild :decl(static) :default((NQPRoutine, invokable))
    ╟○ &findPath :decl(static) :default((NQPRoutine, invokable))
    ╟○ &findPaths :decl(static) :default((NQPRoutine, invokable))
    ╟○ &fix_var_attrs :decl(static) :default((NQPRoutine, invokable))
    ╟○ &drop_Stmts :decl(static) :default((NQPRoutine, invokable))
    ╟○ &replace_assoc_and_pos_scoped :decl(static) :default((NQPRoutine, invokable))
    ╟○ &drop_takeclosure :decl(static) :default((NQPRoutine, invokable))
    ╟─bind
    ║ ├○ &isinResultPosition :decl(var)
    ║ └─:Block  ««"{\n    my $n := nqp::elems($parent) - 1;\n    if ($"...
    ║   ╟○ $node :decl(param)
    ║   ╟○ $parent :decl(param)
    ║   ╟○ $n :decl(var)
    ║   ╙─lexotic RETURN
    ║     └─:Stmts  ««"\n    my $n := nqp::elems($parent) - 1;\n    if ($p"...
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$n := nqp::elems($parent) - 1"
    ║       │ ├○ $n
    ║       │ └─sub_n &infix:<->  ««"-"
    ║       │   ├─elems  ««"nqp::elems($parent)"
    ║       │   │ └○ $parent
    ║       │   └◙ IVal 1
    ║       ├─if  ««"($parent[$n] =:= $node) || (nqp::can($parent, 'resu"...
    ║       │ ├─unless &infix:<||>  ««"||"
    ║       │ │ ├─eqaddr &infix:<=:=>  ««"=:="
    ║       │ │ │ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │ │ │ │ ├○ $parent
    ║       │ │ │ │ └○ $n
    ║       │ │ │ └○ $node
    ║       │ │ └─if &infix:<&&>  ««"&&"
    ║       │ │   ├─can  ««"nqp::can($parent, 'resultchild')"
    ║       │ │   │ ├○ $parent
    ║       │ │   │ └◙ SVal "resultchild"
    ║       │ │   └─eqaddr &infix:<=:=>  ««"=:="
    ║       │ │     ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │ │     │ ├○ $parent
    ║       │ │     │ └─callmethod resultchild  ««".resultchild"
    ║       │ │     │   └○ $parent
    ║       │ │     └○ $node
    ║       │ └─call RETURN
    ║       │   └◙ IVal 1
    ║       ├─while  ««"--$n >= 0 {\n        return 0 if $node =:= $parent["...
    ║       │ ├─isge_n &infix:<>=>  ««">="
    ║       │ │ ├─predec &prefix:<-->  ««"--"
    ║       │ │ │ └○ $n
    ║       │ │ └◙ IVal 0
    ║       │ ├─if  ««"return 0 if $node =:= $parent[$n]"
    ║       │ │ ├─eqaddr &infix:<=:=>  ««"=:="
    ║       │ │ │ ├○ $node
    ║       │ │ │ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │ │ │   ├○ $parent
    ║       │ │ │   └○ $n
    ║       │ │ └─call RETURN
    ║       │ │   └◙ IVal 0
    ║       │ └◙ IVal 1 :named("nohandler")
    ║       └─die  ««"nqp::die(describe($node) ~ ' not a child of ' ~ des"...
    ║         └─concat &infix:<~>  ««"~"
    ║           ├─concat &infix:<~>  ««"~"
    ║           │ ├─call &describe  ««"$node"
    ║           │ │ └○ $node
    ║           │ └◙ SVal " not a child of "
    ║           └─call &describe  ««"$parent"
    ║             └○ $parent
    ╟─bind
    ║ ├○ &drop_bogusVars :decl(var)
    ║ └─:Block  ««"{\n    if istype($ast, QAST::Var) && !$ast.decl {\n"...
    ║   ╟○ $ast :decl(param)
    ║   ╟○ $parent :decl(param) :default(null)
    ║   ╙─lexotic RETURN
    ║     └─:Stmts  ««"\n    if istype($ast, QAST::Var) && !$ast.decl {\n "...
    ║       ├─if  ««"istype($ast, QAST::Var) && !$ast.decl {\n        if"...
    ║       │ ├─if &infix:<&&>  ««"&&"
    ║       │ │ ├─call &istype  ««"$ast, QAST::Var"
    ║       │ │ │ ├○ $ast
    ║       │ │ │ └◙ WVal QAST::Var
    ║       │ │ └─falsey &prefix:<!>  ««"!"
    ║       │ │   └─callmethod decl  ««".decl"
    ║       │ │     └○ $ast
    ║       │ ├─if  ««"istype($parent, QAST::Block, QAST::Stmt, QAST::Stmt"...
    ║       │ │ ├─call &istype  ««"$parent, QAST::Block, QAST::Stmt, QAST::Stmts"
    ║       │ │ │ ├○ $parent
    ║       │ │ │ ├◙ WVal QAST::Block
    ║       │ │ │ ├◙ WVal QAST::Stmt
    ║       │ │ │ └◙ WVal QAST::Stmts
    ║       │ │ └─unless  ««"isinResultPosition($ast, $parent) {\n              "...
    ║       │ │   ├─call &isinResultPosition  ««"$ast, $parent"
    ║       │ │   │ ├○ $ast
    ║       │ │   │ └○ $parent
    ║       │ │   └─call RETURN
    ║       │ │     └─null  ««"nqp::null"
    ║       │ └─if  ««"+$ast.list { # workaround - not all nodes with chil"...
    ║       │   ├─numify &prefix:<+>  ««"+"
    ║       │   │ └─callmethod list  ««".list"
    ║       │   │   └○ $ast
    ║       │   └─:Block :blocktype(immediate)  ««"{ # workaround - not all nodes with children actual"...
    ║       │     ╟○ @children :decl(var)
    ║       │     ╟○ $changed :decl(var)
    ║       │     ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@children := []"
    ║       │     ║ ├○ @children
    ║       │     ║ └─list &circumfix:<[ ]>
    ║       │     ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$changed := 0"
    ║       │     ║ ├○ $changed
    ║       │     ║ └◙ IVal 0
    ║       │     ╟─for  ««"$ast.list {\n            my $child := drop_bogusVar"...
    ║       │     ║ ├─callmethod list  ««".list"
    ║       │     ║ │ └○ $ast
    ║       │     ║ ├─:Block :blocktype(immediate)  ««"{\n            my $child := drop_bogusVars($_, $ast"...
    ║       │     ║ │ ╟○ $child :decl(var)
    ║       │     ║ │ ╟○ $_ :decl(param)
    ║       │     ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$child := drop_bogusVars($_, $ast)"
    ║       │     ║ │ ║ ├○ $child
    ║       │     ║ │ ║ └─call &drop_bogusVars  ««"$_, $ast"
    ║       │     ║ │ ║   ├○ $_
    ║       │     ║ │ ║   └○ $ast
    ║       │     ║ │ ╙─if  ««"nqp::isnull($child) {\n                $changed := "...
    ║       │     ║ │   ├─isnull  ««"nqp::isnull($child)"
    ║       │     ║ │   │ └○ $child
    ║       │     ║ │   ├─bind &infix:<:=>  ««":="
    ║       │     ║ │   │ ├○ $changed
    ║       │     ║ │   │ └◙ IVal 1
    ║       │     ║ │   └─callmethod push  ««"$child"
    ║       │     ║ │     ├○ @children
    ║       │     ║ │     └○ $child
    ║       │     ║ └◙ IVal 1 :named("nohandler")
    ║       │     ╙─if  ««"$changed {\n            my @list := $ast.list;\n   "...
    ║       │       ├○ $changed
    ║       │       └─:Block :blocktype(immediate)  ««"{\n            my @list := $ast.list;\n            "...
    ║       │         ╟○ @list :decl(var)
    ║       │         ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@list := $ast.list"
    ║       │         ║ ├○ @list
    ║       │         ║ └─callmethod list  ««".list"
    ║       │         ║   └○ $ast
    ║       │         ╟─while  ««"+@list { @list.pop }"
    ║       │         ║ ├─numify &prefix:<+>  ««"+"
    ║       │         ║ │ └○ @list
    ║       │         ║ ├─callmethod pop  ««".pop"
    ║       │         ║ │ └○ @list
    ║       │         ║ └◙ IVal 1 :named("nohandler")
    ║       │         ╙─for  ««"@children { @list.push($_) }"
    ║       │           ├○ @children
    ║       │           ├─:Block :blocktype(immediate)  ««"{ @list.push($_) }"
    ║       │           │ ╟○ $_ :decl(param)
    ║       │           │ ╙─callmethod push  ««"$_"
    ║       │           │   ├○ @list
    ║       │           │   └○ $_
    ║       │           └◙ IVal 1 :named("nohandler")
    ║       └○ $ast
    ╟─bind
    ║ ├○ &remove_bogusOpNames :decl(var)
    ║ └─:Block  ««"{\n    nqp::die('remove_bogusOpNames expects a QAST"...
    ║   ╟○ $ast :decl(param)
    ║   ╟─unless  ««"nqp::die('remove_bogusOpNames expects a QAST::Node "...
    ║   ║ ├─call &istype  ««"$ast, QAST::Node"
    ║   ║ │ ├○ $ast
    ║   ║ │ └◙ WVal QAST::Node
    ║   ║ └─die  ««"nqp::die('remove_bogusOpNames expects a QAST::Node "...
    ║   ║   └─concat &infix:<~>  ««"~"
    ║   ║     ├◙ SVal "remove_bogusOpNames expects a QAST::Node - got "
    ║   ║     └─reprname  ««"nqp::reprname($ast)"
    ║   ║       └○ $ast
    ║   ╟─if  ««"istype($ast, QAST::Op) && ($ast.op ne 'call') && ($"...
    ║   ║ ├─if &infix:<&&>  ««"&&"
    ║   ║ │ ├─if &infix:<&&>  ««"&&"
    ║   ║ │ │ ├─if &infix:<&&>  ««"&&"
    ║   ║ │ │ │ ├─if &infix:<&&>  ««"&&"
    ║   ║ │ │ │ │ ├─call &istype  ««"$ast, QAST::Op"
    ║   ║ │ │ │ │ │ ├○ $ast
    ║   ║ │ │ │ │ │ └◙ WVal QAST::Op
    ║   ║ │ │ │ │ └─isne_s &infix:<ne>  ««"ne"
    ║   ║ │ │ │ │   ├─callmethod op  ««".op"
    ║   ║ │ │ │ │   │ └○ $ast
    ║   ║ │ │ │ │   └◙ SVal "call"
    ║   ║ │ │ │ └─isne_s &infix:<ne>  ««"ne"
    ║   ║ │ │ │   ├─callmethod op  ««".op"
    ║   ║ │ │ │   │ └○ $ast
    ║   ║ │ │ │   └◙ SVal "callstatic"
    ║   ║ │ │ └─isne_s &infix:<ne>  ««"ne"
    ║   ║ │ │   ├─callmethod op  ««".op"
    ║   ║ │ │   │ └○ $ast
    ║   ║ │ │   └◙ SVal "callmethod"
    ║   ║ │ └─isne_s &infix:<ne>  ««"ne"
    ║   ║ │   ├─callmethod op  ««".op"
    ║   ║ │   │ └○ $ast
    ║   ║ │   └◙ SVal "lexotic"
    ║   ║ └─callmethod name  ««"nqp::null_s"
    ║   ║   ├○ $ast
    ║   ║   └─null_s  ««"nqp::null_s"
    ║   ╟─for  ««"$ast.list {\n        remove_bogusOpNames($_);\n    }"
    ║   ║ ├─callmethod list  ««".list"
    ║   ║ │ └○ $ast
    ║   ║ ├─:Block :blocktype(immediate)  ««"{\n        remove_bogusOpNames($_);\n    }"
    ║   ║ │ ╟○ $_ :decl(param)
    ║   ║ │ ╙─call &remove_bogusOpNames  ««"$_"
    ║   ║ │   └○ $_
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╙○ $ast
    ╟─bind
    ║ ├○ &remove_MAIN :decl(var)
    ║ └─:Block  ««"{\n    say($ast[0].cuid);\n    say(\"CompUnit load:"...
    ║   ╟○ $ast :decl(param)
    ║   ╟○ @path :decl(var)
    ║   ╟○ $MAIN :decl(var)
    ║   ╟○ $MAINcall :decl(var)
    ║   ╟─call &say  ««"$ast[0].cuid"
    ║   ║ └─callmethod cuid  ««".cuid"
    ║   ║   └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║     ├○ $ast
    ║   ║     └◙ IVal 0
    ║   ╟─call &say  ««"\"CompUnit load: \\n\", dump($ast.load)"
    ║   ║ ├◙ SVal "CompUnit load: \n"
    ║   ║ └─call &dump  ««"$ast.load"
    ║   ║   └─callmethod load  ««".load"
    ║   ║     └○ $ast
    ║   ╟─call &say  ««"\"CompUnit main: \\n\", dump($ast.main)"
    ║   ║ ├◙ SVal "CompUnit main: \n"
    ║   ║ └─call &dump  ««"$ast.main"
    ║   ║   └─callmethod main  ««".main"
    ║   ║     └○ $ast
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@path := []"
    ║   ║ ├○ @path
    ║   ║ └─list &circumfix:<[ ]>
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$MAIN := findDef($ast, '&MAIN', @path)"
    ║   ║ ├○ $MAIN
    ║   ║ └─call &findDef  ««"$ast, '&MAIN', @path"
    ║   ║   ├○ $ast
    ║   ║   ├◙ SVal "&MAIN"
    ║   ║   └○ @path
    ║   ╟─call &removeChild  ««"@path[0], $MAIN"
    ║   ║ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║ │ ├○ @path
    ║   ║ │ └◙ IVal 0
    ║   ║ └○ $MAIN
    ║   ╟─call &say  ««"describe(@path), \"\\n\", describe($MAIN)"
    ║   ║ ├─call &describe  ««"@path"
    ║   ║ │ └○ @path
    ║   ║ ├◙ SVal "\n"
    ║   ║ └─call &describe  ««"$MAIN"
    ║   ║   └○ $MAIN
    ║   ╟─bind &infix:<:=>  ««":="
    ║   ║ ├○ @path
    ║   ║ └─list &circumfix:<[ ]>
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$MAINcall := findPath(-> $node, @pathUp {\n        "...
    ║   ║ ├○ $MAINcall
    ║   ║ └─call &findPath  ««"-> $node, @pathUp {\n            if istype($node, Q"...
    ║   ║   ├─:Block  ««"{\n            if istype($node, QAST::Op) && ($node"...
    ║   ║   │ ╟○ $node :decl(param)
    ║   ║   │ ╟○ @pathUp :decl(param)
    ║   ║   │ ╙─if  ««"istype($node, QAST::Op) && ($node.op eq 'call') && "...
    ║   ║   │   ├─if &infix:<&&>  ««"&&"
    ║   ║   │   │ ├─if &infix:<&&>  ««"&&"
    ║   ║   │   │ │ ├─call &istype  ««"$node, QAST::Op"
    ║   ║   │   │ │ │ ├○ $node
    ║   ║   │   │ │ │ └◙ WVal QAST::Op
    ║   ║   │   │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │ │   ├─callmethod op  ««".op"
    ║   ║   │   │ │   │ └○ $node
    ║   ║   │   │ │   └◙ SVal "call"
    ║   ║   │   │ └─unless &infix:<||>  ««"||"
    ║   ║   │   │   ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │   │ ├─callmethod name  ««".name"
    ║   ║   │   │   │ │ └○ $node
    ║   ║   │   │   │ └◙ SVal "&MAIN"
    ║   ║   │   │   └─if &infix:<&&>  ««"&&"
    ║   ║   │   │     ├─call &istype  ««"$node[0], QAST::Var"
    ║   ║   │   │     │ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   │   │     │ │ ├○ $node
    ║   ║   │   │     │ │ └◙ IVal 0
    ║   ║   │   │     │ └◙ WVal QAST::Var
    ║   ║   │   │     └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │       ├─callmethod name  ««".name"
    ║   ║   │   │       │ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   │   │       │   ├○ $node
    ║   ║   │   │       │   └◙ IVal 0
    ║   ║   │   │       └◙ SVal "&MAIN"
    ║   ║   │   ├─:Block :blocktype(immediate)  ««"{\n                my $parent := @pathUp[0];\n     "...
    ║   ║   │   │ ╟○ $parent :decl(var)
    ║   ║   │   │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$parent := @pathUp[0]"
    ║   ║   │   │ ║ ├○ $parent
    ║   ║   │   │ ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   │   │ ║   ├○ @pathUp
    ║   ║   │   │ ║   └◙ IVal 0
    ║   ║   │   │ ╙─if  ««"istype($parent, QAST::Op) && $parent.op eq 'if' {\n"...
    ║   ║   │   │   ├─if &infix:<&&>  ««"&&"
    ║   ║   │   │   │ ├─call &istype  ««"$parent, QAST::Op"
    ║   ║   │   │   │ │ ├○ $parent
    ║   ║   │   │   │ │ └◙ WVal QAST::Op
    ║   ║   │   │   │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │   │   ├─callmethod op  ««".op"
    ║   ║   │   │   │   │ └○ $parent
    ║   ║   │   │   │   └◙ SVal "if"
    ║   ║   │   │   ├○ $parent
    ║   ║   │   │   └─if  ««"istype($parent, QAST::Stmt, QAST::Stmts) {\n       "...
    ║   ║   │   │     ├─call &istype  ««"$parent, QAST::Stmt, QAST::Stmts"
    ║   ║   │   │     │ ├○ $parent
    ║   ║   │   │     │ ├◙ WVal QAST::Stmt
    ║   ║   │   │     │ └◙ WVal QAST::Stmts
    ║   ║   │   │     └─:Stmts  ««"{\n                    $parent := @pathUp[0];\n    "...
    ║   ║   │   │       ├─bind &infix:<:=>  ««":="
    ║   ║   │   │       │ ├○ $parent
    ║   ║   │   │       │ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   │   │       │   ├○ @pathUp
    ║   ║   │   │       │   └◙ IVal 0
    ║   ║   │   │       └─if  ««"istype($parent, QAST::Op) && $parent.op eq 'if' {\n"...
    ║   ║   │   │         ├─if &infix:<&&>  ««"&&"
    ║   ║   │   │         │ ├─call &istype  ««"$parent, QAST::Op"
    ║   ║   │   │         │ │ ├○ $parent
    ║   ║   │   │         │ │ └◙ WVal QAST::Op
    ║   ║   │   │         │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │         │   ├─callmethod op  ««".op"
    ║   ║   │   │         │   │ └○ $parent
    ║   ║   │   │         │   └◙ SVal "if"
    ║   ║   │   │         ├○ $parent
    ║   ║   │   │         └○ $node
    ║   ║   │   └─callmethod list  ««".list"
    ║   ║   │     └○ $node
    ║   ║   ├○ $ast
    ║   ║   └○ @path
    ║   ╟─call &removeChild  ««"@path[0], $MAINcall"
    ║   ║ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║ │ ├○ @path
    ║   ║ │ └◙ IVal 0
    ║   ║ └○ $MAINcall
    ║   ╙○ $ast
    ╟─bind
    ║ ├○ &findDef :decl(var)
    ║ └─:Block  ««"{\n    if nqp::isstr($matcher) {\n        my $name "...
    ║   ╟○ $ast :decl(param)
    ║   ╟○ $matcher :decl(param)
    ║   ╟○ @pathUp :decl(param) :default(list &circumfix:<[ ]>)
    ║   ╟─if  ««"nqp::isstr($matcher) {\n        my $name := $matche"...
    ║   ║ ├─isstr  ««"nqp::isstr($matcher)"
    ║   ║ │ └○ $matcher
    ║   ║ └─:Block :blocktype(immediate)  ««"{\n        my $name := $matcher;\n        $matcher "...
    ║   ║   ╟○ $name :decl(var)
    ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$name := $matcher"
    ║   ║   ║ ├○ $name
    ║   ║   ║ └○ $matcher
    ║   ║   ╙─bind &infix:<:=>  ««":="
    ║   ║     ├○ $matcher
    ║   ║     └─:Block  ««"{ $var.name eq $name && $var.decl }"
    ║   ║       ╟○ $var :decl(param)
    ║   ║       ╟○ @pathUp :decl(param)
    ║   ║       ╙─if &infix:<&&>  ««"&&"
    ║   ║         ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║         │ ├─callmethod name  ««".name"
    ║   ║         │ │ └○ $var
    ║   ║         │ └○ $name
    ║   ║         └─callmethod decl  ««".decl"
    ║   ║           └○ $var
    ║   ╙─call &findPath  ««"\n        -> $node, @pathUp {\n            my $pare"...
    ║     ├─:Block  ««"{\n            my $parent := nqp::elems(@pathUp) > "...
    ║     │ ╟○ $node :decl(param)
    ║     │ ╟○ @pathUp :decl(param)
    ║     │ ╟○ $parent :decl(var)
    ║     │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$parent := nqp::elems(@pathUp) > 0 ?? @pathUp[0] !!"...
    ║     │ ║ ├○ $parent
    ║     │ ║ └─if &infix:<>  ««"?? @pathUp[0] !!"
    ║     │ ║   ├─isgt_n &infix:<>>  ««">"
    ║     │ ║   │ ├─elems  ««"nqp::elems(@pathUp)"
    ║     │ ║   │ │ └○ @pathUp
    ║     │ ║   │ └◙ IVal 0
    ║     │ ║   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║     │ ║   │ ├○ @pathUp
    ║     │ ║   │ └◙ IVal 0
    ║     │ ║   └─null  ««"nqp::null"
    ║     │ ╙─if  ««"nqp::isnull($parent) || istype($parent, QAST::CompU"...
    ║     │   ├─unless &infix:<||>  ««"||"
    ║     │   │ ├─isnull  ««"nqp::isnull($parent)"
    ║     │   │ │ └○ $parent
    ║     │   │ └─call &istype  ««"$parent, QAST::CompUnit"
    ║     │   │   ├○ $parent
    ║     │   │   └◙ WVal QAST::CompUnit
    ║     │   ├─callmethod list  ««".list"
    ║     │   │ └○ $node
    ║     │   └─if  ««"istype($parent, QAST::Op) && istype($node, QAST::Va"...
    ║     │     ├─if &infix:<&&>  ««"&&"
    ║     │     │ ├─call &istype  ««"$parent, QAST::Op"
    ║     │     │ │ ├○ $parent
    ║     │     │ │ └◙ WVal QAST::Op
    ║     │     │ └─call &istype  ««"$node, QAST::Var"
    ║     │     │   ├○ $node
    ║     │     │   └◙ WVal QAST::Var
    ║     │     ├─if &infix:<>  ««"?? $parent\n                    !!"
    ║     │     │ ├─if &infix:<&&>  ««"&&"
    ║     │     │ │ ├─iseq_s &infix:<eq>  ««"eq"
    ║     │     │ │ │ ├─callmethod op  ««".op"
    ║     │     │ │ │ │ └○ $parent
    ║     │     │ │ │ └◙ SVal "bind"
    ║     │     │ │ └─call  ««"$node, @pathUp"
    ║     │     │ │   ├○ $matcher
    ║     │     │ │   ├○ $node
    ║     │     │ │   └○ @pathUp
    ║     │     │ ├○ $parent
    ║     │     │ └─null  ««"nqp::null"
    ║     │     └─if  ««"istype($parent, QAST::Block, QAST::Stmts, QAST::Stm"...
    ║     │       ├─call &istype  ««"$parent, QAST::Block, QAST::Stmts, QAST::Stmt, QAST"...
    ║     │       │ ├○ $parent
    ║     │       │ ├◙ WVal QAST::Block
    ║     │       │ ├◙ WVal QAST::Stmts
    ║     │       │ ├◙ WVal QAST::Stmt
    ║     │       │ └◙ WVal QAST::Op
    ║     │       ├─:Block :blocktype(immediate)  ««"{\n                my @next := qastChildren($node, "...
    ║     │       │ ╟○ @next :decl(var)
    ║     │       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@next := qastChildren($node, QAST::Block, QAST::Stm"...
    ║     │       │ ║ ├○ @next
    ║     │       │ ║ └─call &qastChildren  ««"$node, QAST::Block, QAST::Stmts, QAST::Stmt, QAST::"...
    ║     │       │ ║   ├○ $node
    ║     │       │ ║   ├◙ WVal QAST::Block
    ║     │       │ ║   ├◙ WVal QAST::Stmts
    ║     │       │ ║   ├◙ WVal QAST::Stmt
    ║     │       │ ║   ├◙ WVal QAST::Var
    ║     │       │ ║   └◙ WVal QAST::Op
    ║     │       │ ╙○ @next
    ║     │       └◙ IVal 0
    ║     ├○ $ast
    ║     └○ @pathUp
    ╟─bind
    ║ ├○ &findDefs :decl(var)
    ║ └─:Block  ««"{\n    my @out := [];\n    my $current := 1;\n    w"...
    ║   ╟○ $ast :decl(param)
    ║   ╟○ $matcher :decl(param)
    ║   ╟○ @out :decl(var)
    ║   ╟○ $current :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@out := []"
    ║   ║ ├○ @out
    ║   ║ └─list &circumfix:<[ ]>
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$current := 1"
    ║   ║ ├○ $current
    ║   ║ └◙ IVal 1
    ║   ╟─while  ««"$current {\n        $current := findDef($ast, -> $v"...
    ║   ║ ├○ $current
    ║   ║ ├─:Stmts  ««"{\n        $current := findDef($ast, -> $var, @path"...
    ║   ║ │ ├─bind &infix:<:=>  ««":="
    ║   ║ │ │ ├○ $current
    ║   ║ │ │ └─call &findDef  ««"$ast, -> $var, @pathUp {\n            my $takeit :="...
    ║   ║ │ │   ├○ $ast
    ║   ║ │ │   └─:Block  ««"{\n            my $takeit := 0;\n            if $ma"...
    ║   ║ │ │     ╟○ $var :decl(param)
    ║   ║ │ │     ╟○ @pathUp :decl(param)
    ║   ║ │ │     ╟○ $takeit :decl(var)
    ║   ║ │ │     ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$takeit := 0"
    ║   ║ │ │     ║ ├○ $takeit
    ║   ║ │ │     ║ └◙ IVal 0
    ║   ║ │ │     ╟─if  ««"$matcher($var, @pathUp) {\n                $takeit "...
    ║   ║ │ │     ║ ├─call  ««"$var, @pathUp"
    ║   ║ │ │     ║ │ ├○ $matcher
    ║   ║ │ │     ║ │ ├○ $var
    ║   ║ │ │     ║ │ └○ @pathUp
    ║   ║ │ │     ║ └─:Block :blocktype(immediate)  ««"{\n                $takeit := 1;\n                m"...
    ║   ║ │ │     ║   ╟○ $i :decl(var)
    ║   ║ │ │     ║   ╟─bind &infix:<:=>  ««":="
    ║   ║ │ │     ║   ║ ├○ $takeit
    ║   ║ │ │     ║   ║ └◙ IVal 1
    ║   ║ │ │     ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$i := nqp::iterator(@out)"
    ║   ║ │ │     ║   ║ ├○ $i
    ║   ║ │ │     ║   ║ └─iterator  ««"nqp::iterator(@out)"
    ║   ║ │ │     ║   ║   └○ @out
    ║   ║ │ │     ║   ╙─while  ««"$i && $takeit {\n                    $takeit := !(n"...
    ║   ║ │ │     ║     ├─if &infix:<&&>  ««"&&"
    ║   ║ │ │     ║     │ ├○ $i
    ║   ║ │ │     ║     │ └○ $takeit
    ║   ║ │ │     ║     ├─bind &infix:<:=>  ««":="
    ║   ║ │ │     ║     │ ├○ $takeit
    ║   ║ │ │     ║     │ └─falsey &prefix:<!>  ««"!"
    ║   ║ │ │     ║     │   └─eqaddr &infix:<=:=>  ««"=:="
    ║   ║ │ │     ║     │     ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║ │ │     ║     │     │ ├─shift  ««"nqp::shift($i)"
    ║   ║ │ │     ║     │     │ │ └○ $i
    ║   ║ │ │     ║     │     │ └◙ IVal 0
    ║   ║ │ │     ║     │     └○ $var
    ║   ║ │ │     ║     └◙ IVal 1 :named("nohandler")
    ║   ║ │ │     ╙○ $takeit
    ║   ║ │ └─unless  ««"nqp::isnull($current) {\n#            say(nqp::elem"...
    ║   ║ │   ├─isnull  ««"nqp::isnull($current)"
    ║   ║ │   │ └○ $current
    ║   ║ │   └─callmethod push  ««"$current"
    ║   ║ │     ├○ @out
    ║   ║ │     └○ $current
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╙○ @out
    ╟─bind
    ║ ├○ &findValueNodeInHash :decl(var)
    ║ └─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable) ))  ««"{\n    nqp::die('findValueNodeInHash expects a fn a"...
    ║   ╟○ $keyPredicate :decl(param)
    ║   ╟○ $valuePredicate :decl(param)
    ║   ╟○ $hash :decl(param) :default((VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))) ((who) ($?PACKAGE)) (SVal "NO_VALUE"))
    ║   ╟○ $found :decl(var)
    ║   ╙─lexotic RETURN
    ║     └─:Stmts  ««"\n    nqp::die('findValueNodeInHash expects a fn as"...
    ║       ├─unless  ««"nqp::die('findValueNodeInHash expects a fn as 1st a"...
    ║       │ ├─isinvokable  ««"nqp::isinvokable($keyPredicate)"
    ║       │ │ └○ $keyPredicate
    ║       │ └─die  ««"nqp::die('findValueNodeInHash expects a fn as 1st a"...
    ║       │   └─concat &infix:<~>  ««"~"
    ║       │     ├◙ SVal "findValueNodeInHash expects a fn as 1st arg - got "
    ║       │     └─call &describe  ««"$keyPredicate"
    ║       │       └○ $keyPredicate
    ║       ├─unless  ««"nqp::die('findValueNodeInHash expects a fn as 2nd a"...
    ║       │ ├─isinvokable  ««"nqp::isinvokable($valuePredicate)"
    ║       │ │ └○ $valuePredicate
    ║       │ └─die  ««"nqp::die('findValueNodeInHash expects a fn as 2nd a"...
    ║       │   └─concat &infix:<~>  ««"~"
    ║       │     ├◙ SVal "findValueNodeInHash expects a fn as 2nd arg - got "
    ║       │     └─call &describe  ««"$valuePredicate"
    ║       │       └○ $valuePredicate
    ║       ├─if  ««"$hash =:= NO_VALUE {\n        return -> $hash { fin"...
    ║       │ ├─eqaddr &infix:<=:=>  ««"=:="
    ║       │ │ ├○ $hash
    ║       │ │ └○┬VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))
    ║       │ │   ├─who
    ║       │ │   │ └○ $?PACKAGE
    ║       │ │   └◙ SVal "NO_VALUE"
    ║       │ ├─call RETURN
    ║       │ │ └─:Block  ««"{ findValueNodeInHash($keyPredicate, $valuePredicat"...
    ║       │ │   ╟○ $hash :decl(param)
    ║       │ │   ╙─call &findValueNodeInHash  ««"$keyPredicate, $valuePredicate, $hash"
    ║       │ │     ├○ $keyPredicate
    ║       │ │     ├○ $valuePredicate
    ║       │ │     └○ $hash
    ║       │ └─if  ««"!istype($hash, QAST::Node) {\n        nqp::die('fin"...
    ║       │   ├─falsey &prefix:<!>  ««"!"
    ║       │   │ └─call &istype  ««"$hash, QAST::Node"
    ║       │   │   ├○ $hash
    ║       │   │   └◙ WVal QAST::Node
    ║       │   └─die  ««"nqp::die('findValueNodeInHash expects a QAST::Node "...
    ║       │     └─concat &infix:<~>  ««"~"
    ║       │       ├◙ SVal "findValueNodeInHash expects a QAST::Node as (optional) 3rd arg - got "
    ║       │       └─call &describe  ««"$hash"
    ║       │         └○ $hash
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$found := nqp::null"
    ║       │ ├○ $found
    ║       │ └─null  ««"nqp::null"
    ║       ├─if  ««"istype($hash, QAST::Op) && $hash.op eq 'hash' {\n  "...
    ║       │ ├─if &infix:<&&>  ««"&&"
    ║       │ │ ├─call &istype  ««"$hash, QAST::Op"
    ║       │ │ │ ├○ $hash
    ║       │ │ │ └◙ WVal QAST::Op
    ║       │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║       │ │   ├─callmethod op  ««".op"
    ║       │ │   │ └○ $hash
    ║       │ │   └◙ SVal "hash"
    ║       │ └─:Block :blocktype(immediate)  ««"{\n        my $it := nqp::iterator($hash.list);\n  "...
    ║       │   ╟○ $it :decl(var)
    ║       │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$it := nqp::iterator($hash.list)"
    ║       │   ║ ├○ $it
    ║       │   ║ └─iterator  ««"nqp::iterator($hash.list)"
    ║       │   ║   └─callmethod list  ««".list"
    ║       │   ║     └○ $hash
    ║       │   ╙─while  ««"$it && !$found {\n            my $k := nqp::shift($"...
    ║       │     ├─if &infix:<&&>  ««"&&"
    ║       │     │ ├○ $it
    ║       │     │ └─falsey &prefix:<!>  ««"!"
    ║       │     │   └○ $found
    ║       │     ├─:Block :blocktype(immediate)  ««"{\n            my $k := nqp::shift($it);\n         "...
    ║       │     │ ╟○ $k :decl(var)
    ║       │     │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$k := nqp::shift($it)"
    ║       │     │ ║ ├○ $k
    ║       │     │ ║ └─shift  ««"nqp::shift($it)"
    ║       │     │ ║   └○ $it
    ║       │     │ ╙─if  ««"$it && $keyPredicate($k) {\n                my $v :"...
    ║       │     │   ├─if &infix:<&&>  ««"&&"
    ║       │     │   │ ├○ $it
    ║       │     │   │ └─call  ««"$k"
    ║       │     │   │   ├○ $keyPredicate
    ║       │     │   │   └○ $k
    ║       │     │   └─:Block :blocktype(immediate)  ««"{\n                my $v := nqp::shift($it);\n     "...
    ║       │     │     ╟○ $v :decl(var)
    ║       │     │     ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$v := nqp::shift($it)"
    ║       │     │     ║ ├○ $v
    ║       │     │     ║ └─shift  ««"nqp::shift($it)"
    ║       │     │     ║   └○ $it
    ║       │     │     ╙─if  ««"$valuePredicate($v) {\n                    $found :"...
    ║       │     │       ├─call  ««"$v"
    ║       │     │       │ ├○ $valuePredicate
    ║       │     │       │ └○ $v
    ║       │     │       └─bind &infix:<:=>  ««":="
    ║       │     │         ├○ $found
    ║       │     │         └○ $v
    ║       │     └◙ IVal 1 :named("nohandler")
    ║       └○ $found
    ╟─bind
    ║ ├○ &cloneAndSubst :decl(var)
    ║ └─:Block  ««"{\n    nqp::die('cloneAndSubst expects a QAST::Node"...
    ║   ╟○ $node :decl(param)
    ║   ╟○ $substitution :decl(param)
    ║   ╟○ @children :decl(var)
    ║   ╟○ $i :decl(var)
    ║   ╟─unless  ««"nqp::die('cloneAndSubst expects a QAST::Node as 1st"...
    ║   ║ ├─call &istype  ««"$node, QAST::Node"
    ║   ║ │ ├○ $node
    ║   ║ │ └◙ WVal QAST::Node
    ║   ║ └─die  ««"nqp::die('cloneAndSubst expects a QAST::Node as 1st"...
    ║   ║   └─concat &infix:<~>  ««"~"
    ║   ║     ├◙ SVal "cloneAndSubst expects a QAST::Node as 1st arg - got "
    ║   ║     └─call &describe  ««"$node"
    ║   ║       └○ $node
    ║   ╟─unless  ««"nqp::die('cloneAndSubst expects a function as 2nd a"...
    ║   ║ ├─isinvokable  ««"nqp::isinvokable($substitution)"
    ║   ║ │ └○ $substitution
    ║   ║ └─die  ««"nqp::die('cloneAndSubst expects a function as 2nd a"...
    ║   ║   └─concat &infix:<~>  ««"~"
    ║   ║     ├◙ SVal "cloneAndSubst expects a function as 2nd arg - got "
    ║   ║     └─call &describe  ««"$substitution"
    ║   ║       └○ $substitution
    ║   ╟─bind &infix:<:=>  ««":="
    ║   ║ ├○ $node
    ║   ║ └─callmethod shallow_clone  ««".shallow_clone"
    ║   ║   └○ $node
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@children := $node.list"
    ║   ║ ├○ @children
    ║   ║ └─callmethod list  ««".list"
    ║   ║   └○ $node
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$i := 0"
    ║   ║ ├○ $i
    ║   ║ └◙ IVal 0
    ║   ╟─for  ««"@children {\n        my $child := cloneAndSubst($_,"...
    ║   ║ ├○ @children
    ║   ║ ├─:Block :blocktype(immediate)  ««"{\n        my $child := cloneAndSubst($_, $substitu"...
    ║   ║ │ ╟○ $child :decl(var)
    ║   ║ │ ╟○ $_ :decl(param)
    ║   ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$child := cloneAndSubst($_, $substitution)"
    ║   ║ │ ║ ├○ $child
    ║   ║ │ ║ └─call &cloneAndSubst  ««"$_, $substitution"
    ║   ║ │ ║   ├○ $_
    ║   ║ │ ║   └○ $substitution
    ║   ║ │ ╙─unless  ««"nqp::isnull($child) {\n            @children[$i] :="...
    ║   ║ │   ├─isnull  ««"nqp::isnull($child)"
    ║   ║ │   │ └○ $child
    ║   ║ │   └─:Stmts  ««"{\n            @children[$i] := $child;\n          "...
    ║   ║ │     ├─bind &infix:<:=>  ««":="
    ║   ║ │     │ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║ │     │ │ ├○ @children
    ║   ║ │     │ │ └○ $i
    ║   ║ │     │ └○ $child
    ║   ║ │     └─postinc &postfix:<++>  ««"++"
    ║   ║ │       └○ $i
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╟─setelems  ««"nqp::setelems(@children, $i)"
    ║   ║ ├○ @children
    ║   ║ └○ $i
    ║   ╙─call  ««"$node"
    ║     ├○ $substitution
    ║     └○ $node
    ╟─bind
    ║ ├○ &collect_params_and_body :decl(var)
    ║ └─:Block  ««"{\n    my $arity  := %results<arity>;\n    my %para"...
    ║   ╟○ $node :decl(param)
    ║   ╟○ %results :decl(param) :default((call &hash) (IVal 0 :named("arity")) (hash :named("params")) (list &circumfix:<[ ]> :named("stmts")))
    ║   ╟○ $arity :decl(var)
    ║   ╟○ %params :decl(var)
    ║   ╟○ @stmts :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$arity  := %results<arity>"
    ║   ║ ├○ $arity
    ║   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║   ├○ %results
    ║   ║   └◙ SVal "arity"
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%params := %results<params>"
    ║   ║ ├○ %params
    ║   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║   ├○ %results
    ║   ║   └◙ SVal "params"
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@stmts  := %results<stmts>"
    ║   ║ ├○ @stmts
    ║   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║   ├○ %results
    ║   ║   └◙ SVal "stmts"
    ║   ╟─for  ««"$node.list {\n        if istype($_, QAST::Var) {\n "...
    ║   ║ ├─callmethod list  ««".list"
    ║   ║ │ └○ $node
    ║   ║ ├─:Block :blocktype(immediate)  ««"{\n        if istype($_, QAST::Var) {\n            "...
    ║   ║ │ ╟○ $_ :decl(param)
    ║   ║ │ ╙─if  ««"istype($_, QAST::Var) {\n            my $varName :="...
    ║   ║ │   ├─call &istype  ««"$_, QAST::Var"
    ║   ║ │   │ ├○ $_
    ║   ║ │   │ └◙ WVal QAST::Var
    ║   ║ │   ├─:Block :blocktype(immediate)  ««"{\n            my $varName := $_.name;\n           "...
    ║   ║ │   │ ╟○ $varName :decl(var)
    ║   ║ │   │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$varName := $_.name"
    ║   ║ │   │ ║ ├○ $varName
    ║   ║ │   │ ║ └─callmethod name  ««".name"
    ║   ║ │   │ ║   └○ $_
    ║   ║ │   │ ╙─if  ««"$_.decl {\n                if $_.decl eq 'param' {\"...
    ║   ║ │   │   ├─callmethod decl  ««".decl"
    ║   ║ │   │   │ └○ $_
    ║   ║ │   │   ├─if  ««"$_.decl eq 'param' {\n                    nqp::die("...
    ║   ║ │   │   │ ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║ │   │   │ │ ├─callmethod decl  ««".decl"
    ║   ║ │   │   │ │ │ └○ $_
    ║   ║ │   │   │ │ └◙ SVal "param"
    ║   ║ │   │   │ ├─:Stmts  ««"{\n                    nqp::die(\"cannot handle :na"...
    ║   ║ │   │   │ │ ├─if  ««"nqp::die(\"cannot handle :named parameter $varName:"...
    ║   ║ │   │   │ │ │ ├─callmethod named  ««".named"
    ║   ║ │   │   │ │ │ │ └○ $_
    ║   ║ │   │   │ │ │ └─die  ««"nqp::die(\"cannot handle :named parameter $varName:"...
    ║   ║ │   │   │ │ │   └─concat &infix:<~>  ««"~"
    ║   ║ │   │   │ │ │     ├─concat
    ║   ║ │   │   │ │ │     │ ├─concat
    ║   ║ │   │   │ │ │     │ │ ├◙ SVal "cannot handle :named parameter "
    ║   ║ │   │   │ │ │     │ │ └○ $varName
    ║   ║ │   │   │ │ │     │ └◙ SVal ": "
    ║   ║ │   │   │ │ │     └─call &dump  ««"$_"
    ║   ║ │   │   │ │ │       └○ $_
    ║   ║ │   │   │ │ ├─if  ««"nqp::die(\"cannot handle :slurpy parameter $varName"...
    ║   ║ │   │   │ │ │ ├─callmethod slurpy  ««".slurpy"
    ║   ║ │   │   │ │ │ │ └○ $_
    ║   ║ │   │   │ │ │ └─die  ««"nqp::die(\"cannot handle :slurpy parameter $varName"...
    ║   ║ │   │   │ │ │   └─concat &infix:<~>  ««"~"
    ║   ║ │   │   │ │ │     ├─concat
    ║   ║ │   │   │ │ │     │ ├─concat
    ║   ║ │   │   │ │ │     │ │ ├◙ SVal "cannot handle :slurpy parameter "
    ║   ║ │   │   │ │ │     │ │ └○ $varName
    ║   ║ │   │   │ │ │     │ └◙ SVal ": "
    ║   ║ │   │   │ │ │     └─call &dump  ««"$_"
    ║   ║ │   │   │ │ │       └○ $_
    ║   ║ │   │   │ │ ├─bind &infix:<:=>  ««":="
    ║   ║ │   │   │ │ │ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║ │   │   │ │ │ │ ├○ %params
    ║   ║ │   │   │ │ │ │ └○ $varName
    ║   ║ │   │   │ │ │ └○ $arity
    ║   ║ │   │   │ │ └─postinc &postfix:<++>  ««"++"
    ║   ║ │   │   │ │   └○ $arity
    ║   ║ │   │   │ └─die  ««"nqp::die('cannot handle :decl(' ~ $_.decl ~ ')')"
    ║   ║ │   │   │   └─concat &infix:<~>  ««"~"
    ║   ║ │   │   │     ├─concat &infix:<~>  ««"~"
    ║   ║ │   │   │     │ ├◙ SVal "cannot handle :decl("
    ║   ║ │   │   │     │ └─callmethod decl  ««".decl"
    ║   ║ │   │   │     │   └○ $_
    ║   ║ │   │   │     └◙ SVal ")"
    ║   ║ │   │   └─callmethod push  ««"$_"
    ║   ║ │   │     ├○ @stmts
    ║   ║ │   │     └○ $_
    ║   ║ │   └─callmethod push  ««"$_"
    ║   ║ │     ├○ @stmts
    ║   ║ │     └○ $_
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╟─bind &infix:<:=>  ««":="
    ║   ║ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║ │ ├○ %results
    ║   ║ │ └◙ SVal "arity"
    ║   ║ └○ $arity
    ║   ╙○ %results
    ╟─bind
    ║ ├○ &inline_simple_subs :decl(var)
    ║ └─:Block  ««"{\n    nqp::die('inline_simple_subs expects a QAST:"...
    ║   ╟○ $node :decl(param)
    ║   ╟○ @inlineDefs :decl(param)
    ║   ╟○ %inlineables :decl(param) :default(hash)
    ║   ╟○ $i :decl(var)
    ║   ╟○ @children :decl(var)
    ║   ╙─lexotic RETURN
    ║     └─:Stmts  ««"\n    nqp::die('inline_simple_subs expects a QAST::"...
    ║       ├─unless  ««"nqp::die('inline_simple_subs expects a QAST::Node a"...
    ║       │ ├─call &istype  ««"$node, QAST::Node"
    ║       │ │ ├○ $node
    ║       │ │ └◙ WVal QAST::Node
    ║       │ └─die  ««"nqp::die('inline_simple_subs expects a QAST::Node a"...
    ║       │   └─concat &infix:<~>  ««"~"
    ║       │     ├◙ SVal "inline_simple_subs expects a QAST::Node as 1st arg - got "
    ║       │     └─call &describe  ««"$node"
    ║       │       └○ $node
    ║       ├─if  ««"nqp::elems(@inlineDefs) > 0 {\n        for @inlineD"...
    ║       │ ├─isgt_n &infix:<>>  ««">"
    ║       │ │ ├─elems  ««"nqp::elems(@inlineDefs)"
    ║       │ │ │ └○ @inlineDefs
    ║       │ │ └◙ IVal 0
    ║       │ └─:Stmts  ««"{\n        for @inlineDefs {\n            next if n"...
    ║       │   ├─for  ««"@inlineDefs {\n            next if nqp::isnull($_);"...
    ║       │   │ ├○ @inlineDefs
    ║       │   │ └─:Block :blocktype(immediate)  ««"{\n            next if nqp::isnull($_);\n          "...
    ║       │   │   ╟○ $name :decl(var)
    ║       │   │   ╟○ $block :decl(var)
    ║       │   │   ╟─bind  ««"%results"
    ║       │   │   ║ ├○ %results :decl(var)
    ║       │   │   ║ └─hash
    ║       │   │   ╟○ $arity :decl(var)
    ║       │   │   ╟○ %params :decl(var)
    ║       │   │   ╟○ @stmts :decl(var)
    ║       │   │   ╟○ $_ :decl(param)
    ║       │   │   ╟─if  ««"next if nqp::isnull($_)"
    ║       │   │   ║ ├─isnull  ««"nqp::isnull($_)"
    ║       │   │   ║ │ └○ $_
    ║       │   │   ║ └─control next
    ║       │   │   ╟─unless  ««"nqp::die(\"invalid def of inlineable sub: \" ~ desc"...
    ║       │   │   ║ ├─call &istype  ««"$_, QAST::Node"
    ║       │   │   ║ │ ├○ $_
    ║       │   │   ║ │ └◙ WVal QAST::Node
    ║       │   │   ║ └─die  ««"nqp::die(\"invalid def of inlineable sub: \" ~ desc"...
    ║       │   │   ║   └─concat &infix:<~>  ««"~"
    ║       │   │   ║     ├◙ SVal "invalid def of inlineable sub: "
    ║       │   │   ║     └─call &describe  ««"$_"
    ║       │   │   ║       └○ $_
    ║       │   │   ╟─unless  ««"nqp::die(\"invalid def of inlineable sub: \" ~ dump"...
    ║       │   │   ║ ├─if &infix:<&&>  ««"&&"
    ║       │   │   ║ │ ├─if &infix:<&&>  ««"&&"
    ║       │   │   ║ │ │ ├─if &infix:<&&>  ««"&&"
    ║       │   │   ║ │ │ │ ├─call &istype  ««"$_, QAST::Op"
    ║       │   │   ║ │ │ │ │ ├○ $_
    ║       │   │   ║ │ │ │ │ └◙ WVal QAST::Op
    ║       │   │   ║ │ │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║       │   │   ║ │ │ │   ├─callmethod op  ««".op"
    ║       │   │   ║ │ │ │   │ └○ $_
    ║       │   │   ║ │ │ │   └◙ SVal "bind"
    ║       │   │   ║ │ │ └─call &istype  ««"$_[0], QAST::Var"
    ║       │   │   ║ │ │   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │   ║ │ │   │ ├○ $_
    ║       │   │   ║ │ │   │ └◙ IVal 0
    ║       │   │   ║ │ │   └◙ WVal QAST::Var
    ║       │   │   ║ │ └─call &istype  ««"$_[1], QAST::Block"
    ║       │   │   ║ │   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │   ║ │   │ ├○ $_
    ║       │   │   ║ │   │ └◙ IVal 1
    ║       │   │   ║ │   └◙ WVal QAST::Block
    ║       │   │   ║ └─die  ««"nqp::die(\"invalid def of inlineable sub: \" ~ dump"...
    ║       │   │   ║   └─concat &infix:<~>  ««"~"
    ║       │   │   ║     ├◙ SVal "invalid def of inlineable sub: "
    ║       │   │   ║     └─call &dump  ««"$_"
    ║       │   │   ║       └○ $_
    ║       │   │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$name   := $_[0].name"
    ║       │   │   ║ ├○ $name
    ║       │   │   ║ └─callmethod name  ««".name"
    ║       │   │   ║   └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │   ║     ├○ $_
    ║       │   │   ║     └◙ IVal 0
    ║       │   │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$block  := $_[1]"
    ║       │   │   ║ ├○ $block
    ║       │   │   ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │   ║   ├○ $_
    ║       │   │   ║   └◙ IVal 1
    ║       │   │   ╟○ %results
    ║       │   │   ╟─if  ««"istype($block[0], QAST::Stmt, QAST::Stmts) {\n     "...
    ║       │   │   ║ ├─call &istype  ««"$block[0], QAST::Stmt, QAST::Stmts"
    ║       │   │   ║ │ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │   ║ │ │ ├○ $block
    ║       │   │   ║ │ │ └◙ IVal 0
    ║       │   │   ║ │ ├◙ WVal QAST::Stmt
    ║       │   │   ║ │ └◙ WVal QAST::Stmts
    ║       │   │   ║ ├─:Block :blocktype(immediate)  ««"{\n                my $it := nqp::iterator($block.l"...
    ║       │   │   ║ │ ╟○ $it :decl(var)
    ║       │   │   ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$it := nqp::iterator($block.list)"
    ║       │   │   ║ │ ║ ├○ $it
    ║       │   │   ║ │ ║ └─iterator  ««"nqp::iterator($block.list)"
    ║       │   │   ║ │ ║   └─callmethod list  ««".list"
    ║       │   │   ║ │ ║     └○ $block
    ║       │   │   ║ │ ╟─bind &infix:<:=>  ««":="
    ║       │   │   ║ │ ║ ├○ %results
    ║       │   │   ║ │ ║ └─call &collect_params_and_body  ««"nqp::shift($it)"
    ║       │   │   ║ │ ║   └─shift  ««"nqp::shift($it)"
    ║       │   │   ║ │ ║     └○ $it
    ║       │   │   ║ │ ╙─while  ««"$it {\n                    %results := collect_para"...
    ║       │   │   ║ │   ├○ $it
    ║       │   │   ║ │   ├─bind &infix:<:=>  ««":="
    ║       │   │   ║ │   │ ├○ %results
    ║       │   │   ║ │   │ └─call &collect_params_and_body  ««"nqp::shift($it), %results"
    ║       │   │   ║ │   │   ├─shift  ««"nqp::shift($it)"
    ║       │   │   ║ │   │   │ └○ $it
    ║       │   │   ║ │   │   └○ %results
    ║       │   │   ║ │   └◙ IVal 1 :named("nohandler")
    ║       │   │   ║ └─bind &infix:<:=>  ««":="
    ║       │   │   ║   ├○ %results
    ║       │   │   ║   └─call &collect_params_and_body  ««"$block"
    ║       │   │   ║     └○ $block
    ║       │   │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$arity  := %results<arity>"
    ║       │   │   ║ ├○ $arity
    ║       │   │   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║       │   │   ║   ├○ %results
    ║       │   │   ║   └◙ SVal "arity"
    ║       │   │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%params := %results<params>"
    ║       │   │   ║ ├○ %params
    ║       │   │   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║       │   │   ║   ├○ %results
    ║       │   │   ║   └◙ SVal "params"
    ║       │   │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@stmts  := %results<stmts>"
    ║       │   │   ║ ├○ @stmts
    ║       │   │   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║       │   │   ║   ├○ %results
    ║       │   │   ║   └◙ SVal "stmts"
    ║       │   │   ╟─if  ««"nqp::elems(@stmts) == 0 {\n                nqp::die"...
    ║       │   │   ║ ├─iseq_n &infix:<==>  ««"=="
    ║       │   │   ║ │ ├─elems  ««"nqp::elems(@stmts)"
    ║       │   │   ║ │ │ └○ @stmts
    ║       │   │   ║ │ └◙ IVal 0
    ║       │   │   ║ ├─die  ««"nqp::die(\"no statements found in inlineable $name:"...
    ║       │   │   ║ │ └─concat &infix:<~>  ««"~"
    ║       │   │   ║ │   ├─concat
    ║       │   │   ║ │   │ ├─concat
    ║       │   │   ║ │   │ │ ├◙ SVal "no statements found in inlineable "
    ║       │   │   ║ │   │ │ └○ $name
    ║       │   │   ║ │   │ └◙ SVal ": "
    ║       │   │   ║ │   └─call &dump  ««"$block"
    ║       │   │   ║ │     └○ $block
    ║       │   │   ║ └─if  ««"nqp::elems(@stmts) == 1 {\n                $block :"...
    ║       │   │   ║   ├─iseq_n &infix:<==>  ««"=="
    ║       │   │   ║   │ ├─elems  ««"nqp::elems(@stmts)"
    ║       │   │   ║   │ │ └○ @stmts
    ║       │   │   ║   │ └◙ IVal 1
    ║       │   │   ║   ├─bind &infix:<:=>  ««":="
    ║       │   │   ║   │ ├○ $block
    ║       │   │   ║   │ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │   ║   │   ├○ @stmts
    ║       │   │   ║   │   └◙ IVal 0
    ║       │   │   ║   └─bind &infix:<:=>  ««":="
    ║       │   │   ║     ├○ $block
    ║       │   │   ║     └─callmethod new  ««"|@stmts"
    ║       │   │   ║       ├◙ WVal QAST::Stmts
    ║       │   │   ║       └○ @stmts :flat(1)
    ║       │   │   ╙─bind &infix:<:=>  ««":="
    ║       │   │     ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║       │   │     │ ├○ %inlineables
    ║       │   │     │ └○ $name
    ║       │   │     └─:Block  ««"{\n                my $argCount := nqp::elems(@argu"...
    ║       │   │       ╟○ @arguments :decl(param)
    ║       │   │       ╟○ $argCount :decl(var)
    ║       │   │       ╟○ $out :decl(var)
    ║       │   │       ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$argCount := nqp::elems(@arguments)"
    ║       │   │       ║ ├○ $argCount
    ║       │   │       ║ └─elems  ««"nqp::elems(@arguments)"
    ║       │   │       ║   └○ @arguments
    ║       │   │       ╟─unless  ««"nqp::die(\"cannot inline call with $argCount args t"...
    ║       │   │       ║ ├─iseq_n &infix:<==>  ««"=="
    ║       │   │       ║ │ ├○ $argCount
    ║       │   │       ║ │ └○ $arity
    ║       │   │       ║ └─die  ««"nqp::die(\"cannot inline call with $argCount args t"...
    ║       │   │       ║   └─concat &infix:<~>  ««"~"
    ║       │   │       ║     ├─concat
    ║       │   │       ║     │ ├─concat
    ║       │   │       ║     │ │ ├─concat
    ║       │   │       ║     │ │ │ ├◙ SVal "cannot inline call with "
    ║       │   │       ║     │ │ │ └○ $argCount
    ║       │   │       ║     │ │ └◙ SVal " args to "
    ║       │   │       ║     │ └○ $arity
    ║       │   │       ║     └─concat
    ║       │   │       ║       ├◙ SVal "-arity fn "
    ║       │   │       ║       └○ $name
    ║       │   │       ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$out := cloneAndSubst($block, -> $n {\n#           "...
    ║       │   │       ║ ├○ $out
    ║       │   │       ║ └─call &cloneAndSubst  ««"$block, -> $n {\n#                    say('####', d"...
    ║       │   │       ║   ├○ $block
    ║       │   │       ║   └─:Block  ««"{\n#                    say('####', dump($n));\n   "...
    ║       │   │       ║     ╟○ $n :decl(param)
    ║       │   │       ║     ╙─if  ««"istype($n, QAST::Var) && nqp::existskey(%params, $n"...
    ║       │   │       ║       ├─if &infix:<&&>  ««"&&"
    ║       │   │       ║       │ ├─call &istype  ««"$n, QAST::Var"
    ║       │   │       ║       │ │ ├○ $n
    ║       │   │       ║       │ │ └◙ WVal QAST::Var
    ║       │   │       ║       │ └─existskey  ««"nqp::existskey(%params, $n.name)"
    ║       │   │       ║       │   ├○ %params
    ║       │   │       ║       │   └─callmethod name  ««".name"
    ║       │   │       ║       │     └○ $n
    ║       │   │       ║       ├─:Block :blocktype(immediate)  ««"{\n                        my $out := @arguments[%p"...
    ║       │   │       ║       │ ╟○ $out :decl(var)
    ║       │   │       ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$out := @arguments[%params{$n.name}]"
    ║       │   │       ║       │ ║ ├○ $out
    ║       │   │       ║       │ ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │   │       ║       │ ║   ├○ @arguments
    ║       │   │       ║       │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║       │   │       ║       │ ║     ├○ %params
    ║       │   │       ║       │ ║     └─callmethod name  ««".name"
    ║       │   │       ║       │ ║       └○ $n
    ║       │   │       ║       │ ╙○ $out
    ║       │   │       ║       └○ $n
    ║       │   │       ╙○ $out
    ║       │   └─call RETURN
    ║       │     └─call &inline_simple_subs  ««"$node, [], %inlineables"
    ║       │       ├○ $node
    ║       │       ├─list &circumfix:<[ ]>
    ║       │       └○ %inlineables
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$i := 0"
    ║       │ ├○ $i
    ║       │ └◙ IVal 0
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@children := $node.list"
    ║       │ ├○ @children
    ║       │ └─callmethod list  ««".list"
    ║       │   └○ $node
    ║       ├─for  ««"@children {\n        @children[$i] := inline_simple"...
    ║       │ ├○ @children
    ║       │ ├─:Block :blocktype(immediate)  ««"{\n        @children[$i] := inline_simple_subs($_, "...
    ║       │ │ ╟○ $_ :decl(param)
    ║       │ │ ╟─bind &infix:<:=>  ««":="
    ║       │ │ ║ ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║       │ │ ║ │ ├○ @children
    ║       │ │ ║ │ └○ $i
    ║       │ │ ║ └─call &inline_simple_subs  ««"$_, [], %inlineables"
    ║       │ │ ║   ├○ $_
    ║       │ │ ║   ├─list &circumfix:<[ ]>
    ║       │ │ ║   └○ %inlineables
    ║       │ │ ╙─postinc &postfix:<++>  ««"++"
    ║       │ │   └○ $i
    ║       │ └◙ IVal 1 :named("nohandler")
    ║       ├─if  ««"istype($node, QAST::Op) && ($node.op eq 'call' || $"...
    ║       │ ├─if &infix:<&&>  ««"&&"
    ║       │ │ ├─call &istype  ««"$node, QAST::Op"
    ║       │ │ │ ├○ $node
    ║       │ │ │ └◙ WVal QAST::Op
    ║       │ │ └─unless &infix:<||>  ««"||"
    ║       │ │   ├─iseq_s &infix:<eq>  ««"eq"
    ║       │ │   │ ├─callmethod op  ««".op"
    ║       │ │   │ │ └○ $node
    ║       │ │   │ └◙ SVal "call"
    ║       │ │   └─iseq_s &infix:<eq>  ««"eq"
    ║       │ │     ├─callmethod op  ««".op"
    ║       │ │     │ └○ $node
    ║       │ │     └◙ SVal "callstatic"
    ║       │ └─:Block :blocktype(immediate)  ««"{\n        my $codeMaker := %inlineables{$node.name"...
    ║       │   ╟○ $codeMaker :decl(var)
    ║       │   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$codeMaker := %inlineables{$node.name}"
    ║       │   ║ ├○ $codeMaker
    ║       │   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║       │   ║   ├○ %inlineables
    ║       │   ║   └─callmethod name  ««".name"
    ║       │   ║     └○ $node
    ║       │   ╙─if  ««"$codeMaker {\n            my $out := $codeMaker($no"...
    ║       │     ├○ $codeMaker
    ║       │     └─:Block :blocktype(immediate)  ««"{\n            my $out := $codeMaker($node.list);\n"...
    ║       │       ╟○ $out :decl(var)
    ║       │       ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$out := $codeMaker($node.list)"
    ║       │       ║ ├○ $out
    ║       │       ║ └─call  ««"$node.list"
    ║       │       ║   ├○ $codeMaker
    ║       │       ║   └─callmethod list  ««".list"
    ║       │       ║     └○ $node
    ║       │       ╟─callmethod node  ««"$node.node"
    ║       │       ║ ├○ $out
    ║       │       ║ └─callmethod node  ««".node"
    ║       │       ║   └○ $node
    ║       │       ╟─callmethod flat  ««"$node.flat"
    ║       │       ║ ├○ $out
    ║       │       ║ └─callmethod flat  ««".flat"
    ║       │       ║   └○ $node
    ║       │       ╟─callmethod named  ««"$node.named"
    ║       │       ║ ├○ $out
    ║       │       ║ └─callmethod named  ««".named"
    ║       │       ║   └○ $node
    ║       │       ╙─bind &infix:<:=>  ««":="
    ║       │         ├○ $node
    ║       │         └○ $out
    ║       └○ $node
    ╟─bind
    ║ ├○ &inline_simple_methods :decl(var)
    ║ └─:Block  ««"{\n    nqp::die('inline_simple_methods expects a QA"...
    ║   ╟○ $node :decl(param)
    ║   ╟─unless  ««"nqp::die('inline_simple_methods expects a QAST::Nod"...
    ║   ║ ├─call &istype  ««"$node, QAST::Node"
    ║   ║ │ ├○ $node
    ║   ║ │ └◙ WVal QAST::Node
    ║   ║ └─die  ««"nqp::die('inline_simple_methods expects a QAST::Nod"...
    ║   ║   └─concat &infix:<~>  ««"~"
    ║   ║     ├◙ SVal "inline_simple_methods expects a QAST::Node - got "
    ║   ║     └─call &describe  ««"$node"
    ║   ║       └○ $node
    ║   ╟─for  ««"$node.list {\n        inline_simple_methods($_);\n "...
    ║   ║ ├─callmethod list  ««".list"
    ║   ║ │ └○ $node
    ║   ║ ├─:Block :blocktype(immediate)  ««"{\n        inline_simple_methods($_);\n    }"
    ║   ║ │ ╟○ $_ :decl(param)
    ║   ║ │ ╙─call &inline_simple_methods  ««"$_"
    ║   ║ │   └○ $_
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╟─if  ««"istype($node, QAST::Op) && $node.op eq 'callmethod'"...
    ║   ║ ├─if &infix:<&&>  ««"&&"
    ║   ║ │ ├─call &istype  ««"$node, QAST::Op"
    ║   ║ │ │ ├○ $node
    ║   ║ │ │ └◙ WVal QAST::Op
    ║   ║ │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║ │   ├─callmethod op  ««".op"
    ║   ║ │   │ └○ $node
    ║   ║ │   └◙ SVal "callmethod"
    ║   ║ └─:Block :blocktype(immediate)  ««"{\n        my $meth := $node.name;\n        if $met"...
    ║   ║   ╟○ $meth :decl(var)
    ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$meth := $node.name"
    ║   ║   ║ ├○ $meth
    ║   ║   ║ └─callmethod name  ««".name"
    ║   ║   ║   └○ $node
    ║   ║   ╙─if  ««"$meth {\n            if nqp::index('push pop shift "...
    ║   ║     ├○ $meth
    ║   ║     └─if  ««"nqp::index('push pop shift unshift', $meth) > -1 {\"...
    ║   ║       ├─isgt_n &infix:<>>  ««">"
    ║   ║       │ ├─index  ««"nqp::index('push pop shift unshift', $meth)"
    ║   ║       │ │ ├◙ SVal "push pop shift unshift"
    ║   ║       │ │ └○ $meth
    ║   ║       │ └◙ IVal -1
    ║   ║       ├─:Stmts  ««"{\n                $node.op($meth);\n              "...
    ║   ║       │ ├─callmethod op  ««"$meth"
    ║   ║       │ │ ├○ $node
    ║   ║       │ │ └○ $meth
    ║   ║       │ └─callmethod name  ««"nqp::null_s"
    ║   ║       │   ├○ $node
    ║   ║       │   └─null_s  ««"nqp::null_s"
    ║   ║       └─if  ««"$meth eq 'key' {\n                $node.op('iterkey"...
    ║   ║         ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║         │ ├○ $meth
    ║   ║         │ └◙ SVal "key"
    ║   ║         ├─:Stmts  ««"{\n                $node.op('iterkey_s');\n        "...
    ║   ║         │ ├─callmethod op  ««"'iterkey_s'"
    ║   ║         │ │ ├○ $node
    ║   ║         │ │ └◙ SVal "iterkey_s"
    ║   ║         │ └─callmethod name  ««"nqp::null_s"
    ║   ║         │   ├○ $node
    ║   ║         │   └─null_s  ««"nqp::null_s"
    ║   ║         └─if  ««"$meth eq 'value' {\n                $node.op('iterv"...
    ║   ║           ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║           │ ├○ $meth
    ║   ║           │ └◙ SVal "value"
    ║   ║           └─:Stmts  ««"{\n                $node.op('iterval');\n          "...
    ║   ║             ├─callmethod op  ««"'iterval'"
    ║   ║             │ ├○ $node
    ║   ║             │ └◙ SVal "iterval"
    ║   ║             └─callmethod name  ««"nqp::null_s"
    ║   ║               ├○ $node
    ║   ║               └─null_s  ««"nqp::null_s"
    ║   ╙○ $node
    ╟─bind
    ║ ├○ &renameVars :decl(var)
    ║ └─:Block  ««"{\n    nqp::die('renameVars expects a QAST::Node as"...
    ║   ╟○ $ast :decl(param)
    ║   ╟○ $map :decl(param)
    ║   ╟─unless  ««"nqp::die('renameVars expects a QAST::Node as 1st ar"...
    ║   ║ ├─call &istype  ««"$ast, QAST::Node"
    ║   ║ │ ├○ $ast
    ║   ║ │ └◙ WVal QAST::Node
    ║   ║ └─die  ««"nqp::die('renameVars expects a QAST::Node as 1st ar"...
    ║   ║   └─concat &infix:<~>  ««"~"
    ║   ║     ├◙ SVal "renameVars expects a QAST::Node as 1st arg - got "
    ║   ║     └─call &describe  ««"$ast"
    ║   ║       └○ $ast
    ║   ╟─unless  ««"nqp::die('renameVars expects a unary fn as 2nd arg("...
    ║   ║ ├─isinvokable  ««"nqp::isinvokable($map)"
    ║   ║ │ └○ $map
    ║   ║ └─die  ««"nqp::die('renameVars expects a unary fn as 2nd arg("...
    ║   ║   └─concat &infix:<~>  ««"~"
    ║   ║     ├◙ SVal "renameVars expects a unary fn as 2nd arg(optional) - got "
    ║   ║     └─call &describe  ««"$map"
    ║   ║       └○ $map
    ║   ╟─if  ««"istype($ast, QAST::Var) \n       || (\n          is"...
    ║   ║ ├─unless &infix:<||>  ««"||"
    ║   ║ │ ├─call &istype  ««"$ast, QAST::Var"
    ║   ║ │ │ ├○ $ast
    ║   ║ │ │ └◙ WVal QAST::Var
    ║   ║ │ └─if &infix:<&&>  ««"&&"
    ║   ║ │   ├─call &istype  ««"$ast, QAST::Op"
    ║   ║ │   │ ├○ $ast
    ║   ║ │   │ └◙ WVal QAST::Op
    ║   ║ │   └─unless &infix:<||>  ««"||"
    ║   ║ │     ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║ │     │ ├─callmethod op  ««".op"
    ║   ║ │     │ │ └○ $ast
    ║   ║ │     │ └◙ SVal "call"
    ║   ║ │     └─iseq_s &infix:<eq>  ««"eq"
    ║   ║ │       ├─callmethod op  ««".op"
    ║   ║ │       │ └○ $ast
    ║   ║ │       └◙ SVal "callstatic"
    ║   ║ └─:Block :blocktype(immediate)  ««"{\n        my str $old := $ast.name;\n        my st"...
    ║   ║   ╟○ $old :decl(var)
    ║   ║   ╟○ $new :decl(var)
    ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"str $old := $ast.name"
    ║   ║   ║ ├○ $old
    ║   ║   ║ └─callmethod name  ««".name"
    ║   ║   ║   └○ $ast
    ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"str $new := $map($old)"
    ║   ║   ║ ├○ $new
    ║   ║   ║ └─call  ««"$old"
    ║   ║   ║   ├○ $map
    ║   ║   ║   └○ $old
    ║   ║   ╙─if  ««"$new ne $old {\n            $ast.name($new);\n     "...
    ║   ║     ├─isne_s &infix:<ne>  ««"ne"
    ║   ║     │ ├○ $new
    ║   ║     │ └○ $old
    ║   ║     └─callmethod name  ««"$new"
    ║   ║       ├○ $ast
    ║   ║       └○ $new
    ║   ╟─for  ««"$ast.list {\n        renameVars($_, $map);\n    }"
    ║   ║ ├─callmethod list  ««".list"
    ║   ║ │ └○ $ast
    ║   ║ ├─:Block :blocktype(immediate)  ««"{\n        renameVars($_, $map);\n    }"
    ║   ║ │ ╟○ $_ :decl(param)
    ║   ║ │ ╙─call &renameVars  ««"$_, $map"
    ║   ║ │   ├○ $_
    ║   ║ │   └○ $map
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╙○ $ast
    ╟○ SmartCompiler :decl(static) :default((SmartCompiler, Type object))
    ╟○ NQPActions :decl(static) :default((NQPActions, Type object))
    ╟○ $needsCompilation :decl(var)
    ╟○ NQPCompiler :decl(static) :default((NQPCompiler, Type object))
    ╟─bind
    ║ ├○ &flatten :decl(var)
    ║ └─:Block  ««"{\n    return [$args]\n        unless nqp::islist($"...
    ║   ╟○ $args :decl(param)
    ║   ╟○ @out :decl(var)
    ║   ╙─lexotic RETURN
    ║     └─:Stmts  ««"\n    return [$args]\n        unless nqp::islist($a"...
    ║       ├─unless  ««"return [$args]\n        unless nqp::islist($args)"
    ║       │ ├─islist  ««"nqp::islist($args)"
    ║       │ │ └○ $args
    ║       │ └─call RETURN
    ║       │   └─list &circumfix:<[ ]>
    ║       │     └○ $args
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@out := []"
    ║       │ ├○ @out
    ║       │ └─list &circumfix:<[ ]>
    ║       ├─for  ««"$args -> $_ {\n        if nqp::islist($_) {\n      "...
    ║       │ ├○ $args
    ║       │ ├─:Block :blocktype(immediate)  ««"{\n        if nqp::islist($_) {\n            for fl"...
    ║       │ │ ╟○ $_ :decl(param)
    ║       │ │ ╙─if  ««"nqp::islist($_) {\n            for flatten($_) -> $"...
    ║       │ │   ├─islist  ««"nqp::islist($_)"
    ║       │ │   │ └○ $_
    ║       │ │   ├─for  ««"flatten($_) -> $_ {\n                @out.push($_);"...
    ║       │ │   │ ├─call &flatten  ««"$_"
    ║       │ │   │ │ └○ $_
    ║       │ │   │ ├─:Block :blocktype(immediate)  ««"{\n                @out.push($_);\n            }"
    ║       │ │   │ │ ╟○ $_ :decl(param)
    ║       │ │   │ │ ╙─callmethod push  ««"$_"
    ║       │ │   │ │   ├○ @out
    ║       │ │   │ │   └○ $_
    ║       │ │   │ └◙ IVal 1 :named("nohandler")
    ║       │ │   └─callmethod push  ««"$_"
    ║       │ │     ├○ @out
    ║       │ │     └○ $_
    ║       │ └◙ IVal 1 :named("nohandler")
    ║       └○ @out
    ╟─bind
    ║ ├○ &MAIN :decl(var)
    ║ └─:Block  ««"{\n    @ARGS := flatten(@ARGS);\n\n    my $cwd := n"...
    ║   ╟○ @ARGS :decl(param) :slurpy(1)
    ║   ╟○ $cwd :decl(var)
    ║   ╟○ $sep :decl(var)
    ║   ╟○ $nqpc :decl(var)
    ║   ╟○ %opts :decl(var)
    ║   ╟─bind &infix:<:=>  ««":="
    ║   ║ ├○ @ARGS
    ║   ║ └─call &flatten  ««"@ARGS"
    ║   ║   └○ @ARGS
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$cwd := nqp::cwd()"
    ║   ║ ├○ $cwd
    ║   ║ └─cwd  ««"nqp::cwd()"
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$sep := nqp::x('-', 29)"
    ║   ║ ├○ $sep
    ║   ║ └─x  ««"nqp::x('-', 29)"
    ║   ║   ├◙ SVal "-"
    ║   ║   └◙ IVal 29
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$nqpc := NQPCompiler.new()"
    ║   ║ ├○ $nqpc
    ║   ║ └─callmethod new  ««""
    ║   ║   └◙ WVal NQPCompiler
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%opts := hash()"
    ║   ║ ├○ %opts
    ║   ║ └─call &hash  ««""
    ║   ╟─callmethod shift  ««".shift"
    ║   ║ └○ @ARGS
    ║   ╟─if  ««"nqp::elems(@ARGS) == 0 {\n        #@ARGS.push('L/LG"...
    ║   ║ ├─iseq_n &infix:<==>  ««"=="
    ║   ║ │ ├─elems  ««"nqp::elems(@ARGS)"
    ║   ║ │ │ └○ @ARGS
    ║   ║ │ └◙ IVal 0
    ║   ║ └─callmethod push  ««"'lib/L/runtime.nqp'"
    ║   ║   ├○ @ARGS
    ║   ║   └◙ SVal "lib/L/runtime.nqp"
    ║   ╟─callmethod addstage  ««"'write_bytecode', :before<mbc>"
    ║   ║ ├○ $nqpc
    ║   ║ ├◙ SVal "write_bytecode"
    ║   ║ └◙ SVal "mbc" :named("before")
    ║   ╟─for  ««"@ARGS {\n        my $file := $_;\n        \n       "...
    ║   ║ ├○ @ARGS
    ║   ║ ├─:Block :annotations(#`{BOOTHash:}nqp::hash( "handlers", #`{BOOTHash:}nqp::hash( "CATCH", QAST::Stmts ) )) :blocktype(immediate)  ««"{\n        my $file := $_;\n        \n        my $r"...
    ║   ║ │ ╟○ $file :decl(var)
    ║   ║ │ ╟○ $result :decl(var)
    ║   ║ │ ╟○ $_ :decl(param)
    ║   ║ │ ╙─handle
    ║   ║ │   ├─:Stmts  ««"\n        my $file := $_;\n        \n        my $re"...
    ║   ║ │   │ ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$file := $_"
    ║   ║ │   │ │ ├○ $file
    ║   ║ │   │ │ └○ $_
    ║   ║ │   │ ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$result := $nqpc.compileFile($file, |%opts)"
    ║   ║ │   │ │ ├○ $result
    ║   ║ │   │ │ └─callmethod compileFile  ««"$file, |%opts"
    ║   ║ │   │ │   ├○ $nqpc
    ║   ║ │   │ │   ├○ $file
    ║   ║ │   │ │   └○ %opts :flat(1) :named(1)
    ║   ║ │   │ ├─if  ««"nqp::isnull($result) {\n            $nqpc.log(\"upt"...
    ║   ║ │   │ │ ├─isnull  ««"nqp::isnull($result)"
    ║   ║ │   │ │ │ └○ $result
    ║   ║ │   │ │ ├─callmethod log  ««"\"uptodate: $file\""
    ║   ║ │   │ │ │ ├○ $nqpc
    ║   ║ │   │ │ │ └─concat
    ║   ║ │   │ │ │   ├◙ SVal "uptodate: "
    ║   ║ │   │ │ │   └○ $file
    ║   ║ │   │ │ └─callmethod log  ««"\"compiled: $file ~> \" ~ describe($result)"
    ║   ║ │   │ │   ├○ $nqpc
    ║   ║ │   │ │   └─concat &infix:<~>  ««"~"
    ║   ║ │   │ │     ├─concat
    ║   ║ │   │ │     │ ├─concat
    ║   ║ │   │ │     │ │ ├◙ SVal "compiled: "
    ║   ║ │   │ │     │ │ └○ $file
    ║   ║ │   │ │     │ └◙ SVal " ~> "
    ║   ║ │   │ │     └─call &describe  ««"$result"
    ║   ║ │   │ │       └○ $result
    ║   ║ │   │ └◙ WVal NQPMu
    ║   ║ │   ├► "CATCH" (str)
    ║   ║ │   └─:Stmts
    ║   ║ │     ├─call
    ║   ║ │     │ ├─:Block  ««"{\n            $nqpc.log(\"ERROR: $file\");\n      "...
    ║   ║ │     │ │ ╟○ $_ :decl(param)
    ║   ║ │     │ │ ╟─bind
    ║   ║ │     │ │ ║ ├○ $! :decl(var)
    ║   ║ │     │ │ ║ └○ $_
    ║   ║ │     │ │ ╟─callmethod log  ««"\"ERROR: $file\""
    ║   ║ │     │ │ ║ ├○ $nqpc
    ║   ║ │     │ │ ║ └─concat
    ║   ║ │     │ │ ║   ├◙ SVal "ERROR: "
    ║   ║ │     │ │ ║   └○ $file
    ║   ║ │     │ │ ╟─callmethod log  ««"$sep"
    ║   ║ │     │ │ ║ ├○ $nqpc
    ║   ║ │     │ │ ║ └○ $sep
    ║   ║ │     │ │ ╟─callmethod log  ««"\"  CWD: $cwd\""
    ║   ║ │     │ │ ║ ├○ $nqpc
    ║   ║ │     │ │ ║ └─concat
    ║   ║ │     │ │ ║   ├◙ SVal "  CWD: "
    ║   ║ │     │ │ ║   └○ $cwd
    ║   ║ │     │ │ ╟─callmethod log  ««"' ARGS: ', nqp::join(' ', @ARGS)"
    ║   ║ │     │ │ ║ ├○ $nqpc
    ║   ║ │     │ │ ║ ├◙ SVal " ARGS: "
    ║   ║ │     │ │ ║ └─join  ««"nqp::join(' ', @ARGS)"
    ║   ║ │     │ │ ║   ├◙ SVal " "
    ║   ║ │     │ │ ║   └○ @ARGS
    ║   ║ │     │ │ ╟─callmethod log  ««"''"
    ║   ║ │     │ │ ║ ├○ $nqpc
    ║   ║ │     │ │ ║ └◙ SVal ""
    ║   ║ │     │ │ ╟─callmethod log  ««"~$_"
    ║   ║ │     │ │ ║ ├○ $nqpc
    ║   ║ │     │ │ ║ └─stringify &prefix:<~>  ««"~"
    ║   ║ │     │ │ ║   └○ $_
    ║   ║ │     │ │ ╙─exit  ««"nqp::exit(1)"
    ║   ║ │     │ │   └◙ IVal 1
    ║   ║ │     │ └─exception
    ║   ║ │     ├─:VM
    ║   ║ │     └◙ WVal NQPMu
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╙─call &say  ««"$sep"
    ║     └○ $sep
    ╟─bind
    ║ ├○ local ctxsave :decl(var)
    ║ └○ contextual $*CTXSAVE
    ╟─unless
    ║ ├─isnull
    ║ │ └○ local ctxsave
    ║ └─if
    ║   ├─can
    ║   │ ├○ local ctxsave
    ║   │ └◙ SVal "ctxsave"
    ║   └─callmethod ctxsave
    ║     └○ local ctxsave
    ╟○ &isinResultPosition
    ╟○ &drop_bogusVars
    ╟○ &remove_bogusOpNames
    ╟○ &remove_MAIN
    ╟○ &findDef
    ╟○ &findDefs
    ╟○ &findValueNodeInHash
    ╟○ &cloneAndSubst
    ╟○ &collect_params_and_body
    ╟○ &inline_simple_subs
    ╟○ &inline_simple_methods
    ╟○ &renameVars
    ╟─:Block :blocktype(immediate)  ««"{\n\n    # Where to search for user source files.\n"...
    ║ ╟○ $?PACKAGE :decl(static) :default((SmartCompiler, Type object))
    ║ ╟○ $?CLASS :decl(static) :default((SmartCompiler, Type object))
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        # in this order (!):\n        self.addst"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ @clo :decl(var)
    ║ ║ ╟─callmethod addstage  ««"'ast_save',           :after<ast>"
    ║ ║ ║ ├─decont
    ║ ║ ║ │ └○ self
    ║ ║ ║ ├◙ SVal "ast_save"
    ║ ║ ║ └◙ SVal "ast" :named("after")
    ║ ║ ╟─callmethod addstage  ««"'ast_clean',          :before<ast_save>"
    ║ ║ ║ ├─decont
    ║ ║ ║ │ └○ self
    ║ ║ ║ ├◙ SVal "ast_clean"
    ║ ║ ║ └◙ SVal "ast_save" :named("before")
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@clo := self.commandline_options()"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └─callmethod commandline_options  ««""
    ║ ║ ║   └─decont
    ║ ║ ║     └○ self
    ║ ║ ╟─callmethod push  ««"'parsetrace'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "parsetrace"
    ║ ║ ╟─callmethod push  ««"'setting=s'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "setting=s"
    ║ ║ ╟─callmethod push  ««"'setting-path=s'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "setting-path=s"
    ║ ║ ╟─callmethod push  ««"'module-path=s'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "module-path=s"
    ║ ║ ╟─callmethod push  ««"'no-regex-lib'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "no-regex-lib"
    ║ ║ ╟─callmethod push  ««"'stable-sc'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "stable-sc"
    ║ ║ ╟─callmethod push  ««"'optimize=s'"
    ║ ║ ║ ├○ @clo
    ║ ║ ║ └◙ SVal "optimize=s"
    ║ ║ ╙─bind &infix:<:=>  ««":="
    ║ ║   ├○ attribute @!user_srcpaths
    ║ ║   │ ├─decont
    ║ ║   │ │ └○ self
    ║ ║   │ └◙ WVal SmartCompiler
    ║ ║   └─list  ««"<. lib lib/L>"
    ║ ║     ├◙ SVal "."
    ║ ║     ├◙ SVal "lib"
    ║ ║     └◙ SVal "lib/L"
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        self.user-progname();\n    }"
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╙─callmethod user-progname  ««""
    ║ ║   └─decont
    ║ ║     └○ self
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        $!user_binname := $v unless $v =:= NO_VA"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $v :decl(param) :default((VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))) ((who) ($?PACKAGE)) (SVal "NO_VALUE"))
    ║ ║ ╟─unless  ««"$!user_binname := $v unless $v =:= NO_VALUE"
    ║ ║ ║ ├─eqaddr &infix:<=:=>  ««"=:="
    ║ ║ ║ │ ├○ $v
    ║ ║ ║ │ └○┬VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))
    ║ ║ ║ │   ├─who
    ║ ║ ║ │   │ └○ $?PACKAGE
    ║ ║ ║ │   └◙ SVal "NO_VALUE"
    ║ ║ ║ └─bind &infix:<:=>  ««":="
    ║ ║ ║   ├○ attribute $!user_binname
    ║ ║ ║   │ ├─decont
    ║ ║ ║   │ │ └○ self
    ║ ║ ║   │ └◙ WVal SmartCompiler
    ║ ║ ║   └○ $v
    ║ ║ ╙○ attribute $!user_binname
    ║ ║   ├─decont
    ║ ║   │ └○ self
    ║ ║   └◙ WVal SmartCompiler
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        @!user_srcpaths;\n    }"
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╙○ attribute @!user_srcpaths
    ║ ║   ├─decont
    ║ ║   │ └○ self
    ║ ║   └◙ WVal SmartCompiler
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my str $out := '# [' ~ self.compiler_pro"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $msg :decl(param)
    ║ ║ ╟○ @moreMsgPieces :decl(param) :slurpy(1)
    ║ ║ ╟○ $out :decl(var)
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"str $out := '# [' ~ self.compiler_progname ~ '] ' ~"...
    ║ ║ ║ ├○ $out
    ║ ║ ║ └─concat &infix:<~>  ««"~"
    ║ ║ ║   ├─concat &infix:<~>  ««"~"
    ║ ║ ║   │ ├─concat &infix:<~>  ««"~"
    ║ ║ ║   │ │ ├◙ SVal "# ["
    ║ ║ ║   │ │ └─callmethod compiler_progname  ««".compiler_progname"
    ║ ║ ║   │ │   └─decont
    ║ ║ ║   │ │     └○ self
    ║ ║ ║   │ └◙ SVal "] "
    ║ ║ ║   └○ $msg
    ║ ║ ╟─for  ««"@moreMsgPieces {\n            $out := $out ~ $_;\n "...
    ║ ║ ║ ├○ @moreMsgPieces
    ║ ║ ║ ├─:Block :blocktype(immediate)  ««"{\n            $out := $out ~ $_;\n        }"
    ║ ║ ║ │ ╟○ $_ :decl(param)
    ║ ║ ║ │ ╙─bind &infix:<:=>  ««":="
    ║ ║ ║ │   ├○ $out
    ║ ║ ║ │   └─concat &infix:<~>  ««"~"
    ║ ║ ║ │     ├○ $out
    ║ ║ ║ │     └○ $_
    ║ ║ ║ └◙ IVal 1 :named("nohandler")
    ║ ║ ╙─call &say  ««"$out"
    ║ ║   └○ $out
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my $path;\n        my $file_name := nqp:"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $module_name :decl(param)
    ║ ║ ╟○ @search_paths :decl(param)
    ║ ║ ╟○ $ext :decl(param) :named("ext")
    ║ ║ ╟─bind  ««"$path"
    ║ ║ ║ ├○ $path :decl(var)
    ║ ║ ║ └◙ WVal NQPMu
    ║ ║ ╟○ $file_name :decl(var)
    ║ ║ ╟○ $path
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$file_name := nqp::join('/', nqp::split('::', $modu"...
    ║ ║ ║ ├○ $file_name
    ║ ║ ║ └─concat &infix:<~>  ««"~"
    ║ ║ ║   ├─join  ««"nqp::join('/', nqp::split('::', $module_name))"
    ║ ║ ║   │ ├◙ SVal "/"
    ║ ║ ║   │ └─split  ««"nqp::split('::', $module_name)"
    ║ ║ ║   │   ├◙ SVal "::"
    ║ ║ ║   │   └○ $module_name
    ║ ║ ║   └─concat
    ║ ║ ║     ├◙ SVal "."
    ║ ║ ║     └○ $ext
    ║ ║ ╟─for  ««"@search_paths {\n            $path := \"$_/$file_na"...
    ║ ║ ║ ├○ @search_paths
    ║ ║ ║ └─:Block :blocktype(immediate)  ««"{\n            $path := \"$_/$file_name\";\n       "...
    ║ ║ ║   ╟○ $_ :decl(param)
    ║ ║ ║   ╟─bind &infix:<:=>  ««":="
    ║ ║ ║   ║ ├○ $path
    ║ ║ ║   ║ └─concat
    ║ ║ ║   ║   ├─concat
    ║ ║ ║   ║   │ ├○ $_
    ║ ║ ║   ║   │ └◙ SVal "/"
    ║ ║ ║   ║   └○ $file_name
    ║ ║ ║   ╟─if  ««"last if nqp::stat($path, nqp::const::STAT_EXISTS)\n"...
    ║ ║ ║   ║ ├─stat  ««"nqp::stat($path, nqp::const::STAT_EXISTS)"
    ║ ║ ║   ║ │ ├○ $path
    ║ ║ ║   ║ │ └─const STAT_EXISTS
    ║ ║ ║   ║ └─control last
    ║ ║ ║   ╙─bind &infix:<:=>  ««":="
    ║ ║ ║     ├○ $path
    ║ ║ ║     └─null  ««"nqp::null"
    ║ ║ ╙○ $path
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        self.find_file($module_name, @!user_srcp"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $module_name :decl(param)
    ║ ║ ╟○ $ext :decl(param) :named("ext")
    ║ ║ ╙─callmethod find_file  ««"$module_name, @!user_srcpaths, :$ext"
    ║ ║   ├─decont
    ║ ║   │ └○ self
    ║ ║   ├○ $module_name
    ║ ║   ├○ attribute @!user_srcpaths
    ║ ║   │ ├─decont
    ║ ║   │ │ └○ self
    ║ ║   │ └◙ WVal SmartCompiler
    ║ ║   └○ $ext :named("ext")
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n            my $loader := nqp::getcurhllsym('Mod"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $module_name :decl(param)
    ║ ║ ╟○ $ext :decl(param) :named("ext")
    ║ ║ ╟○ $with-nqplib :decl(param) :named("with-nqplib") :default(WVal NQPMu)
    ║ ║ ╟○ $loader :decl(var)
    ║ ║ ╟○ @module_paths :decl(var)
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$loader := nqp::getcurhllsym('ModuleLoader')"
    ║ ║ ║ ├○ $loader
    ║ ║ ║ └─getcurhllsym  ««"nqp::getcurhllsym('ModuleLoader')"
    ║ ║ ║   └◙ SVal "ModuleLoader"
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@module_paths := $loader.search_path('module-path')"
    ║ ║ ║ ├○ @module_paths
    ║ ║ ║ └─callmethod search_path  ««"'module-path'"
    ║ ║ ║   ├○ $loader
    ║ ║ ║   └◙ SVal "module-path"
    ║ ║ ╟─if  ««"$with-nqplib {\n                @module_paths.unshi"...
    ║ ║ ║ ├○ $with-nqplib
    ║ ║ ║ └─callmethod unshift  ««"nqp::backendconfig()<prefix> ~ '/languages/nqp/lib'"
    ║ ║ ║   ├○ @module_paths
    ║ ║ ║   └─concat &infix:<~>  ««"~"
    ║ ║ ║     ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║     │ ├─backendconfig  ««"nqp::backendconfig()"
    ║ ║ ║     │ └◙ SVal "prefix"
    ║ ║ ║     └◙ SVal "/languages/nqp/lib"
    ║ ║ ╙─callmethod find_file  ««"$module_name, @module_paths, :$ext"
    ║ ║   ├─decont
    ║ ║   │ └○ self
    ║ ║   ├○ $module_name
    ║ ║   ├○ @module_paths
    ║ ║   └○ $ext :named("ext")
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my $out;\n        my $src_path := self.f"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $module_name :decl(param)
    ║ ║ ╟○ @on_behalf :decl(param)
    ║ ║ ╟─bind  ««"$out"
    ║ ║ ║ ├○ $out :decl(var)
    ║ ║ ║ └◙ WVal NQPMu
    ║ ║ ╟○ $src_path :decl(var)
    ║ ║ ╙─lexotic RETURN
    ║ ║   └─:Stmts  ««"\n        my $out;\n        my $src_path := self.fi"...
    ║ ║     ├○ $out
    ║ ║     ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src_path := self.find_src($module_name, :ext<nqp>)"
    ║ ║     │ ├○ $src_path
    ║ ║     │ └─callmethod find_src  ««"$module_name, :ext<nqp>"
    ║ ║     │   ├─decont
    ║ ║     │   │ └○ self
    ║ ║     │   ├○ $module_name
    ║ ║     │   └◙ SVal "nqp" :named("ext")
    ║ ║     └─if  ««"$src_path {\n            my $bc_path := self.find_b"...
    ║ ║       ├○ $src_path
    ║ ║       ├─:Block :blocktype(immediate)  ««"{\n            my $bc_path := self.find_bytecode($m"...
    ║ ║       │ ╟○ $bc_path :decl(var)
    ║ ║       │ ╟○ $clone :decl(var)
    ║ ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$bc_path := self.find_bytecode($module_name, :ext<m"...
    ║ ║       │ ║ ├○ $bc_path
    ║ ║       │ ║ └─callmethod find_bytecode  ««"$module_name, :ext<moarvm>"
    ║ ║       │ ║   ├─decont
    ║ ║       │ ║   │ └○ self
    ║ ║       │ ║   ├○ $module_name
    ║ ║       │ ║   └◙ SVal "moarvm" :named("ext")
    ║ ║       │ ╟─if  ««"$bc_path {\n                my $src_time := nqp::st"...
    ║ ║       │ ║ ├○ $bc_path
    ║ ║       │ ║ └─:Block :blocktype(immediate)  ««"{\n                my $src_time := nqp::stat($src_p"...
    ║ ║       │ ║   ╟○ $src_time :decl(var)
    ║ ║       │ ║   ╟○ $bc_time :decl(var)
    ║ ║       │ ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src_time := nqp::stat($src_path, nqp::const::STAT_"...
    ║ ║       │ ║   ║ ├○ $src_time
    ║ ║       │ ║   ║ └─stat  ««"nqp::stat($src_path, nqp::const::STAT_MODIFYTIME)"
    ║ ║       │ ║   ║   ├○ $src_path
    ║ ║       │ ║   ║   └─const STAT_MODIFYTIME
    ║ ║       │ ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$bc_time  := nqp::stat($bc_path,  nqp::const::STAT_"...
    ║ ║       │ ║   ║ ├○ $bc_time
    ║ ║       │ ║   ║ └─stat  ««"nqp::stat($bc_path,  nqp::const::STAT_MODIFYTIME)"
    ║ ║       │ ║   ║   ├○ $bc_path
    ║ ║       │ ║   ║   └─const STAT_MODIFYTIME
    ║ ║       │ ║   ╙─if  ««"$src_time < $bc_time {\n                    return "...
    ║ ║       │ ║     ├─islt_n &infix:<<>  ««"<"
    ║ ║       │ ║     │ ├○ $src_time
    ║ ║       │ ║     │ └○ $bc_time
    ║ ║       │ ║     └─call RETURN
    ║ ║       │ ║       └○ $bc_path
    ║ ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$clone := nqp::clone(self)"
    ║ ║       │ ║ ├○ $clone
    ║ ║       │ ║ └─clone  ««"nqp::clone(self)"
    ║ ║       │ ║   └─decont
    ║ ║       │ ║     └○ self
    ║ ║       │ ╙─call RETURN
    ║ ║       │   └─callmethod compileFile  ««"$src_path, :target<mbc>"
    ║ ║       │     ├○ $clone
    ║ ║       │     ├○ $src_path
    ║ ║       │     └◙ SVal "mbc" :named("target")
    ║ ║       └─call RETURN
    ║ ║         └─callmethod find_bytecode  ««"$module_name, :ext<moarvm>, :with-nqplib"
    ║ ║           ├─decont
    ║ ║           │ └○ self
    ║ ║           ├○ $module_name
    ║ ║           ├◙ SVal "moarvm" :named("ext")
    ║ ║           └◙ IVal 1 :named("with-nqplib")
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my %results := {};\n        my sub doit("...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $node :decl(param)
    ║ ║ ╟○ %results :decl(var)
    ║ ║ ╟─bind
    ║ ║ ║ ├○ &doit :decl(var)
    ║ ║ ║ └─:Block  ««"{\n            nqp::die(\"collect_stats expects a Q"...
    ║ ║ ║   ╟○ $node :decl(param)
    ║ ║ ║   ╟○ $HOWname :decl(var)
    ║ ║ ║   ╟─unless  ««"nqp::die(\"collect_stats expects a QAST::Node - got"...
    ║ ║ ║   ║ ├─call &istype  ««"$node, QAST::Node"
    ║ ║ ║   ║ │ ├○ $node
    ║ ║ ║   ║ │ └◙ WVal QAST::Node
    ║ ║ ║   ║ └─die  ««"nqp::die(\"collect_stats expects a QAST::Node - got"...
    ║ ║ ║   ║   └─concat &infix:<~>  ««"~"
    ║ ║ ║   ║     ├◙ SVal "collect_stats expects a QAST::Node - got "
    ║ ║ ║   ║     └─call &describe  ««"$node"
    ║ ║ ║   ║       └○ $node
    ║ ║ ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$HOWname := $node.HOW.name($node)"
    ║ ║ ║   ║ ├○ $HOWname
    ║ ║ ║   ║ └─callmethod name  ««"$node"
    ║ ║ ║   ║   ├─how  ««".HOW"
    ║ ║ ║   ║   │ └○ $node
    ║ ║ ║   ║   └○ $node
    ║ ║ ║   ╟─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║   ├○ %results
    ║ ║ ║   ║   └◙ SVal "Node"
    ║ ║ ║   ╟─if  ««"istype($node, QAST::Block) {\n                %resu"...
    ║ ║ ║   ║ ├─call &istype  ««"$node, QAST::Block"
    ║ ║ ║   ║ │ ├○ $node
    ║ ║ ║   ║ │ └◙ WVal QAST::Block
    ║ ║ ║   ║ ├─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║ │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║ │   ├○ %results
    ║ ║ ║   ║ │   └◙ SVal "Block"
    ║ ║ ║   ║ └─if  ««"istype($node, QAST::Stmt, QAST::Stmts) {\n         "...
    ║ ║ ║   ║   ├─call &istype  ««"$node, QAST::Stmt, QAST::Stmts"
    ║ ║ ║   ║   │ ├○ $node
    ║ ║ ║   ║   │ ├◙ WVal QAST::Stmt
    ║ ║ ║   ║   │ └◙ WVal QAST::Stmts
    ║ ║ ║   ║   ├─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║   │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║   │   ├○ %results
    ║ ║ ║   ║   │   └◙ SVal "Stmt(s)"
    ║ ║ ║   ║   └─if  ««"istype($node, QAST::Op) {\n                my $op :"...
    ║ ║ ║   ║     ├─call &istype  ««"$node, QAST::Op"
    ║ ║ ║   ║     │ ├○ $node
    ║ ║ ║   ║     │ └◙ WVal QAST::Op
    ║ ║ ║   ║     ├─:Block :blocktype(immediate)  ««"{\n                my $op := $node.op;\n    #      "...
    ║ ║ ║   ║     │ ╟○ $op :decl(var)
    ║ ║ ║   ║     │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$op := $node.op"
    ║ ║ ║   ║     │ ║ ├○ $op
    ║ ║ ║   ║     │ ║ └─callmethod op  ««".op"
    ║ ║ ║   ║     │ ║   └○ $node
    ║ ║ ║   ║     │ ╟─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║   ├○ %results
    ║ ║ ║   ║     │ ║   └◙ SVal "op"
    ║ ║ ║   ║     │ ╟─if  ««"%results<list>++        if  $op eq 'list'"
    ║ ║ ║   ║     │ ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │ ║ │ ├○ $op
    ║ ║ ║   ║     │ ║ │ └◙ SVal "list"
    ║ ║ ║   ║     │ ║ └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║     ├○ %results
    ║ ║ ║   ║     │ ║     └◙ SVal "list"
    ║ ║ ║   ║     │ ╟─if  ««"%results<hash>++        if  $op eq 'hash'"
    ║ ║ ║   ║     │ ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │ ║ │ ├○ $op
    ║ ║ ║   ║     │ ║ │ └◙ SVal "hash"
    ║ ║ ║   ║     │ ║ └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║     ├○ %results
    ║ ║ ║   ║     │ ║     └◙ SVal "hash"
    ║ ║ ║   ║     │ ╟─if  ««"%results<bind>++        if  $op eq 'bind'"
    ║ ║ ║   ║     │ ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │ ║ │ ├○ $op
    ║ ║ ║   ║     │ ║ │ └◙ SVal "bind"
    ║ ║ ║   ║     │ ║ └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║     ├○ %results
    ║ ║ ║   ║     │ ║     └◙ SVal "bind"
    ║ ║ ║   ║     │ ╟─if  ««"%results<call>++        if  $op eq 'call'"
    ║ ║ ║   ║     │ ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │ ║ │ ├○ $op
    ║ ║ ║   ║     │ ║ │ └◙ SVal "call"
    ║ ║ ║   ║     │ ║ └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║     ├○ %results
    ║ ║ ║   ║     │ ║     └◙ SVal "call"
    ║ ║ ║   ║     │ ╟─if  ««"%results<callstatic>++  if  $op eq 'callstatic'"
    ║ ║ ║   ║     │ ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │ ║ │ ├○ $op
    ║ ║ ║   ║     │ ║ │ └◙ SVal "callstatic"
    ║ ║ ║   ║     │ ║ └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║     ├○ %results
    ║ ║ ║   ║     │ ║     └◙ SVal "callstatic"
    ║ ║ ║   ║     │ ╟─if  ««"%results<callmethod>++  if  $op eq 'callmethod'"
    ║ ║ ║   ║     │ ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │ ║ │ ├○ $op
    ║ ║ ║   ║     │ ║ │ └◙ SVal "callmethod"
    ║ ║ ║   ║     │ ║ └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │ ║     ├○ %results
    ║ ║ ║   ║     │ ║     └◙ SVal "callmethod"
    ║ ║ ║   ║     │ ╙─if  ««"%results<takeclosure>++ if  $op eq 'takeclosure'"
    ║ ║ ║   ║     │   ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║   ║     │   │ ├○ $op
    ║ ║ ║   ║     │   │ └◙ SVal "takeclosure"
    ║ ║ ║   ║     │   └─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║     │     └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║     │       ├○ %results
    ║ ║ ║   ║     │       └◙ SVal "takeclosure"
    ║ ║ ║   ║     └─if  ««"istype($node, QAST::Var) {\n                %result"...
    ║ ║ ║   ║       ├─call &istype  ««"$node, QAST::Var"
    ║ ║ ║   ║       │ ├○ $node
    ║ ║ ║   ║       │ └◙ WVal QAST::Var
    ║ ║ ║   ║       ├─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║       │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║       │   ├○ %results
    ║ ║ ║   ║       │   └◙ SVal "Var"
    ║ ║ ║   ║       └─if  ««"istype($node, QAST::IVal) {\n                %resul"...
    ║ ║ ║   ║         ├─call &istype  ««"$node, QAST::IVal"
    ║ ║ ║   ║         │ ├○ $node
    ║ ║ ║   ║         │ └◙ WVal QAST::IVal
    ║ ║ ║   ║         ├─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║         │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║         │   ├○ %results
    ║ ║ ║   ║         │   └◙ SVal "IVal"
    ║ ║ ║   ║         └─if  ««"istype($node, QAST::NVal) {\n                %resul"...
    ║ ║ ║   ║           ├─call &istype  ««"$node, QAST::NVal"
    ║ ║ ║   ║           │ ├○ $node
    ║ ║ ║   ║           │ └◙ WVal QAST::NVal
    ║ ║ ║   ║           ├─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║           │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║           │   ├○ %results
    ║ ║ ║   ║           │   └◙ SVal "NVal"
    ║ ║ ║   ║           └─if  ««"istype($node, QAST::SVal) {\n                %resul"...
    ║ ║ ║   ║             ├─call &istype  ««"$node, QAST::SVal"
    ║ ║ ║   ║             │ ├○ $node
    ║ ║ ║   ║             │ └◙ WVal QAST::SVal
    ║ ║ ║   ║             └─:Stmts  ««"{\n                %results<SVal>++;\n             "...
    ║ ║ ║   ║               ├─postinc &postfix:<++>  ««"++"
    ║ ║ ║   ║               │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║               │   ├○ %results
    ║ ║ ║   ║               │   └◙ SVal "SVal"
    ║ ║ ║   ║               └─bind &infix:<:=>  ««":="
    ║ ║ ║   ║                 ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║                 │ ├○ %results
    ║ ║ ║   ║                 │ └◙ SVal "SValChars"
    ║ ║ ║   ║                 └─add_n &infix:<+>  ««"+"
    ║ ║ ║   ║                   ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   ║                   │ ├○ %results
    ║ ║ ║   ║                   │ └◙ SVal "SValChars"
    ║ ║ ║   ║                   └─chars  ««"nqp::chars($node.value)"
    ║ ║ ║   ║                     └─callmethod value  ««".value"
    ║ ║ ║   ║                       └○ $node
    ║ ║ ║   ╙─for  ««"$node.list {\n                doit($_);\n            }"
    ║ ║ ║     ├─callmethod list  ««".list"
    ║ ║ ║     │ └○ $node
    ║ ║ ║     ├─:Block :blocktype(immediate)  ««"{\n                doit($_);\n            }"
    ║ ║ ║     │ ╟○ $_ :decl(param)
    ║ ║ ║     │ ╙─call &doit  ««"$_"
    ║ ║ ║     │   └○ $_
    ║ ║ ║     └◙ IVal 1 :named("nohandler")
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%results := {}"
    ║ ║ ║ ├○ %results
    ║ ║ ║ └─hash
    ║ ║ ╟○ &doit
    ║ ║ ╟─call &doit  ««"$node"
    ║ ║ ║ └○ $node
    ║ ║ ╟─bind &infix:<:=>  ««":="
    ║ ║ ║ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║ │ ├○ %results
    ║ ║ ║ │ └◙ SVal "callish"
    ║ ║ ║ └─add_n &infix:<+>  ««"+"
    ║ ║ ║   ├─add_n &infix:<+>  ««"+"
    ║ ║ ║   │ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   │ │ ├○ %results
    ║ ║ ║   │ │ └◙ SVal "call"
    ║ ║ ║   │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   │   ├○ %results
    ║ ║ ║   │   └◙ SVal "callstatic"
    ║ ║ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║     ├○ %results
    ║ ║ ║     └◙ SVal "callmethod"
    ║ ║ ╟─bind &infix:<:=>  ««":="
    ║ ║ ║ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║ │ ├○ %results
    ║ ║ ║ │ └◙ SVal "val"
    ║ ║ ║ └─add_n &infix:<+>  ««"+"
    ║ ║ ║   ├─add_n &infix:<+>  ««"+"
    ║ ║ ║   │ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   │ │ ├○ %results
    ║ ║ ║   │ │ └◙ SVal "IVal"
    ║ ║ ║   │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║   │   ├○ %results
    ║ ║ ║   │   └◙ SVal "NVal"
    ║ ║ ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║     ├○ %results
    ║ ║ ║     └◙ SVal "SVal"
    ║ ║ ╙○ %results
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my $ast := $source.ast();\n        self."...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $source :decl(param)
    ║ ║ ╟○ %adverbs :decl(param) :named(1) :slurpy(1)
    ║ ║ ╟○ $ast :decl(var)
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$ast := $source.ast()"
    ║ ║ ║ ├○ $ast
    ║ ║ ║ └─callmethod ast  ««""
    ║ ║ ║   └○ $source
    ║ ║ ╟─unless  ««"self.panic(\"Unable to obtain AST from \" ~ $source"...
    ║ ║ ║ ├─callmethod ACCEPTS  ««"~~"
    ║ ║ ║ │ ├◙ WVal QAST::Node
    ║ ║ ║ │ └○ $ast
    ║ ║ ║ └─callmethod panic  ««"\"Unable to obtain AST from \" ~ $source.HOW.name($"...
    ║ ║ ║   ├─decont
    ║ ║ ║   │ └○ self
    ║ ║ ║   └─concat &infix:<~>  ««"~"
    ║ ║ ║     ├◙ SVal "Unable to obtain AST from "
    ║ ║ ║     └─callmethod name  ««"$source"
    ║ ║ ║       ├─how  ««".HOW"
    ║ ║ ║       │ └○ $source
    ║ ║ ║       └○ $source
    ║ ║ ╟─callmethod mixin  ««"$ast, StrByDump"
    ║ ║ ║ ├─how  ««".HOW"
    ║ ║ ║ │ └○ $ast
    ║ ║ ║ ├○ $ast
    ║ ║ ║ └◙ WVal StrByDump
    ║ ║ ╙○ $ast
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        self.log('ast_clean: ', self.user-progna"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $ast :decl(param)
    ║ ║ ╟○ %adverbs :decl(param) :named(1) :slurpy(1)
    ║ ║ ╟─callmethod log  ««"'ast_clean: ', self.user-progname, '...'"
    ║ ║ ║ ├─decont
    ║ ║ ║ │ └○ self
    ║ ║ ║ ├◙ SVal "ast_clean: "
    ║ ║ ║ ├─callmethod user-progname  ««".user-progname"
    ║ ║ ║ │ └─decont
    ║ ║ ║ │   └○ self
    ║ ║ ║ └◙ SVal "..."
    ║ ║ ╟─bind &infix:<:=>  ««":="
    ║ ║ ║ ├○ $ast
    ║ ║ ║ └─call &fix_var_attrs  ««"$ast"
    ║ ║ ║   └○ $ast
    ║ ║ ╟─bind &infix:<:=>  ««":="
    ║ ║ ║ ├○ $ast
    ║ ║ ║ └─call &drop_takeclosure  ««"$ast"
    ║ ║ ║   └○ $ast
    ║ ║ ╟─bind &infix:<:=>  ««":="
    ║ ║ ║ ├○ $ast
    ║ ║ ║ └─call &drop_Stmts  ««"$ast"
    ║ ║ ║   └○ $ast
    ║ ║ ╙○ $ast
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my %stats := self.collect_stats($ast);\n"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $ast :decl(param)
    ║ ║ ╟○ %adverbs :decl(param) :named(1) :slurpy(1)
    ║ ║ ╟○ %stats :decl(var)
    ║ ║ ╟○ @statskeyDefs :decl(var)
    ║ ║ ╟○ @statskeys :decl(var)
    ║ ║ ╟─bind
    ║ ║ ║ ├○ &svalPred :decl(var)
    ║ ║ ║ └─:Block  ««"{\n            -> $node { istype($node, QAST::SVal)"...
    ║ ║ ║   ╟○ $value :decl(param) :default((VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))) ((who) ($?PACKAGE)) (SVal "NO_VALUE"))
    ║ ║ ║   ╙─:Block  ««"{ istype($node, QAST::SVal) && ($value =:= NO_VALUE"...
    ║ ║ ║     ╟○ $node :decl(param)
    ║ ║ ║     ╙─if &infix:<&&>  ««"&&"
    ║ ║ ║       ├─call &istype  ««"$node, QAST::SVal"
    ║ ║ ║       │ ├○ $node
    ║ ║ ║       │ └◙ WVal QAST::SVal
    ║ ║ ║       └─unless &infix:<||>  ««"||"
    ║ ║ ║         ├─eqaddr &infix:<=:=>  ««"=:="
    ║ ║ ║         │ ├○ $value
    ║ ║ ║         │ └○┬VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))
    ║ ║ ║         │   ├─who
    ║ ║ ║         │   │ └○ $?PACKAGE
    ║ ║ ║         │   └◙ SVal "NO_VALUE"
    ║ ║ ║         └─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║           ├─callmethod value  ««".value"
    ║ ║ ║           │ └○ $node
    ║ ║ ║           └○ $value
    ║ ║ ╟─bind
    ║ ║ ║ ├○ &ivalPred :decl(var)
    ║ ║ ║ └─:Block  ««"{\n            -> $node { istype($node, QAST::IVal)"...
    ║ ║ ║   ╟○ $value :decl(param) :default((VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))) ((who) ($?PACKAGE)) (SVal "NO_VALUE"))
    ║ ║ ║   ╙─:Block  ««"{ istype($node, QAST::IVal) && ($value =:= NO_VALUE"...
    ║ ║ ║     ╟○ $node :decl(param)
    ║ ║ ║     ╙─if &infix:<&&>  ««"&&"
    ║ ║ ║       ├─call &istype  ««"$node, QAST::IVal"
    ║ ║ ║       │ ├○ $node
    ║ ║ ║       │ └◙ WVal QAST::IVal
    ║ ║ ║       └─unless &infix:<||>  ««"||"
    ║ ║ ║         ├─eqaddr &infix:<=:=>  ««"=:="
    ║ ║ ║         │ ├○ $value
    ║ ║ ║         │ └○┬VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))
    ║ ║ ║         │   ├─who
    ║ ║ ║         │   │ └○ $?PACKAGE
    ║ ║ ║         │   └◙ SVal "NO_VALUE"
    ║ ║ ║         └─iseq_n &infix:<==>  ««"=="
    ║ ║ ║           ├─callmethod value  ««".value"
    ║ ║ ║           │ └○ $node
    ║ ║ ║           └○ $value
    ║ ║ ╟─bind
    ║ ║ ║ ├○ &opPred :decl(var)
    ║ ║ ║ └─:Block  ««"{\n            -> $node { istype($node, QAST::Op) &"...
    ║ ║ ║   ╟○ $op :decl(param) :default((VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))) ((who) ($?PACKAGE)) (SVal "NO_VALUE"))
    ║ ║ ║   ╙─:Block  ««"{ istype($node, QAST::Op) && ($op =:= NO_VALUE || $"...
    ║ ║ ║     ╟○ $node :decl(param)
    ║ ║ ║     ╙─if &infix:<&&>  ««"&&"
    ║ ║ ║       ├─call &istype  ««"$node, QAST::Op"
    ║ ║ ║       │ ├○ $node
    ║ ║ ║       │ └◙ WVal QAST::Op
    ║ ║ ║       └─unless &infix:<||>  ««"||"
    ║ ║ ║         ├─eqaddr &infix:<=:=>  ««"=:="
    ║ ║ ║         │ ├○ $op
    ║ ║ ║         │ └○┬VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))
    ║ ║ ║         │   ├─who
    ║ ║ ║         │   │ └○ $?PACKAGE
    ║ ║ ║         │   └◙ SVal "NO_VALUE"
    ║ ║ ║         └─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║           ├─callmethod op  ««".op"
    ║ ║ ║           │ └○ $node
    ║ ║ ║           └○ $op
    ║ ║ ╟○ $findStatsHash :decl(var)
    ║ ║ ╟○ $infoHashDef :decl(var)
    ║ ║ ╟○ $infoHash :decl(var)
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%stats := self.collect_stats($ast)"
    ║ ║ ║ ├○ %stats
    ║ ║ ║ └─callmethod collect_stats  ««"$ast"
    ║ ║ ║   ├─decont
    ║ ║ ║   │ └○ self
    ║ ║ ║   └○ $ast
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@statskeyDefs := findDefs($ast, -> $var, @pathUp {\"...
    ║ ║ ║ ├○ @statskeyDefs
    ║ ║ ║ └─call &findDefs  ««"$ast, -> $var, @pathUp {\n            nqp::index($v"...
    ║ ║ ║   ├○ $ast
    ║ ║ ║   └─:Block  ««"{\n            nqp::index($var.name, 'STATS_') > -1"...
    ║ ║ ║     ╟○ $var :decl(param)
    ║ ║ ║     ╟○ @pathUp :decl(param)
    ║ ║ ║     ╙─isgt_n &infix:<>>  ««">"
    ║ ║ ║       ├─index  ««"nqp::index($var.name, 'STATS_')"
    ║ ║ ║       │ ├─callmethod name  ««".name"
    ║ ║ ║       │ │ └○ $var
    ║ ║ ║       │ └◙ SVal "STATS_"
    ║ ║ ║       └◙ IVal -1
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@statskeys := []"
    ║ ║ ║ ├○ @statskeys
    ║ ║ ║ └─list &circumfix:<[ ]>
    ║ ║ ╟─for  ««"@statskeyDefs {\n            my $v := $_[1][0];\n  "...
    ║ ║ ║ ├○ @statskeyDefs
    ║ ║ ║ ├─:Block :blocktype(immediate)  ««"{\n            my $v := $_[1][0];\n            if i"...
    ║ ║ ║ │ ╟○ $v :decl(var)
    ║ ║ ║ │ ╟○ $_ :decl(param)
    ║ ║ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$v := $_[1][0]"
    ║ ║ ║ │ ║ ├○ $v
    ║ ║ ║ │ ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║ ║ ║ │ ║   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║ ║ ║ │ ║   │ ├○ $_
    ║ ║ ║ │ ║   │ └◙ IVal 1
    ║ ║ ║ │ ║   └◙ IVal 0
    ║ ║ ║ │ ╙─if  ««"istype($v, QAST::SVal, QAST::IVal, QAST::NVal) {\n "...
    ║ ║ ║ │   ├─call &istype  ««"$v, QAST::SVal, QAST::IVal, QAST::NVal"
    ║ ║ ║ │   │ ├○ $v
    ║ ║ ║ │   │ ├◙ WVal QAST::SVal
    ║ ║ ║ │   │ ├◙ WVal QAST::IVal
    ║ ║ ║ │   │ └◙ WVal QAST::NVal
    ║ ║ ║ │   └─callmethod push  ««"$v.value"
    ║ ║ ║ │     ├○ @statskeys
    ║ ║ ║ │     └─callmethod value  ««".value"
    ║ ║ ║ │       └○ $v
    ║ ║ ║ └◙ IVal 1 :named("nohandler")
    ║ ║ ╟○ &svalPred
    ║ ║ ╟○ &ivalPred
    ║ ║ ╟○ &opPred
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$findStatsHash := findValueNodeInHash(svalPred('sta"...
    ║ ║ ║ ├○ $findStatsHash
    ║ ║ ║ └─call &findValueNodeInHash  ««"svalPred('stats'), opPred('hash')"
    ║ ║ ║   ├─call &svalPred  ««"'stats'"
    ║ ║ ║   │ └◙ SVal "stats"
    ║ ║ ║   └─call &opPred  ««"'hash'"
    ║ ║ ║     └◙ SVal "hash"
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$infoHashDef := findDef($ast, -> $var, @pathUp {\n "...
    ║ ║ ║ ├○ $infoHashDef
    ║ ║ ║ └─call &findDef  ««"$ast, -> $var, @pathUp {\n            if $var.name "...
    ║ ║ ║   ├○ $ast
    ║ ║ ║   └─:Block  ««"{\n            if $var.name eq '%info' {\n         "...
    ║ ║ ║     ╟○ $var :decl(param)
    ║ ║ ║     ╟○ @pathUp :decl(param)
    ║ ║ ║     ╙─if  ««"$var.name eq '%info' {\n                $findStatsH"...
    ║ ║ ║       ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║       │ ├─callmethod name  ««".name"
    ║ ║ ║       │ │ └○ $var
    ║ ║ ║       │ └◙ SVal "%info"
    ║ ║ ║       └─call  ««"@pathUp[0][1]"
    ║ ║ ║         ├○ $findStatsHash
    ║ ║ ║         └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║ ║ ║           ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║ ║ ║           │ ├○ @pathUp
    ║ ║ ║           │ └◙ IVal 0
    ║ ║ ║           └◙ IVal 1
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$infoHash := $findStatsHash($infoHashDef[1])"
    ║ ║ ║ ├○ $infoHash
    ║ ║ ║ └─call  ««"$infoHashDef[1]"
    ║ ║ ║   ├○ $findStatsHash
    ║ ║ ║   └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║ ║ ║     ├○ $infoHashDef
    ║ ║ ║     └◙ IVal 1
    ║ ║ ╟─call &say  ««"'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>' ~ istype($in"...
    ║ ║ ║ └─concat &infix:<~>  ««"~"
    ║ ║ ║   ├◙ SVal ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    ║ ║ ║   └─call &istype  ««"$infoHash, QAST::Op"
    ║ ║ ║     ├○ $infoHash
    ║ ║ ║     └◙ WVal QAST::Op
    ║ ║ ╟─if  ««"istype($infoHash, QAST::Op) && ($infoHash.op eq 'ha"...
    ║ ║ ║ ├─if &infix:<&&>  ««"&&"
    ║ ║ ║ │ ├─call &istype  ««"$infoHash, QAST::Op"
    ║ ║ ║ │ │ ├○ $infoHash
    ║ ║ ║ │ │ └◙ WVal QAST::Op
    ║ ║ ║ │ └─iseq_s &infix:<eq>  ««"eq"
    ║ ║ ║ │   ├─callmethod op  ««".op"
    ║ ║ ║ │   │ └○ $infoHash
    ║ ║ ║ │   └◙ SVal "hash"
    ║ ║ ║ ├─:Block :blocktype(immediate)  ««"{\n            my $findStatNode := -> $statKey {\n "...
    ║ ║ ║ │ ╟○ $findStatNode :decl(var)
    ║ ║ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$findStatNode := -> $statKey {\n                fin"...
    ║ ║ ║ │ ║ ├○ $findStatNode
    ║ ║ ║ │ ║ └─:Block  ««"{\n                findValueNodeInHash(svalPred($st"...
    ║ ║ ║ │ ║   ╟○ $statKey :decl(param)
    ║ ║ ║ │ ║   ╙─call &findValueNodeInHash  ««"svalPred($statKey), ivalPred(), $infoHash"
    ║ ║ ║ │ ║     ├─call &svalPred  ««"$statKey"
    ║ ║ ║ │ ║     │ └○ $statKey
    ║ ║ ║ │ ║     ├─call &ivalPred  ««""
    ║ ║ ║ │ ║     └○ $infoHash
    ║ ║ ║ │ ╟─for  ««"@statskeys {\n                my $node := $findStat"...
    ║ ║ ║ │ ║ ├○ @statskeys
    ║ ║ ║ │ ║ ├─:Block :blocktype(immediate)  ««"{\n                my $node := $findStatNode($_);\n"...
    ║ ║ ║ │ ║ │ ╟○ $node :decl(var)
    ║ ║ ║ │ ║ │ ╟○ $_ :decl(param)
    ║ ║ ║ │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$node := $findStatNode($_)"
    ║ ║ ║ │ ║ │ ║ ├○ $node
    ║ ║ ║ │ ║ │ ║ └─call  ««"$_"
    ║ ║ ║ │ ║ │ ║   ├○ $findStatNode
    ║ ║ ║ │ ║ │ ║   └○ $_
    ║ ║ ║ │ ║ │ ╙─if  ««"$node && nqp::existskey(%stats, $_) {\n            "...
    ║ ║ ║ │ ║ │   ├─if &infix:<&&>  ««"&&"
    ║ ║ ║ │ ║ │   │ ├○ $node
    ║ ║ ║ │ ║ │   │ └─existskey  ««"nqp::existskey(%stats, $_)"
    ║ ║ ║ │ ║ │   │   ├○ %stats
    ║ ║ ║ │ ║ │   │   └○ $_
    ║ ║ ║ │ ║ │   └─callmethod value  ««"%stats{$_}"
    ║ ║ ║ │ ║ │     ├○ $node
    ║ ║ ║ │ ║ │     └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║ ║ │ ║ │       ├○ %stats
    ║ ║ ║ │ ║ │       └○ $_
    ║ ║ ║ │ ║ └◙ IVal 1 :named("nohandler")
    ║ ║ ║ │ ╙─call &say  ««"dump($infoHashDef)"
    ║ ║ ║ │   └─call &dump  ««"$infoHashDef"
    ║ ║ ║ │     └○ $infoHashDef
    ║ ║ ║ └─:Stmts  ««"{\n            self.log('ast_stats WARNING: no %inf"...
    ║ ║ ║   ├─callmethod log  ««"'ast_stats WARNING: no %info hash found in AST of '"...
    ║ ║ ║   │ ├─decont
    ║ ║ ║   │ │ └○ self
    ║ ║ ║   │ ├◙ SVal "ast_stats WARNING: no %info hash found in AST of "
    ║ ║ ║   │ └─callmethod user-progname  ««".user-progname"
    ║ ║ ║   │   └─decont
    ║ ║ ║   │     └○ self
    ║ ║ ║   ├─callmethod log  ««"'ast_stats WARNING: ...dunno how to insert actual s"...
    ║ ║ ║   │ ├─decont
    ║ ║ ║   │ │ └○ self
    ║ ║ ║   │ └◙ SVal "ast_stats WARNING: ...dunno how to insert actual stats - which are:"
    ║ ║ ║   └─for  ««"%stats {\n                self.log('    ', nqp::ite"...
    ║ ║ ║     ├○ %stats
    ║ ║ ║     ├─:Block :blocktype(immediate)  ««"{\n                self.log('    ', nqp::iterkey_s("...
    ║ ║ ║     │ ╟○ $_ :decl(param)
    ║ ║ ║     │ ╙─callmethod log  ««"'    ', nqp::iterkey_s($_), ' = ', nqp::iterval($_)"
    ║ ║ ║     │   ├─decont
    ║ ║ ║     │   │ └○ self
    ║ ║ ║     │   ├◙ SVal "    "
    ║ ║ ║     │   ├─iterkey_s  ««"nqp::iterkey_s($_)"
    ║ ║ ║     │   │ └○ $_
    ║ ║ ║     │   ├◙ SVal " = "
    ║ ║ ║     │   └─iterval  ««"nqp::iterval($_)"
    ║ ║ ║     │     └○ $_
    ║ ║ ║     └◙ IVal 1 :named("nohandler")
    ║ ║ ╙○ $ast
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my $qastfileName := self.user-progname ~"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $ast :decl(param)
    ║ ║ ╟○ %adverbs :decl(param) :named(1) :slurpy(1)
    ║ ║ ╟○ $qastfileName :decl(var)
    ║ ║ ╙─lexotic RETURN
    ║ ║   └─:Stmts  ««"\n        my $qastfileName := self.user-progname ~ "...
    ║ ║     ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$qastfileName := self.user-progname ~ '.qast'"
    ║ ║     │ ├○ $qastfileName
    ║ ║     │ └─concat &infix:<~>  ««"~"
    ║ ║     │   ├─callmethod user-progname  ««".user-progname"
    ║ ║     │   │ └─decont
    ║ ║     │   │   └○ self
    ║ ║     │   └◙ SVal ".qast"
    ║ ║     ├─if  ««"return $ast\n            if %adverbs<output> eq $qa"...
    ║ ║     │ ├─iseq_s &infix:<eq>  ««"eq"
    ║ ║     │ │ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║ ║     │ │ │ ├○ %adverbs
    ║ ║     │ │ │ └◙ SVal "output"
    ║ ║     │ │ └○ $qastfileName
    ║ ║     │ └─call RETURN
    ║ ║     │   └○ $ast
    ║ ║     ├─call &spew  ««"$qastfileName, ~$ast"
    ║ ║     │ ├○ $qastfileName
    ║ ║     │ └─stringify &prefix:<~>  ««"~"
    ║ ║     │   └○ $ast
    ║ ║     └○ $ast
    ║ ╙─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        #self.log('write_bytecode: adverbs=' ~ d"...
    ║   ╟○ self :decl(param)
    ║   ╟○ $mast :decl(param)
    ║   ╟○ %adverbs :decl(param) :named(1) :slurpy(1)
    ║   ╟─if  ««"%adverbs<target> eq 'mbc' && %adverbs<output> {\n  "...
    ║   ║ ├─if &infix:<&&>  ««"&&"
    ║   ║ │ ├─iseq_s &infix:<eq>  ««"eq"
    ║   ║ │ │ ├○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║ │ │ │ ├○ %adverbs
    ║   ║ │ │ │ └◙ SVal "target"
    ║   ║ │ │ └◙ SVal "mbc"
    ║   ║ │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║ │   ├○ %adverbs
    ║   ║ │   └◙ SVal "output"
    ║   ║ ├─callmethod log  ««"'write_bytecode: omitted because of'\n             "...
    ║   ║ │ ├─decont
    ║   ║ │ │ └○ self
    ║   ║ │ └─concat &infix:<~>  ««"~"
    ║   ║ │   ├─concat &infix:<~>  ««"~"
    ║   ║ │   │ ├─concat &infix:<~>  ««"~"
    ║   ║ │   │ │ ├─concat &infix:<~>  ««"~"
    ║   ║ │   │ │ │ ├─concat &infix:<~>  ««"~"
    ║   ║ │   │ │ │ │ ├─concat &infix:<~>  ««"~"
    ║   ║ │   │ │ │ │ │ ├◙ SVal "write_bytecode: omitted because of"
    ║   ║ │   │ │ │ │ │ └◙ SVal " :target(\""
    ║   ║ │   │ │ │ │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║ │   │ │ │ │   ├○ %adverbs
    ║   ║ │   │ │ │ │   └◙ SVal "target"
    ║   ║ │   │ │ │ └◙ SVal "\")"
    ║   ║ │   │ │ └◙ SVal " and :output(\""
    ║   ║ │   │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║ │   │   ├○ %adverbs
    ║   ║ │   │   └◙ SVal "output"
    ║   ║ │   └◙ SVal "\")"
    ║   ║ └─:Block :blocktype(immediate)  ««"{\n            my $assmbler := nqp::getcomp('MAST')"...
    ║   ║   ╟○ $assmbler :decl(var)
    ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$assmbler := nqp::getcomp('MAST')"
    ║   ║   ║ ├○ $assmbler
    ║   ║   ║ └─getcomp  ««"nqp::getcomp('MAST')"
    ║   ║   ║   └◙ SVal "MAST"
    ║   ║   ╟─callmethod assemble_to_file  ««"$mast, self.user_binname"
    ║   ║   ║ ├○ $assmbler
    ║   ║   ║ ├○ $mast
    ║   ║   ║ └─callmethod user_binname  ««".user_binname"
    ║   ║   ║   └─decont
    ║   ║   ║     └○ self
    ║   ║   ╙─callmethod log  ««"'write_bytecode: ' ~ describe($mast) ~ ' ~> ' ~ sel"...
    ║   ║     ├─decont
    ║   ║     │ └○ self
    ║   ║     └─concat &infix:<~>  ««"~"
    ║   ║       ├─concat &infix:<~>  ««"~"
    ║   ║       │ ├─concat &infix:<~>  ««"~"
    ║   ║       │ │ ├◙ SVal "write_bytecode: "
    ║   ║       │ │ └─call &describe  ««"$mast"
    ║   ║       │ │   └○ $mast
    ║   ║       │ └◙ SVal " ~> "
    ║   ║       └─callmethod user_binname  ««".user_binname"
    ║   ║         └─decont
    ║   ║           └○ self
    ║   ╙○ $mast
    ╟─:Block :blocktype(immediate)  ««"{\n    \n    method statement_control:sym<use>($/) "...
    ║ ╟○ $?PACKAGE :decl(static) :default((NQPActions, Type object))
    ║ ╟○ $?CLASS :decl(static) :default((NQPActions, Type object))
    ║ ╙─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my $out;\n\n        my @expPathUp := [];"...
    ║   ╟○ self :decl(param)
    ║   ╟○ $/ :decl(param)
    ║   ╟─bind  ««"$out"
    ║   ║ ├○ $out :decl(var)
    ║   ║ └◙ WVal NQPMu
    ║   ╟○ @expPathUp :decl(var)
    ║   ╟○ $export :decl(var)
    ║   ╟○ $super :decl(var)
    ║   ╟○ $out
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@expPathUp := []"
    ║   ║ ├○ @expPathUp
    ║   ║ └─list &circumfix:<[ ]>
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$export := findPath(-> $node, @pathUp {\n          "...
    ║   ║ ├○ $export
    ║   ║ └─call &findPath  ««"-> $node, @pathUp {\n            istype($node, QAST"...
    ║   ║   ├─:Block  ««"{\n            istype($node, QAST::Var) && ($node.n"...
    ║   ║   │ ╟○ $node :decl(param)
    ║   ║   │ ╟○ @pathUp :decl(param)
    ║   ║   │ ╙─unless &infix:<||>  ««"||"
    ║   ║   │   ├─if &infix:<&&>  ««"&&"
    ║   ║   │   │ ├─if &infix:<&&>  ««"&&"
    ║   ║   │   │ │ ├─call &istype  ««"$node, QAST::Var"
    ║   ║   │   │ │ │ ├○ $node
    ║   ║   │   │ │ │ └◙ WVal QAST::Var
    ║   ║   │   │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │ │   ├─callmethod name  ««".name"
    ║   ║   │   │ │   │ └○ $node
    ║   ║   │   │ │   └◙ SVal "EXPORT"
    ║   ║   │   │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   │   │   ├─callmethod decl  ««".decl"
    ║   ║   │   │   │ └○ $node
    ║   ║   │   │   └◙ SVal "static"
    ║   ║   │   └─callmethod list  ««".list"
    ║   ║   │     └○ $node
    ║   ║   ├○┬VarWithFallback contextual $*UNIT :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$UNIT")) ((die_s) (SVal "Contextual $*UNIT not found")))
    ║   ║   └○ @expPathUp
    ║   ╟─if  ««"$export {\n            my $deps := findPath(-> $nod"...
    ║   ║ ├○ $export
    ║   ║ └─:Block :blocktype(immediate)  ««"{\n            my $deps := findPath(-> $node, @path"...
    ║   ║   ╟○ $deps :decl(var)
    ║   ║   ╟○ $depOut :decl(var)
    ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$deps := findPath(-> $node, @pathUp {\n            "...
    ║   ║   ║ ├○ $deps
    ║   ║   ║ └─call &findPath  ««"-> $node, @pathUp {\n                if (+@pathUp >"...
    ║   ║   ║   ├─:Block  ««"{\n                if (+@pathUp > 1) && @pathUp[1] "...
    ║   ║   ║   │ ╟○ $node :decl(param)
    ║   ║   ║   │ ╟○ @pathUp :decl(param)
    ║   ║   ║   │ ╙─if  ««"(+@pathUp > 1) && @pathUp[1] =:= @expPathUp[0] {\n "...
    ║   ║   ║   │   ├─if &infix:<&&>  ««"&&"
    ║   ║   ║   │   │ ├─isgt_n &infix:<>>  ««">"
    ║   ║   ║   │   │ │ ├─numify &prefix:<+>  ««"+"
    ║   ║   ║   │   │ │ │ └○ @pathUp
    ║   ║   ║   │   │ │ └◙ IVal 1
    ║   ║   ║   │   │ └─eqaddr &infix:<=:=>  ««"=:="
    ║   ║   ║   │   │   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   ║   │   │   │ ├○ @pathUp
    ║   ║   ║   │   │   │ └◙ IVal 1
    ║   ║   ║   │   │   └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   ║   │   │     ├○ @expPathUp
    ║   ║   ║   │   │     └◙ IVal 0
    ║   ║   ║   │   ├─:Block :blocktype(immediate)  ««"{\n                    my $parent := @pathUp[0];\n "...
    ║   ║   ║   │   │ ╟○ $parent :decl(var)
    ║   ║   ║   │   │ ╟○ $brother :decl(var)
    ║   ║   ║   │   │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$parent := @pathUp[0]"
    ║   ║   ║   │   │ ║ ├○ $parent
    ║   ║   ║   │   │ ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   ║   │   │ ║   ├○ @pathUp
    ║   ║   ║   │   │ ║   └◙ IVal 0
    ║   ║   ║   │   │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$brother := $parent[0]"
    ║   ║   ║   │   │ ║ ├○ $brother
    ║   ║   ║   │   │ ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   ║   │   │ ║   ├○ $parent
    ║   ║   ║   │   │ ║   └◙ IVal 0
    ║   ║   ║   │   │ ╙─unless &infix:<||>  ««"||"
    ║   ║   ║   │   │   ├─if &infix:<&&>  ««"&&"
    ║   ║   ║   │   │   │ ├─if &infix:<&&>  ««"&&"
    ║   ║   ║   │   │   │ │ ├─if &infix:<&&>  ««"&&"
    ║   ║   ║   │   │   │ │ │ ├─if &infix:<&&>  ««"&&"
    ║   ║   ║   │   │   │ │ │ │ ├─if &infix:<&&>  ««"&&"
    ║   ║   ║   │   │   │ │ │ │ │ ├─call &istype  ««"$node, QAST::Op"
    ║   ║   ║   │   │   │ │ │ │ │ │ ├○ $node
    ║   ║   ║   │   │   │ │ │ │ │ │ └◙ WVal QAST::Op
    ║   ║   ║   │   │   │ │ │ │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   ║   │   │   │ │ │ │ │   ├─callmethod op  ««".op"
    ║   ║   ║   │   │   │ │ │ │ │   │ └○ $node
    ║   ║   ║   │   │   │ │ │ │ │   └◙ SVal "list"
    ║   ║   ║   │   │   │ │ │ │ └─call &istype  ««"$parent, QAST::Op"
    ║   ║   ║   │   │   │ │ │ │   ├○ $parent
    ║   ║   ║   │   │   │ │ │ │   └◙ WVal QAST::Op
    ║   ║   ║   │   │   │ │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   ║   │   │   │ │ │   ├─callmethod op  ««".op"
    ║   ║   ║   │   │   │ │ │   │ └○ $parent
    ║   ║   ║   │   │   │ │ │   └◙ SVal "bind"
    ║   ║   ║   │   │   │ │ └─call &istype  ««"$brother, QAST::Var"
    ║   ║   ║   │   │   │ │   ├○ $brother
    ║   ║   ║   │   │   │ │   └◙ WVal QAST::Var
    ║   ║   ║   │   │   │ └─iseq_s &infix:<eq>  ««"eq"
    ║   ║   ║   │   │   │   ├─callmethod name  ««".name"
    ║   ║   ║   │   │   │   │ └○ $brother
    ║   ║   ║   │   │   │   └◙ SVal "@?DEPENDENCIES"
    ║   ║   ║   │   │   └─callmethod list  ««".list"
    ║   ║   ║   │   │     └○ $node
    ║   ║   ║   │   └─callmethod list  ««".list"
    ║   ║   ║   │     └○ $node
    ║   ║   ║   └○┬VarWithFallback contextual $*UNIT :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$UNIT")) ((die_s) (SVal "Contextual $*UNIT not found")))
    ║   ║   ╟─unless  ««"$deps {\n                $deps := QAST::Op.new(:op<"...
    ║   ║   ║ ├○ $deps
    ║   ║   ║ └─:Block :blocktype(immediate)  ««"{\n                $deps := QAST::Op.new(:op<list>)"...
    ║   ║   ║   ╟○ $depsBinding :decl(var)
    ║   ║   ║   ╟─bind &infix:<:=>  ««":="
    ║   ║   ║   ║ ├○ $deps
    ║   ║   ║   ║ └─callmethod new  ««":op<list>"
    ║   ║   ║   ║   ├◙ WVal QAST::Op
    ║   ║   ║   ║   └◙ SVal "list" :named("op")
    ║   ║   ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$depsBinding := QAST::Op.new(:op<bind>,\n          "...
    ║   ║   ║   ║ ├○ $depsBinding
    ║   ║   ║   ║ └─callmethod new  ««":op<bind>,\n                    QAST::Var.new(\n   "...
    ║   ║   ║   ║   ├◙ WVal QAST::Op
    ║   ║   ║   ║   ├◙ SVal "bind" :named("op")
    ║   ║   ║   ║   ├─callmethod new  ««"\n                        :name('@?DEPENDENCIES'),\"...
    ║   ║   ║   ║   │ ├◙ WVal QAST::Var
    ║   ║   ║   ║   │ ├◙ SVal "@?DEPENDENCIES" :named("name")
    ║   ║   ║   ║   │ ├◙ SVal "lexical" :named("scope")
    ║   ║   ║   ║   │ └◙ SVal "static" :named("decl")
    ║   ║   ║   ║   └○ $deps
    ║   ║   ║   ╙─callmethod push  ««"$depsBinding"
    ║   ║   ║     ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   ║     │ ├○ @expPathUp
    ║   ║   ║     │ └◙ IVal 0
    ║   ║   ║     └○ $depsBinding
    ║   ║   ╟─callmethod push  ««"QAST::SVal.new(:value($/<name>), :node($/))"
    ║   ║   ║ ├○ $deps
    ║   ║   ║ └─callmethod new  ««":value($/<name>), :node($/)"
    ║   ║   ║   ├◙ WVal QAST::SVal
    ║   ║   ║   ├○┬VarWithFallback associative :named("value") :fallback(WVal NQPMu)
    ║   ║   ║   │ ├○ $/
    ║   ║   ║   │ └◙ SVal "name"
    ║   ║   ║   └○ $/ :named("node")
    ║   ║   ╟─callmethod log  ««"$*COMPILER.user_progname, ' dependency: \"' ~ $/<na"...
    ║   ║   ║ ├○┬VarWithFallback contextual $*COMPILER :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$COMPILER")) ((die_s) (SVal "Contextual $*COMPILER not found")))
    ║   ║   ║ ├─callmethod user_progname  ««".user_progname"
    ║   ║   ║ │ └○┬VarWithFallback contextual $*COMPILER :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$COMPILER")) ((die_s) (SVal "Contextual $*COMPILER not found")))
    ║   ║   ║ └─concat &infix:<~>  ««"~"
    ║   ║   ║   ├─concat &infix:<~>  ««"~"
    ║   ║   ║   │ ├◙ SVal " dependency: \""
    ║   ║   ║   │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║   ║   │   ├○ $/
    ║   ║   ║   │   └◙ SVal "name"
    ║   ║   ║   └◙ SVal "\""
    ║   ║   ╙─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$depOut := $*COMPILER.compileDependency(~$/<name>, [])"
    ║   ║     ├○ $depOut
    ║   ║     └─callmethod compileDependency  ««"~$/<name>, []"
    ║   ║       ├○┬VarWithFallback contextual $*COMPILER :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$COMPILER")) ((die_s) (SVal "Contextual $*COMPILER not found")))
    ║   ║       ├─stringify &prefix:<~>  ««"~"
    ║   ║       │ └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║       │   ├○ $/
    ║   ║       │   └◙ SVal "name"
    ║   ║       └─list &circumfix:<[ ]>
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$super := nqp::findmethod(self.HOW.mro(self)[1], 's"...
    ║   ║ ├○ $super
    ║   ║ └─findmethod  ««"nqp::findmethod(self.HOW.mro(self)[1], 'statement_c"...
    ║   ║   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║   ║   │ ├─callmethod mro  ««"self"
    ║   ║   │ │ ├─how  ««".HOW"
    ║   ║   │ │ │ └─decont
    ║   ║   │ │ │   └○ self
    ║   ║   │ │ └─decont
    ║   ║   │ │   └○ self
    ║   ║   │ └◙ IVal 1
    ║   ║   └◙ SVal "statement_control:sym<use>"
    ║   ╟─bind &infix:<:=>  ««":="
    ║   ║ ├○ $out
    ║   ║ └─call  ««"self, $/"
    ║   ║   ├○ $super
    ║   ║   ├─decont
    ║   ║   │ └○ self
    ║   ║   └○ $/
    ║   ╟─callmethod node  ««"$/"
    ║   ║ ├○ $out
    ║   ║ └○ $/
    ║   ╟─callmethod annotate  ««"'use', ~$/<name>"
    ║   ║ ├○ $out
    ║   ║ ├◙ SVal "use"
    ║   ║ └─stringify &prefix:<~>  ««"~"
    ║   ║   └○┬VarWithFallback associative :fallback(WVal NQPMu)
    ║   ║     ├○ $/
    ║   ║     └◙ SVal "name"
    ║   ╙─callmethod make  ««"make "
    ║     ├○ $/
    ║     └○ $out
    ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$needsCompilation := 0"
    ║ ├○ $needsCompilation
    ║ └◙ IVal 0
    ╟─:Block :blocktype(immediate)  ««"{\n\n    method BUILD() {\n        self.language('n"...
    ║ ╟○ $?PACKAGE :decl(static) :default((NQPCompiler, Type object))
    ║ ╟○ $?CLASS :decl(static) :default((NQPCompiler, Type object))
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        self.language('nqp');\n        self.pars"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╙─lexotic RETURN
    ║ ║   └─:Stmts  ««"\n        self.language('nqp');\n        self.parse"...
    ║ ║     ├─callmethod language  ««"'nqp'"
    ║ ║     │ ├─decont
    ║ ║     │ │ └○ self
    ║ ║     │ └◙ SVal "nqp"
    ║ ║     ├─callmethod parsegrammar  ««"NQP::Grammar"
    ║ ║     │ ├─decont
    ║ ║     │ │ └○ self
    ║ ║     │ └◙ WVal NQP::Grammar
    ║ ║     ├─callmethod parseactions  ««"NQPActions"
    ║ ║     │ ├─decont
    ║ ║     │ │ └○ self
    ║ ║     │ └◙ WVal NQPActions
    ║ ║     └─call RETURN
    ║ ║       └─decont
    ║ ║         └○ self
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        my $*COMPILER := self;\n        my $pars"...
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $source :decl(param)
    ║ ║ ╟○ %adverbs :decl(param) :named(1) :slurpy(1)
    ║ ║ ╟○ $*COMPILER :decl(var)
    ║ ║ ╟○ $parse :decl(var)
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$*COMPILER := self"
    ║ ║ ║ ├○┬VarWithFallback contextual $*COMPILER :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$COMPILER")) ((die_s) (SVal "Contextual $*COMPILER not found")))
    ║ ║ ║ └─decont
    ║ ║ ║   └○ self
    ║ ║ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$parse := nqp::findmethod(self.HOW.mro(self)[1], 'p"...
    ║ ║ ║ ├○ $parse
    ║ ║ ║ └─findmethod  ««"nqp::findmethod(self.HOW.mro(self)[1], 'parse')"
    ║ ║ ║   ├○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║ ║ ║   │ ├─callmethod mro  ««"self"
    ║ ║ ║   │ │ ├─how  ««".HOW"
    ║ ║ ║   │ │ │ └─decont
    ║ ║ ║   │ │ │   └○ self
    ║ ║ ║   │ │ └─decont
    ║ ║ ║   │ │   └○ self
    ║ ║ ║   │ └◙ IVal 1
    ║ ║ ║   └◙ SVal "parse"
    ║ ║ ╙─call  ««"self, $source, |%adverbs"
    ║ ║   ├○ $parse
    ║ ║   ├─decont
    ║ ║   │ └○ self
    ║ ║   ├○ $source
    ║ ║   └○ %adverbs :flat(1) :named(1)
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{ 'nqpc' }"
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $value :decl(param) :default((VarWithFallback associative :fallback((ifnull) ((atkey) ((who) (WVal GLOBALish)) (SVal "NO_VALUE")) (WVal NQPMu))) ((who) ($?PACKAGE)) (SVal "NO_VALUE"))
    ║ ║ ╙◙ SVal "nqpc"
    ║ ╟─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        nqp::rethrow($error);\n    }"
    ║ ║ ╟○ self :decl(param)
    ║ ║ ╟○ $error :decl(param)
    ║ ║ ╙─rethrow  ««"nqp::rethrow($error)"
    ║ ║   └○ $error
    ║ ╙─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable), "code_obj", (NQPRoutine, invokable) )) :blocktype(declaration_static)  ««"{\n        # replace all backslashes with slashes\n"...
    ║   ╟○ self :decl(param)
    ║   ╟○ $src_path :decl(param)
    ║   ╟○ $target :decl(param) :named("target") :default(SVal "mbc")
    ║   ╟○ $stagestats :decl(param) :named("stagestats") :default(WVal NQPMu)
    ║   ╟○ $cwd :decl(var)
    ║   ╟○ $l :decl(var)
    ║   ╟○ $x :decl(var)
    ║   ╟○ $src_ext :decl(var)
    ║   ╟○ $i :decl(var)
    ║   ╟○ $src_name :decl(var)
    ║   ╟○ $src_dir :decl(var)
    ║   ╟○ $src_lib :decl(var)
    ║   ╟○ $vm_ext :decl(var)
    ║   ╟○ $vm_dir :decl(var)
    ║   ╟─bind  ««"$vm_path"
    ║   ║ ├○ $vm_path :decl(var)
    ║   ║ └◙ WVal NQPMu
    ║   ╟○ $ast_path :decl(var)
    ║   ╙─lexotic RETURN
    ║     └─:Stmts  ««"\n        # replace all backslashes with slashes\n "...
    ║       ├─bind &infix:<:=>  ««":="
    ║       │ ├○ $src_path
    ║       │ └─join  ««"nqp::join('/', nqp::split('\\\\', $src_path))"
    ║       │   ├◙ SVal "/"
    ║       │   └─split  ««"nqp::split('\\\\', $src_path)"
    ║       │     ├◙ SVal "\\"
    ║       │     └○ $src_path
    ║       ├─if  ««"!nqp::filereadable($src_path) {\n            #self."...
    ║       │ ├─falsey &prefix:<!>  ««"!"
    ║       │ │ └─filereadable  ««"nqp::filereadable($src_path)"
    ║       │ │   └○ $src_path
    ║       │ └◙ WVal NQPMu
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$cwd := nqp::join('/', nqp::split('\\\\', nqp::cwd))"
    ║       │ ├○ $cwd
    ║       │ └─join  ««"nqp::join('/', nqp::split('\\\\', nqp::cwd))"
    ║       │   ├◙ SVal "/"
    ║       │   └─split  ««"nqp::split('\\\\', nqp::cwd)"
    ║       │     ├◙ SVal "\\"
    ║       │     └─cwd  ««"nqp::cwd"
    ║       ├─if  ««"nqp::index($src_path, $cwd) == 0 {\n            $sr"...
    ║       │ ├─iseq_n &infix:<==>  ««"=="
    ║       │ │ ├─index  ««"nqp::index($src_path, $cwd)"
    ║       │ │ │ ├○ $src_path
    ║       │ │ │ └○ $cwd
    ║       │ │ └◙ IVal 0
    ║       │ └─bind &infix:<:=>  ««":="
    ║       │   ├○ $src_path
    ║       │   └─substr  ««"nqp::substr($src_path, nqp::chars($cwd) + 1)"
    ║       │     ├○ $src_path
    ║       │     └─add_n &infix:<+>  ««"+"
    ║       │       ├─chars  ««"nqp::chars($cwd)"
    ║       │       │ └○ $cwd
    ║       │       └◙ IVal 1
    ║       ├─if  ««"nqp::index($src_path, './') == 0 {\n            $sr"...
    ║       │ ├─iseq_n &infix:<==>  ««"=="
    ║       │ │ ├─index  ««"nqp::index($src_path, './')"
    ║       │ │ │ ├○ $src_path
    ║       │ │ │ └◙ SVal "./"
    ║       │ │ └◙ IVal 0
    ║       │ └─bind &infix:<:=>  ««":="
    ║       │   ├○ $src_path
    ║       │   └─substr  ««"nqp::substr($src_path, 2)"
    ║       │     ├○ $src_path
    ║       │     └◙ IVal 2
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$l := nqp::chars($src_path)"
    ║       │ ├○ $l
    ║       │ └─chars  ««"nqp::chars($src_path)"
    ║       │   └○ $src_path
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$x := nqp::rindex($src_path, '.')"
    ║       │ ├○ $x
    ║       │ └─rindex  ««"nqp::rindex($src_path, '.')"
    ║       │   ├○ $src_path
    ║       │   └◙ SVal "."
    ║       ├─if  ««"$x <= 0 {    # yes, also files like \".gitignore\","...
    ║       │ ├─isle_n &infix:<<=>  ««"<="
    ║       │ │ ├○ $x
    ║       │ │ └◙ IVal 0
    ║       │ └─callmethod panic  ««"\"invalid source file (no extension): $src_path\""
    ║       │   ├─decont
    ║       │   │ └○ self
    ║       │   └─concat
    ║       │     ├◙ SVal "invalid source file (no extension): "
    ║       │     └○ $src_path
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src_ext := nqp::substr($src_path, $x + 1)"
    ║       │ ├○ $src_ext
    ║       │ └─substr  ««"nqp::substr($src_path, $x + 1)"
    ║       │   ├○ $src_path
    ║       │   └─add_n &infix:<+>  ««"+"
    ║       │     ├○ $x
    ║       │     └◙ IVal 1
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$i := nqp::rindex($src_path, '/')"
    ║       │ ├○ $i
    ║       │ └─rindex  ««"nqp::rindex($src_path, '/')"
    ║       │   ├○ $src_path
    ║       │   └◙ SVal "/"
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src_name := nqp::substr($src_path, $i + 1, $x - $i"...
    ║       │ ├○ $src_name
    ║       │ └─substr  ««"nqp::substr($src_path, $i + 1, $x - $i - 1)"
    ║       │   ├○ $src_path
    ║       │   ├─add_n &infix:<+>  ««"+"
    ║       │   │ ├○ $i
    ║       │   │ └◙ IVal 1
    ║       │   └─sub_n &infix:<->  ««"-"
    ║       │     ├─sub_n &infix:<->  ««"-"
    ║       │     │ ├○ $x
    ║       │     │ └○ $i
    ║       │     └◙ IVal 1
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src_dir := nqp::substr($src_path, 0, max(0, $i))"
    ║       │ ├○ $src_dir
    ║       │ └─substr  ««"nqp::substr($src_path, 0, max(0, $i))"
    ║       │   ├○ $src_path
    ║       │   ├◙ IVal 0
    ║       │   └─call &max  ««"0, $i"
    ║       │     ├◙ IVal 0
    ║       │     └○ $i
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src_lib := ''"
    ║       │ ├○ $src_lib
    ║       │ └◙ SVal ""
    ║       ├─for  ««"self.user_srcpaths {\n            if nqp::index($sr"...
    ║       │ ├─callmethod user_srcpaths  ««".user_srcpaths"
    ║       │ │ └─decont
    ║       │ │   └○ self
    ║       │ └─:Block :blocktype(immediate)  ««"{\n            if nqp::index($src_dir, $_) == 0 {\n"...
    ║       │   ╟○ $_ :decl(param)
    ║       │   ╙─if  ««"nqp::index($src_dir, $_) == 0 {\n                $s"...
    ║       │     ├─iseq_n &infix:<==>  ««"=="
    ║       │     │ ├─index  ««"nqp::index($src_dir, $_)"
    ║       │     │ │ ├○ $src_dir
    ║       │     │ │ └○ $_
    ║       │     │ └◙ IVal 0
    ║       │     └─:Stmts  ««"{\n                $src_lib := nqp::substr($src_dir"...
    ║       │       ├─bind &infix:<:=>  ««":="
    ║       │       │ ├○ $src_lib
    ║       │       │ └─substr  ««"nqp::substr($src_dir, nqp::chars($_) + 1)"
    ║       │       │   ├○ $src_dir
    ║       │       │   └─add_n &infix:<+>  ««"+"
    ║       │       │     ├─chars  ««"nqp::chars($_)"
    ║       │       │     │ └○ $_
    ║       │       │     └◙ IVal 1
    ║       │       ├─bind &infix:<:=>  ««":="
    ║       │       │ ├○ $src_dir
    ║       │       │ └○ $_
    ║       │       └─control last
    ║       ├─unless  ««"$src_dir {\n            $src_dir := '.';\n        }"
    ║       │ ├○ $src_dir
    ║       │ └─bind &infix:<:=>  ««":="
    ║       │   ├○ $src_dir
    ║       │   └◙ SVal "."
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$vm_ext  := 'moarvm'"
    ║       │ ├○ $vm_ext
    ║       │ └◙ SVal "moarvm"
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$vm_dir  := 'blib'"
    ║       │ ├○ $vm_dir
    ║       │ └◙ SVal "blib"
    ║       ├○ $vm_path
    ║       ├─if  ««"$src_lib {\n            $src_path := \"$src_dir/$sr"...
    ║       │ ├○ $src_lib
    ║       │ ├─:Stmts  ««"{\n            $src_path := \"$src_dir/$src_lib/$sr"...
    ║       │ │ ├─bind &infix:<:=>  ««":="
    ║       │ │ │ ├○ $src_path
    ║       │ │ │ └─concat
    ║       │ │ │   ├─concat
    ║       │ │ │   │ ├─concat
    ║       │ │ │   │ │ ├─concat
    ║       │ │ │   │ │ │ ├─concat
    ║       │ │ │   │ │ │ │ ├─concat
    ║       │ │ │   │ │ │ │ │ ├○ $src_dir
    ║       │ │ │   │ │ │ │ │ └◙ SVal "/"
    ║       │ │ │   │ │ │ │ └○ $src_lib
    ║       │ │ │   │ │ │ └◙ SVal "/"
    ║       │ │ │   │ │ └○ $src_name
    ║       │ │ │   │ └◙ SVal "."
    ║       │ │ │   └○ $src_ext
    ║       │ │ └─bind &infix:<:=>  ««":="
    ║       │ │   ├○ $vm_path
    ║       │ │   └─concat
    ║       │ │     ├─concat
    ║       │ │     │ ├─concat
    ║       │ │     │ │ ├─concat
    ║       │ │     │ │ │ ├─concat
    ║       │ │     │ │ │ │ ├─concat
    ║       │ │     │ │ │ │ │ ├○ $vm_dir
    ║       │ │     │ │ │ │ │ └◙ SVal "/"
    ║       │ │     │ │ │ │ └○ $src_lib
    ║       │ │     │ │ │ └◙ SVal "/"
    ║       │ │     │ │ └○ $src_name
    ║       │ │     │ └◙ SVal "."
    ║       │ │     └○ $vm_ext
    ║       │ └─:Stmts  ««"{\n            $src_path := \"$src_dir/$src_name.$s"...
    ║       │   ├─bind &infix:<:=>  ««":="
    ║       │   │ ├○ $src_path
    ║       │   │ └─concat
    ║       │   │   ├─concat
    ║       │   │   │ ├─concat
    ║       │   │   │ │ ├─concat
    ║       │   │   │ │ │ ├○ $src_dir
    ║       │   │   │ │ │ └◙ SVal "/"
    ║       │   │   │ │ └○ $src_name
    ║       │   │   │ └◙ SVal "."
    ║       │   │   └○ $src_ext
    ║       │   └─bind &infix:<:=>  ««":="
    ║       │     ├○ $vm_path
    ║       │     └─concat
    ║       │       ├─concat
    ║       │       │ ├─concat
    ║       │       │ │ ├─concat
    ║       │       │ │ │ ├○ $vm_dir
    ║       │       │ │ │ └◙ SVal "/"
    ║       │       │ │ └○ $src_name
    ║       │       │ └◙ SVal "."
    ║       │       └○ $vm_ext
    ║       ├─callmethod user_binname  ««"$vm_path"
    ║       │ ├─decont
    ║       │ │ └○ self
    ║       │ └○ $vm_path
    ║       ├─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$ast_path := \"$src_path.qast\""
    ║       │ ├○ $ast_path
    ║       │ └─concat
    ║       │   ├○ $src_path
    ║       │   └◙ SVal ".qast"
    ║       ├─bind &infix:<:=>  ««":="
    ║       │ ├○ $needsCompilation
    ║       │ └◙ IVal 1
    ║       └─if  ««"!$needsCompilation {\n            return nqp::null;"...
    ║         ├─falsey &prefix:<!>  ««"!"
    ║         │ └○ $needsCompilation
    ║         ├─call RETURN
    ║         │ └─null  ««"nqp::null"
    ║         └─:Block :blocktype(immediate)  ««"{\n            my @opts := [\n                #'--m"...
    ║           ╟○ @opts :decl(var)
    ║           ╟○ @args :decl(var)
    ║           ╟○ $*USER_FILE :decl(var)
    ║           ╟─bind  ««"$result"
    ║           ║ ├○ $result :decl(var)
    ║           ║ └◙ WVal NQPMu
    ║           ╟─bind  ««"$error"
    ║           ║ ├○ $error :decl(var)
    ║           ║ └◙ WVal NQPMu
    ║           ╟○ $msg :decl(var)
    ║           ╟○ $msglc :decl(var)
    ║           ╟─bind  ««"$from"
    ║           ║ ├○ $from :decl(var)
    ║           ║ └◙ WVal NQPMu
    ║           ╟─bind  ««"$to"
    ║           ║ ├○ $to :decl(var)
    ║           ║ └◙ WVal NQPMu
    ║           ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@opts := [\n                #'--module-path=L',\n  "...
    ║           ║ ├○ @opts
    ║           ║ └─list &circumfix:<[ ]>
    ║           ╟─if  ««"@opts.push(\"--target=$target\") if $target"
    ║           ║ ├○ $target
    ║           ║ └─callmethod push  ««"\"--target=$target\""
    ║           ║   ├○ @opts
    ║           ║   └─concat
    ║           ║     ├◙ SVal "--target="
    ║           ║     └○ $target
    ║           ╟─if  ««"$target eq 'mbc' {\n                if nqp::stat($v"...
    ║           ║ ├─iseq_s &infix:<eq>  ««"eq"
    ║           ║ │ ├○ $target
    ║           ║ │ └◙ SVal "mbc"
    ║           ║ ├─:Stmts  ««"{\n                if nqp::stat($vm_path, nqp::cons"...
    ║           ║ │ ├─if  ««"nqp::stat($vm_path, nqp::const::STAT_EXISTS) && !nq"...
    ║           ║ │ │ ├─if &infix:<&&>  ««"&&"
    ║           ║ │ │ │ ├─stat  ««"nqp::stat($vm_path, nqp::const::STAT_EXISTS)"
    ║           ║ │ │ │ │ ├○ $vm_path
    ║           ║ │ │ │ │ └─const STAT_EXISTS
    ║           ║ │ │ │ └─falsey &prefix:<!>  ««"!"
    ║           ║ │ │ │   └─filewritable  ««"nqp::filewritable($vm_path)"
    ║           ║ │ │ │     └○ $vm_path
    ║           ║ │ │ └─die  ««"nqp::die(\"cannot write to file: $vm_path\")"
    ║           ║ │ │   └─concat
    ║           ║ │ │     ├◙ SVal "cannot write to file: "
    ║           ║ │ │     └○ $vm_path
    ║           ║ │ └─callmethod push  ««"'--output=' ~ $vm_path"
    ║           ║ │   ├○ @opts
    ║           ║ │   └─concat &infix:<~>  ««"~"
    ║           ║ │     ├◙ SVal "--output="
    ║           ║ │     └○ $vm_path
    ║           ║ └─if  ««"$target eq 'ast' || $target eq 'ast_clean' || $targ"...
    ║           ║   ├─unless &infix:<||>  ««"||"
    ║           ║   │ ├─unless &infix:<||>  ««"||"
    ║           ║   │ │ ├─iseq_s &infix:<eq>  ««"eq"
    ║           ║   │ │ │ ├○ $target
    ║           ║   │ │ │ └◙ SVal "ast"
    ║           ║   │ │ └─iseq_s &infix:<eq>  ««"eq"
    ║           ║   │ │   ├○ $target
    ║           ║   │ │   └◙ SVal "ast_clean"
    ║           ║   │ └─iseq_s &infix:<eq>  ««"eq"
    ║           ║   │   ├○ $target
    ║           ║   │   └◙ SVal "ast_save"
    ║           ║   └─callmethod push  ««"'--output=' ~ $ast_path"
    ║           ║     ├○ @opts
    ║           ║     └─concat &infix:<~>  ««"~"
    ║           ║       ├◙ SVal "--output="
    ║           ║       └○ $ast_path
    ║           ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@args := nqp::clone(@opts)"
    ║           ║ ├○ @args
    ║           ║ └─clone  ««"nqp::clone(@opts)"
    ║           ║   └○ @opts
    ║           ╟─callmethod unshift  ««"'nqpc'"
    ║           ║ ├○ @args
    ║           ║ └◙ SVal "nqpc"
    ║           ╟─callmethod push  ««"$src_path"
    ║           ║ ├○ @args
    ║           ║ └○ $src_path
    ║           ╟─callmethod log  ««"'$ ', nqp::join(' ', @args)"
    ║           ║ ├─decont
    ║           ║ │ └○ self
    ║           ║ ├◙ SVal "$ "
    ║           ║ └─join  ««"nqp::join(' ', @args)"
    ║           ║   ├◙ SVal " "
    ║           ║   └○ @args
    ║           ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$*USER_FILE := $src_path"
    ║           ║ ├○┬VarWithFallback contextual $*USER_FILE :fallback((ifnull) ((VarWithFallback associative :fallback(WVal NQPMu)) ((who) (WVal GLOBALish)) (SVal "$USER_FILE")) ((die_s) (SVal "Contextual $*USER_FILE not found")))
    ║           ║ └○ $src_path
    ║           ╟○ $result
    ║           ╟○ $error
    ║           ╟─handle
    ║           ║ ├─handle
    ║           ║ │ ├─:Stmts  ««"\n                $result := self.command_line(@arg"...
    ║           ║ │ │ ├─bind &infix:<:=>  ««":="
    ║           ║ │ │ │ ├○ $result
    ║           ║ │ │ │ └─callmethod command_line  ««"@args, \n                    :encoding('utf8'), \n "...
    ║           ║ │ │ │   ├─decont
    ║           ║ │ │ │   │ └○ self
    ║           ║ │ │ │   ├○ @args
    ║           ║ │ │ │   ├◙ SVal "utf8" :named("encoding")
    ║           ║ │ │ │   ├◙ SVal "ascii iso-8859-1" :named("transcode")
    ║           ║ │ │ │   └○ $stagestats :named("stagestats")
    ║           ║ │ │ └◙ WVal NQPMu
    ║           ║ │ ├► "CATCH" (str)
    ║           ║ │ └─:Stmts
    ║           ║ │   ├─call
    ║           ║ │   │ ├─:Block  ««"{\n                    $error := $_;\n             "...
    ║           ║ │   │ │ ╟○ $_ :decl(param)
    ║           ║ │   │ │ ╟─bind
    ║           ║ │   │ │ ║ ├○ $! :decl(var)
    ║           ║ │   │ │ ║ └○ $_
    ║           ║ │   │ │ ╙─bind &infix:<:=>  ««":="
    ║           ║ │   │ │   ├○ $error
    ║           ║ │   │ │   └○ $_
    ║           ║ │   │ └─exception
    ║           ║ │   ├─:VM
    ║           ║ │   └◙ WVal NQPMu
    ║           ║ ├► "CATCH" (str)
    ║           ║ └─:Stmts
    ║           ║   ├─:VM
    ║           ║   └◙ WVal NQPMu
    ║           ╟─unless  ««"$error {\n                if nqp::isnull($result) {"...
    ║           ║ ├○ $error
    ║           ║ └─:Stmts  ««"{\n                if nqp::isnull($result) {   # re"...
    ║           ║   ├─if  ««"nqp::isnull($result) {   # returning non-null means"...
    ║           ║   │ ├─isnull  ««"nqp::isnull($result)"
    ║           ║   │ │ └○ $result
    ║           ║   │ └─if  ««"$target eq 'mbc' {\n                        $result"...
    ║           ║   │   ├─iseq_s &infix:<eq>  ««"eq"
    ║           ║   │   │ ├○ $target
    ║           ║   │   │ └◙ SVal "mbc"
    ║           ║   │   ├─bind &infix:<:=>  ««":="
    ║           ║   │   │ ├○ $result
    ║           ║   │   │ └○ $vm_path
    ║           ║   │   └─die  ««"nqp::die(\"??? - successfully compiled $src_path to"...
    ║           ║   │     └─concat
    ║           ║   │       ├─concat
    ║           ║   │       │ ├─concat
    ║           ║   │       │ │ ├─concat
    ║           ║   │       │ │ │ ├◙ SVal "??? - successfully compiled "
    ║           ║   │       │ │ │ └○ $src_path
    ║           ║   │       │ │ └◙ SVal " to target "
    ║           ║   │       │ └○ $target
    ║           ║   │       └◙ SVal " - but got null result...!?"
    ║           ║   └─call RETURN
    ║           ║     └○ $result
    ║           ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$msg := nqp::getmessage($error)"
    ║           ║ ├○ $msg
    ║           ║ └─getmessage  ««"nqp::getmessage($error)"
    ║           ║   └○ $error
    ║           ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$msglc := nqp::lc($msg)"
    ║           ║ ├○ $msglc
    ║           ║ └─lc  ««"nqp::lc($msg)"
    ║           ║   └○ $msg
    ║           ╟○ $from
    ║           ╟○ $to
    ║           ╟─if  ««"nqp::index($msglc, 'no such file') > -1 {\n        "...
    ║           ║ ├─isgt_n &infix:<>>  ««">"
    ║           ║ │ ├─index  ««"nqp::index($msglc, 'no such file')"
    ║           ║ │ │ ├○ $msglc
    ║           ║ │ │ └◙ SVal "no such file"
    ║           ║ │ └◙ IVal -1
    ║           ║ ├─:Block :blocktype(immediate)  ««"{\n                $from := nqp::index($msglc, '\\'"...
    ║           ║ │ ╟○ $file :decl(var)
    ║           ║ │ ╟─bind &infix:<:=>  ««":="
    ║           ║ │ ║ ├○ $from
    ║           ║ │ ║ └─add_n &infix:<+>  ««"+"
    ║           ║ │ ║   ├─index  ««"nqp::index($msglc, '\\'')"
    ║           ║ │ ║   │ ├○ $msglc
    ║           ║ │ ║   │ └◙ SVal "'"
    ║           ║ │ ║   └◙ IVal 1
    ║           ║ │ ╟─bind &infix:<:=>  ««":="
    ║           ║ │ ║ ├○ $to
    ║           ║ │ ║ └─index  ««"nqp::index($msglc, '\\'', $from)"
    ║           ║ │ ║   ├○ $msglc
    ║           ║ │ ║   ├◙ SVal "'"
    ║           ║ │ ║   └○ $from
    ║           ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$file := nqp::substr($msg, $from, $to - $from)"
    ║           ║ │ ║ ├○ $file
    ║           ║ │ ║ └─substr  ««"nqp::substr($msg, $from, $to - $from)"
    ║           ║ │ ║   ├○ $msg
    ║           ║ │ ║   ├○ $from
    ║           ║ │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║ │ ║     ├○ $to
    ║           ║ │ ║     └○ $from
    ║           ║ │ ╙─call &say  ««"'Error: missing module \"', $file ~ '\" (original e"...
    ║           ║ │   ├◙ SVal "Error: missing module \""
    ║           ║ │   └─concat &infix:<~>  ««"~"
    ║           ║ │     ├─concat &infix:<~>  ««"~"
    ║           ║ │     │ ├─concat &infix:<~>  ««"~"
    ║           ║ │     │ │ ├○ $file
    ║           ║ │     │ │ └◙ SVal "\" (original error: \""
    ║           ║ │     │ └─escape  ««"nqp::escape($msg)"
    ║           ║ │     │   └○ $msg
    ║           ║ │     └◙ SVal "\")"
    ║           ║ └─if  ««"nqp::index($msglc, 'unable to write bytecode') > -1"...
    ║           ║   ├─isgt_n &infix:<>>  ««">"
    ║           ║   │ ├─index  ««"nqp::index($msglc, 'unable to write bytecode')"
    ║           ║   │ │ ├○ $msglc
    ║           ║   │ │ └◙ SVal "unable to write bytecode"
    ║           ║   │ └◙ IVal -1
    ║           ║   ├─:Block :blocktype(immediate)  ««"{\n                $from := nqp::index($msglc, '\\'"...
    ║           ║   │ ╟○ $file :decl(var)
    ║           ║   │ ╟○ $line :decl(var)
    ║           ║   │ ╟─bind &infix:<:=>  ««":="
    ║           ║   │ ║ ├○ $from
    ║           ║   │ ║ └─add_n &infix:<+>  ««"+"
    ║           ║   │ ║   ├─index  ««"nqp::index($msglc, '\\'')"
    ║           ║   │ ║   │ ├○ $msglc
    ║           ║   │ ║   │ └◙ SVal "'"
    ║           ║   │ ║   └◙ IVal 1
    ║           ║   │ ╟─bind &infix:<:=>  ««":="
    ║           ║   │ ║ ├○ $to
    ║           ║   │ ║ └─index  ««"nqp::index($msglc, '\\'', $from)"
    ║           ║   │ ║   ├○ $msglc
    ║           ║   │ ║   ├◙ SVal "'"
    ║           ║   │ ║   └○ $from
    ║           ║   │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$file := nqp::substr($msg, $from, $to - $from)"
    ║           ║   │ ║ ├○ $file
    ║           ║   │ ║ └─substr  ««"nqp::substr($msg, $from, $to - $from)"
    ║           ║   │ ║   ├○ $msg
    ║           ║   │ ║   ├○ $from
    ║           ║   │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║   │ ║     ├○ $to
    ║           ║   │ ║     └○ $from
    ║           ║   │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$line := 1"
    ║           ║   │ ║ ├○ $line
    ║           ║   │ ║ └◙ IVal 1
    ║           ║   │ ╙─bind &infix:<:=>  ««":="
    ║           ║   │   ├○ $msg
    ║           ║   │   └─join  ««"nqp::join('', [\n                          'Error: "...
    ║           ║   │     ├◙ SVal ""
    ║           ║   │     └─list &circumfix:<[ ]>  ««","
    ║           ║   │       ├◙ SVal "Error: "
    ║           ║   │       ├○ $msg
    ║           ║   │       ├◙ SVal "\n"
    ║           ║   │       ├◙ SVal "  at "
    ║           ║   │       ├○ $src_path
    ║           ║   │       ├◙ SVal ":"
    ║           ║   │       ├─stringify &prefix:<~>  ««"~"
    ║           ║   │       │ └○ $line
    ║           ║   │       └◙ SVal "\n"
    ║           ║   └─if  ««"nqp::index($msglc, 'confused') > -1 {\n            "...
    ║           ║     ├─isgt_n &infix:<>>  ««">"
    ║           ║     │ ├─index  ««"nqp::index($msglc, 'confused')"
    ║           ║     │ │ ├○ $msglc
    ║           ║     │ │ └◙ SVal "confused"
    ║           ║     │ └◙ IVal -1
    ║           ║     ├─:Block :blocktype(immediate)  ««"{\n                $from := nqp::index($msglc, 'at "...
    ║           ║     │ ╟○ $line :decl(var)
    ║           ║     │ ╟─bind &infix:<:=>  ««":="
    ║           ║     │ ║ ├○ $from
    ║           ║     │ ║ └─add_n &infix:<+>  ««"+"
    ║           ║     │ ║   ├─index  ««"nqp::index($msglc, 'at line')"
    ║           ║     │ ║   │ ├○ $msglc
    ║           ║     │ ║   │ └◙ SVal "at line"
    ║           ║     │ ║   └◙ IVal 1
    ║           ║     │ ╟─bind &infix:<:=>  ««":="
    ║           ║     │ ║ ├○ $from
    ║           ║     │ ║ └─findcclass  ««"nqp::findcclass(nqp::const::CCLASS_NUMERIC, $msglc,"...
    ║           ║     │ ║   ├─const CCLASS_NUMERIC
    ║           ║     │ ║   ├○ $msglc
    ║           ║     │ ║   ├○ $from
    ║           ║     │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║     │ ║     ├─chars  ««"nqp::chars($msglc)"
    ║           ║     │ ║     │ └○ $msglc
    ║           ║     │ ║     └○ $from
    ║           ║     │ ╟─bind &infix:<:=>  ««":="
    ║           ║     │ ║ ├○ $to
    ║           ║     │ ║ └─findnotcclass  ««"nqp::findnotcclass(nqp::const::CCLASS_NUMERIC, $msg"...
    ║           ║     │ ║   ├─const CCLASS_NUMERIC
    ║           ║     │ ║   ├○ $msglc
    ║           ║     │ ║   ├○ $from
    ║           ║     │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║     │ ║     ├─chars  ««"nqp::chars($msglc)"
    ║           ║     │ ║     │ └○ $msglc
    ║           ║     │ ║     └○ $from
    ║           ║     │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$line := nqp::substr($msg, $from, $to - $from)"
    ║           ║     │ ║ ├○ $line
    ║           ║     │ ║ └─substr  ««"nqp::substr($msg, $from, $to - $from)"
    ║           ║     │ ║   ├○ $msg
    ║           ║     │ ║   ├○ $from
    ║           ║     │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║     │ ║     ├○ $to
    ║           ║     │ ║     └○ $from
    ║           ║     │ ╟─bind &infix:<:=>  ««":="
    ║           ║     │ ║ ├○ $line
    ║           ║     │ ║ └─call &max  ««"1, $line - 1"
    ║           ║     │ ║   ├◙ IVal 1
    ║           ║     │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║     │ ║     ├○ $line
    ║           ║     │ ║     └◙ IVal 1
    ║           ║     │ ╟─bind &infix:<:=>  ««":="
    ║           ║     │ ║ ├○ $msg
    ║           ║     │ ║ └─concat &infix:<~>  ««"~"
    ║           ║     │ ║   ├─concat &infix:<~>  ««"~"
    ║           ║     │ ║   │ ├─substr  ««"nqp::substr($msg, 0, $from)"
    ║           ║     │ ║   │ │ ├○ $msg
    ║           ║     │ ║   │ │ ├◙ IVal 0
    ║           ║     │ ║   │ │ └○ $from
    ║           ║     │ ║   │ └○ $line
    ║           ║     │ ║   └─substr  ««"nqp::substr($msg, $to)"
    ║           ║     │ ║     ├○ $msg
    ║           ║     │ ║     └○ $to
    ║           ║     │ ╙─bind &infix:<:=>  ««":="
    ║           ║     │   ├○ $msg
    ║           ║     │   └─join  ««"nqp::join('', [\n                          'Error: "...
    ║           ║     │     ├◙ SVal ""
    ║           ║     │     └─list &circumfix:<[ ]>  ««","
    ║           ║     │       ├◙ SVal "Error: "
    ║           ║     │       ├○ $msg
    ║           ║     │       ├◙ SVal "\n"
    ║           ║     │       ├◙ SVal "  at "
    ║           ║     │       ├○ $src_path
    ║           ║     │       ├◙ SVal ":"
    ║           ║     │       ├─stringify &prefix:<~>  ««"~"
    ║           ║     │       │ └○ $line
    ║           ║     │       └◙ SVal "\n"
    ║           ║     └─if  ««"nqp::index($msglc, 'assignment (\"=\") not supporte"...
    ║           ║       ├─isgt_n &infix:<>>  ««">"
    ║           ║       │ ├─index  ««"nqp::index($msglc, 'assignment (\"=\") not supporte"...
    ║           ║       │ │ ├○ $msglc
    ║           ║       │ │ └◙ SVal "assignment (\"=\") not supported "
    ║           ║       │ └◙ IVal -1
    ║           ║       ├─:Block :blocktype(immediate)  ««"{\n                $from := nqp::index($msglc, 'at "...
    ║           ║       │ ╟○ $line :decl(var)
    ║           ║       │ ╟○ @lines :decl(var)
    ║           ║       │ ╟○ $i :decl(var)
    ║           ║       │ ╟○ $n :decl(var)
    ║           ║       │ ╟─bind  ««"$column"
    ║           ║       │ ║ ├○ $column :decl(var)
    ║           ║       │ ║ └◙ WVal NQPMu
    ║           ║       │ ╟─bind &infix:<:=>  ««":="
    ║           ║       │ ║ ├○ $from
    ║           ║       │ ║ └─add_n &infix:<+>  ««"+"
    ║           ║       │ ║   ├─index  ««"nqp::index($msglc, 'at line')"
    ║           ║       │ ║   │ ├○ $msglc
    ║           ║       │ ║   │ └◙ SVal "at line"
    ║           ║       │ ║   └◙ IVal 1
    ║           ║       │ ╟─bind &infix:<:=>  ««":="
    ║           ║       │ ║ ├○ $from
    ║           ║       │ ║ └─findcclass  ««"nqp::findcclass(nqp::const::CCLASS_NUMERIC, $msglc,"...
    ║           ║       │ ║   ├─const CCLASS_NUMERIC
    ║           ║       │ ║   ├○ $msglc
    ║           ║       │ ║   ├○ $from
    ║           ║       │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║       │ ║     ├─chars  ««"nqp::chars($msglc)"
    ║           ║       │ ║     │ └○ $msglc
    ║           ║       │ ║     └○ $from
    ║           ║       │ ╟─bind &infix:<:=>  ««":="
    ║           ║       │ ║ ├○ $to
    ║           ║       │ ║ └─findnotcclass  ««"nqp::findnotcclass(nqp::const::CCLASS_NUMERIC, $msg"...
    ║           ║       │ ║   ├─const CCLASS_NUMERIC
    ║           ║       │ ║   ├○ $msglc
    ║           ║       │ ║   ├○ $from
    ║           ║       │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║       │ ║     ├─chars  ««"nqp::chars($msglc)"
    ║           ║       │ ║     │ └○ $msglc
    ║           ║       │ ║     └○ $from
    ║           ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$line := nqp::substr($msg, $from, $to - $from)"
    ║           ║       │ ║ ├○ $line
    ║           ║       │ ║ └─substr  ««"nqp::substr($msg, $from, $to - $from)"
    ║           ║       │ ║   ├○ $msg
    ║           ║       │ ║   ├○ $from
    ║           ║       │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║       │ ║     ├○ $to
    ║           ║       │ ║     └○ $from
    ║           ║       │ ╟─bind &infix:<:=>  ««":="
    ║           ║       │ ║ ├○ $line
    ║           ║       │ ║ └─call &max  ««"1, $line - 1"
    ║           ║       │ ║   ├◙ IVal 1
    ║           ║       │ ║   └─sub_n &infix:<->  ««"-"
    ║           ║       │ ║     ├○ $line
    ║           ║       │ ║     └◙ IVal 1
    ║           ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@lines := linesFrom($src_path, $line, 2)"
    ║           ║       │ ║ ├○ @lines
    ║           ║       │ ║ └─call &linesFrom  ««"$src_path, $line, 2"
    ║           ║       │ ║   ├○ $src_path
    ║           ║       │ ║   ├○ $line
    ║           ║       │ ║   └◙ IVal 2
    ║           ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$i := 0"
    ║           ║       │ ║ ├○ $i
    ║           ║       │ ║ └◙ IVal 0
    ║           ║       │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$n := nqp::elems(@lines)"
    ║           ║       │ ║ ├○ $n
    ║           ║       │ ║ └─elems  ««"nqp::elems(@lines)"
    ║           ║       │ ║   └○ @lines
    ║           ║       │ ╟○ $column
    ║           ║       │ ╟─while  ««"$i < $n {\n                    my $line := @lines[$"...
    ║           ║       │ ║ ├─islt_n &infix:<<>  ««"<"
    ║           ║       │ ║ │ ├○ $i
    ║           ║       │ ║ │ └○ $n
    ║           ║       │ ║ ├─:Block :blocktype(immediate)  ««"{\n                    my $line := @lines[$i];\n   "...
    ║           ║       │ ║ │ ╟○ $line :decl(var)
    ║           ║       │ ║ │ ╟○ $at :decl(var)
    ║           ║       │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$line := @lines[$i]"
    ║           ║       │ ║ │ ║ ├○ $line
    ║           ║       │ ║ │ ║ └○┬VarWithFallback positional :fallback(WVal NQPMu)
    ║           ║       │ ║ │ ║   ├○ @lines
    ║           ║       │ ║ │ ║   └○ $i
    ║           ║       │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$at := nqp::index($line, '=')"
    ║           ║       │ ║ │ ║ ├○ $at
    ║           ║       │ ║ │ ║ └─index  ««"nqp::index($line, '=')"
    ║           ║       │ ║ │ ║   ├○ $line
    ║           ║       │ ║ │ ║   └◙ SVal "="
    ║           ║       │ ║ │ ╙─if  ««"$at > -1 {\n                        $column := $at "...
    ║           ║       │ ║ │   ├─isgt_n &infix:<>>  ««">"
    ║           ║       │ ║ │   │ ├○ $at
    ║           ║       │ ║ │   │ └◙ IVal -1
    ║           ║       │ ║ │   ├─:Stmts  ««"{\n                        $column := $at + 1;\n   "...
    ║           ║       │ ║ │   │ ├─bind &infix:<:=>  ««":="
    ║           ║       │ ║ │   │ │ ├○ $column
    ║           ║       │ ║ │   │ │ └─add_n &infix:<+>  ««"+"
    ║           ║       │ ║ │   │ │   ├○ $at
    ║           ║       │ ║ │   │ │   └◙ IVal 1
    ║           ║       │ ║ │   │ └─bind &infix:<:=>  ««":="
    ║           ║       │ ║ │   │   ├○ $i
    ║           ║       │ ║ │   │   └○ $n
    ║           ║       │ ║ │   └─:Stmts  ««"{\n                        $i++;\n                 "...
    ║           ║       │ ║ │     ├─postinc &postfix:<++>  ««"++"
    ║           ║       │ ║ │     │ └○ $i
    ║           ║       │ ║ │     └─postinc &postfix:<++>  ««"++"
    ║           ║       │ ║ │       └○ $line
    ║           ║       │ ║ └◙ IVal 1 :named("nohandler")
    ║           ║       │ ╟─bind &infix:<:=>  ««":="
    ║           ║       │ ║ ├○ $msg
    ║           ║       │ ║ └─concat &infix:<~>  ««"~"
    ║           ║       │ ║   ├─concat &infix:<~>  ««"~"
    ║           ║       │ ║   │ ├─substr  ««"nqp::substr($msg, 0, $from)"
    ║           ║       │ ║   │ │ ├○ $msg
    ║           ║       │ ║   │ │ ├◙ IVal 0
    ║           ║       │ ║   │ │ └○ $from
    ║           ║       │ ║   │ └○ $line
    ║           ║       │ ║   └─substr  ««"nqp::substr($msg, $to)"
    ║           ║       │ ║     ├○ $msg
    ║           ║       │ ║     └○ $to
    ║           ║       │ ╙─bind &infix:<:=>  ««":="
    ║           ║       │   ├○ $msg
    ║           ║       │   └─join  ««"nqp::join('', [\n                          'Error: "...
    ║           ║       │     ├◙ SVal ""
    ║           ║       │     └─list &circumfix:<[ ]>  ««","
    ║           ║       │       ├◙ SVal "Error: "
    ║           ║       │       ├○ $msg
    ║           ║       │       ├◙ SVal "\n"
    ║           ║       │       ├◙ SVal "   at "
    ║           ║       │       ├○ $src_path
    ║           ║       │       ├◙ SVal ":"
    ║           ║       │       ├─stringify &prefix:<~>  ««"~"
    ║           ║       │       │ └○ $line
    ║           ║       │       ├─if &infix:<>  ««"?? ':' ~ $column !!"
    ║           ║       │       │ ├○ $column
    ║           ║       │       │ ├─concat &infix:<~>  ««"~"
    ║           ║       │       │ │ ├◙ SVal ":"
    ║           ║       │       │ │ └○ $column
    ║           ║       │       │ └◙ SVal ""
    ║           ║       │       └◙ SVal "\n"
    ║           ║       └─if  ««"0 {\n                my $line := 1;\n              "...
    ║           ║         ├◙ IVal 0
    ║           ║         ├─:Block :blocktype(immediate)  ««"{\n                my $line := 1;\n                "...
    ║           ║         │ ╟○ $line :decl(var)
    ║           ║         │ ╟─bind  ««"$column"
    ║           ║         │ ║ ├○ $column :decl(var)
    ║           ║         │ ║ └◙ WVal NQPMu
    ║           ║         │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$line := 1"
    ║           ║         │ ║ ├○ $line
    ║           ║         │ ║ └◙ IVal 1
    ║           ║         │ ╟○ $column
    ║           ║         │ ╙─bind &infix:<:=>  ««":="
    ║           ║         │   ├○ $msg
    ║           ║         │   └─join  ««"nqp::join('', [\n                          'ERROR: "...
    ║           ║         │     ├◙ SVal ""
    ║           ║         │     └─list &circumfix:<[ ]>  ««","
    ║           ║         │       ├◙ SVal "ERROR: "
    ║           ║         │       ├○ $msg
    ║           ║         │       ├◙ SVal "\n"
    ║           ║         │       ├◙ SVal "   at "
    ║           ║         │       ├○ $src_path
    ║           ║         │       ├◙ SVal ":"
    ║           ║         │       ├─stringify &prefix:<~>  ««"~"
    ║           ║         │       │ └○ $line
    ║           ║         │       ├─if &infix:<>  ««"?? ':' ~ $column !!"
    ║           ║         │       │ ├○ $column
    ║           ║         │       │ ├─concat &infix:<~>  ««"~"
    ║           ║         │       │ │ ├◙ SVal ":"
    ║           ║         │       │ │ └○ $column
    ║           ║         │       │ └◙ SVal ""
    ║           ║         │       └◙ SVal "\n"
    ║           ║         └─bind &infix:<:=>  ««":="
    ║           ║           ├○ $msg
    ║           ║           └─concat &infix:<~>  ««"~"
    ║           ║             ├○ $msg
    ║           ║             └─join  ««"nqp::join(\"\\n\", nqp::backtracestrings($error))"
    ║           ║               ├◙ SVal "\n"
    ║           ║               └─backtracestrings  ««"nqp::backtracestrings($error)"
    ║           ║                 └○ $error
    ║           ╟─flushfh  ««"nqp::flushfh(nqp::getstdout())"
    ║           ║ └─getstdout  ««"nqp::getstdout()"
    ║           ╙─die  ««"nqp::die($msg)"
    ║             └○ $msg
    ╟○ &flatten
    ╟○ &MAIN
    ╙─if
      ├○ @ARGS
      └─call &MAIN
        └○ @ARGS :flat(1)