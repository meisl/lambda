──:CompUnit+{StrByDump}
  └─:Block
    ╟○ @ARGS :decl(param) :slurpy(1)
    ╟○ GLOBALish :decl(static) :default((GLOBALish, Type object))
    ╟○ $?PACKAGE :decl(static) :default((GLOBALish, Type object))
    ╟○ EXPORT :decl(static) :default((EXPORT, Type object))
    ╟○ $λsrc :decl(var)
    ╟○ %info :decl(var)
    ╟─bind
    ║ ├○ &LAMFIELD_ID :decl(var)
    ║ └─:Block  ««"{ 0 }"
    ║   ╙◙ IVal 0
    ╟─bind
    ║ ├○ &LAMFIELD_CODE :decl(var)
    ║ └─:Block  ««"{ 1 }"
    ║   ╙◙ IVal 1
    ╟─bind
    ║ ├○ &LAMFIELD_FREEVARS :decl(var)
    ║ └─:Block  ««"{ 2 }"
    ║   ╙◙ IVal 2
    ╟─bind
    ║ ├○ &lam2id :decl(var)
    ║ └─:Block  ««"{ $lam[LAMFIELD_ID()] }"
    ║   ╟○ $lam :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─ifnull
    ║     ├─atpos
    ║     │ ├○ $lam
    ║     │ └◙ IVal 0 :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&LAMFIELD_ID" (str) ))
    ║     └◙ WVal NQPMu
    ╟─bind
    ║ ├○ &lam2code :decl(var)
    ║ └─:Block  ««"{ $lam[LAMFIELD_CODE()] }"
    ║   ╟○ $lam :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─ifnull
    ║     ├─atpos
    ║     │ ├○ $lam
    ║     │ └◙ IVal 1 :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&LAMFIELD_CODE" (str) ))
    ║     └◙ WVal NQPMu
    ╟─bind
    ║ ├○ &lam2fvs :decl(var)
    ║ └─:Block  ««"{ sublist($lam, LAMFIELD_FREEVARS()) }"
    ║   ╟○ $lam :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─call &sublist  ««"$lam, LAMFIELD_FREEVARS()"
    ║     ├○ $lam
    ║     └◙ IVal 2 :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&LAMFIELD_FREEVARS" (str) ))
    ╟─bind
    ║ ├○ &STATS_QASTSIZE :decl(var)
    ║ └─:Block  ««"{ 'Node'      }"
    ║   ╙◙ SVal "Node"
    ╟─bind
    ║ ├○ &STATS_BLOCKCOUNT :decl(var)
    ║ └─:Block  ««"{ 'Block'     }"
    ║   ╙◙ SVal "Block"
    ╟─bind
    ║ ├○ &STATS_LISTCOUNT :decl(var)
    ║ └─:Block  ««"{ 'list'      }"
    ║   ╙◙ SVal "list"
    ╟─bind
    ║ ├○ &STATS_LAMBDACOUNT :decl(var)
    ║ └─:Block  ««"{ 'lambda'    }"
    ║   ╙◙ SVal "lambda"
    ╟─bind
    ║ ├○ &STATS_CALLISHCOUNT :decl(var)
    ║ └─:Block  ««"{ 'callish'   }"
    ║   ╙◙ SVal "callish"
    ╟─bind
    ║ ├○ &STATS_IVALCOUNT :decl(var)
    ║ └─:Block  ««"{ 'IVal'      }"
    ║   ╙◙ SVal "IVal"
    ╟─bind
    ║ ├○ &STATS_SVALCOUNT :decl(var)
    ║ └─:Block  ««"{ 'SVal'      }"
    ║   ╙◙ SVal "SVal"
    ╟─bind
    ║ ├○ &STATS_SVALSIZE :decl(var)
    ║ └─:Block  ««"{ 'SValChars' }"
    ║   ╙◙ SVal "SValChars"
    ╟─bind
    ║ ├○ &int2str :decl(var)
    ║ └─:Block  ««"{ ~$i }"
    ║   ╟○ $i :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─stringify  ««"~"
    ║     └○ $i
    ╟─bind
    ║ ├○ &num2str :decl(var)
    ║ └─:Block  ««"{ ~$n }"
    ║   ╟○ $n :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─stringify  ««"~"
    ║     └○ $n
    ╟─bind
    ║ ├○ &strLit :decl(var)
    ║ └─:Block  ««"{ '\"' ~ nqp::escape($s) ~ '\"' }"
    ║   ╟○ $s :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─concat  ««"~"
    ║     ├─concat  ««"~"
    ║     │ ├◙ SVal "\""
    ║     │ └─escape  ««"nqp::escape($s)"
    ║     │   └○ $s
    ║     └◙ SVal "\""
    ╟─bind
    ║ ├○ &force :decl(var)
    ║ └─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable) ))  ««"{\n    nqp::isinvokable($v) ?? $v() !! $v;\n}"
    ║   ╟○ $v :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╙─if  ««"?? $v() !!"
    ║     ├─isinvokable  ««"nqp::isinvokable($v)"
    ║     │ └○ $v
    ║     ├─call  ««""
    ║     │ └○ $v
    ║     └○ $v
    ╟─bind
    ║ ├○ &delayMemo :decl(var)
    ║ └─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable) ))  ««"{\n    my int $wasRun := 0;\n    my $result := nqp:"...
    ║   ╟○ $block :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ $wasRun :decl(var)
    ║   ╟○ $result :decl(var)
    ║   ╟○ $out :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"int $wasRun := 0"
    ║   ║ ├○ $wasRun
    ║   ║ └◙ IVal 0
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$result := nqp::null"
    ║   ║ ├○ $result
    ║   ║ └─null  ««"nqp::null"
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$out := {\n        if $wasRun {\n            $resul"...
    ║   ║ ├○ $out
    ║   ║ └─:Block  ««"{\n        if $wasRun {\n            $result;\n    "...
    ║   ║   ╙─if  ««"$wasRun {\n            $result;\n        }"
    ║   ║     ├○ $wasRun
    ║   ║     ├○ $result
    ║   ║     └─:Stmts  ««"{\n            $wasRun := 1;\n            $result :"...
    ║   ║       ├─bind  ««":="
    ║   ║       │ ├○ $wasRun
    ║   ║       │ └◙ IVal 1
    ║   ║       └─bind  ««":="
    ║   ║         ├○ $result
    ║   ║         └─call  ««""
    ║   ║           └○ $block
    ║   ╙○ $out
    ╟─bind
    ║ ├○ &sublist :decl(var)
    ║ └─:Block :annotations(#`{BOOTHash:}nqp::hash( "compile_time_dummy", (BOOTCode, invokable) ))  ««"{\n    my int $n     := nqp::elems(@list);\n    my "...
    ║   ╟○ @list :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ $from :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟○ $n :decl(var)
    ║   ╟○ $count :decl(var)
    ║   ╟○ $to :decl(var)
    ║   ╟○ @out :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"int $n     := nqp::elems(@list)"
    ║   ║ ├○ $n
    ║   ║ └─elems  ««"nqp::elems(@list)"
    ║   ║   └○ @list
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"int $count := $n"
    ║   ║ ├○ $count
    ║   ║ └○ $n
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"int $to    := $from + $count"
    ║   ║ ├○ $to
    ║   ║ └─add_n  ««"+"
    ║   ║   ├○ $from
    ║   ║   └○ $count
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"@out   := []"
    ║   ║ ├○ @out
    ║   ║ └─list
    ║   ╟─if  ««"$to > $n {\n        $to := $n\n    }"
    ║   ║ ├─isgt_n  ««">"
    ║   ║ │ ├○ $to
    ║   ║ │ └○ $n
    ║   ║ └─bind  ««":="
    ║   ║   ├○ $to
    ║   ║   └○ $n
    ║   ╟─while  ««"$from < $to {\n        @out.push(@list[$from]);\n  "...
    ║   ║ ├─islt_n  ««"<"
    ║   ║ │ ├○ $from
    ║   ║ │ └○ $to
    ║   ║ ├─:Stmts  ««"{\n        @out.push(@list[$from]);\n        $from+"...
    ║   ║ │ ├─push  ««"@list[$from]"
    ║   ║ │ │ ├○ @out
    ║   ║ │ │ └─ifnull
    ║   ║ │ │   ├─atpos
    ║   ║ │ │   │ ├○ @list
    ║   ║ │ │   │ └○ $from
    ║   ║ │ │   └◙ WVal NQPMu
    ║   ║ │ └─postinc  ««"++"
    ║   ║ │   └○ $from
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╙○ @out
    ╟─bind
    ║ ├○ &lam2info :decl(var)
    ║ └─:Block  ««"{\n    my $id      := lam2id($lambda);\n    my $idx"...
    ║   ╟○ $lambda :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ $id :decl(var)
    ║   ╟○ $idx :decl(var)
    ║   ╟○ $infoIt :decl(var)
    ║   ╟○ $binder :decl(var)
    ║   ╟○ $from :decl(var)
    ║   ╟○ $length :decl(var)
    ║   ╟○ %out :decl(var)
    ║   ╟○ $varsIt :decl(var)
    ║   ╟○ $namesIt :decl(var)
    ║   ╟○ %fvs :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$id      := lam2id($lambda)"
    ║   ║ ├○ $id
    ║   ║ └─ifnull :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&lam2id" (str) ))  ««"$lambda"
    ║   ║   ├─atpos
    ║   ║   │ ├○ $lambda
    ║   ║   │ └◙ IVal 0 :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&LAMFIELD_ID" (str) ))
    ║   ║   └◙ WVal NQPMu
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$idx     := nqp::radix(10, $id, 1, 0)[0]"
    ║   ║ ├○ $idx
    ║   ║ └─ifnull
    ║   ║   ├─atpos
    ║   ║   │ ├─radix  ««"nqp::radix(10, $id, 1, 0)"
    ║   ║   │ │ ├◙ IVal 10
    ║   ║   │ │ ├○ $id
    ║   ║   │ │ ├◙ IVal 1
    ║   ║   │ │ └◙ IVal 0
    ║   ║   │ └◙ IVal 0
    ║   ║   └◙ WVal NQPMu
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$infoIt  := nqp::iterator(nqp::split(' ', %info<λ>["...
    ║   ║ ├○ $infoIt
    ║   ║ └─iterator  ««"nqp::iterator(nqp::split(' ', %info<λ>[$idx]))"
    ║   ║   └─split  ««"nqp::split(' ', %info<λ>[$idx])"
    ║   ║     ├◙ SVal " "
    ║   ║     └─ifnull
    ║   ║       ├─atpos
    ║   ║       │ ├─ifnull
    ║   ║       │ │ ├─atkey
    ║   ║       │ │ │ ├○ %info
    ║   ║       │ │ │ └◙ SVal "λ"
    ║   ║       │ │ └◙ WVal NQPMu
    ║   ║       │ └○ $idx
    ║   ║       └◙ WVal NQPMu
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$binder  := nqp::shift($infoIt)"
    ║   ║ ├○ $binder
    ║   ║ └─shift  ««"nqp::shift($infoIt)"
    ║   ║   └○ $infoIt
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$from    := nqp::shift($infoIt)"
    ║   ║ ├○ $from
    ║   ║ └─shift  ««"nqp::shift($infoIt)"
    ║   ║   └○ $infoIt
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$length  := nqp::shift($infoIt)"
    ║   ║ ├○ $length
    ║   ║ └─shift  ««"nqp::shift($infoIt)"
    ║   ║   └○ $infoIt
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%out     := nqp::hash(\n        'id',       $id,\n "...
    ║   ║ ├○ %out
    ║   ║ └─hash  ««"nqp::hash(\n        'id',       $id,\n        'idx'"...
    ║   ║   ├◙ SVal "id"
    ║   ║   ├○ $id
    ║   ║   ├◙ SVal "idx"
    ║   ║   ├○ $idx
    ║   ║   ├◙ SVal "binder"
    ║   ║   ├○ $binder
    ║   ║   ├◙ SVal "from"
    ║   ║   ├○ $from
    ║   ║   ├◙ SVal "length"
    ║   ║   ├○ $length
    ║   ║   ├◙ SVal "src"
    ║   ║   └─substr  ««"nqp::substr($λsrc, $from, $length)"
    ║   ║     ├○ $λsrc
    ║   ║     ├○ $from
    ║   ║     └○ $length
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$varsIt  := nqp::iterator(lam2fvs($lambda))"
    ║   ║ ├○ $varsIt
    ║   ║ └─iterator  ««"nqp::iterator(lam2fvs($lambda))"
    ║   ║   └─call &sublist :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&lam2fvs" (str) ))  ««"$lambda"
    ║   ║     ├○ $lambda
    ║   ║     └◙ IVal 2 :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&LAMFIELD_FREEVARS" (str) ))
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$namesIt := $infoIt"
    ║   ║ ├○ $namesIt
    ║   ║ └○ $infoIt
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%fvs     := {}"
    ║   ║ ├○ %fvs
    ║   ║ └─hash
    ║   ╟─while  ««"$varsIt {\n        %fvs{nqp::shift($namesIt)} := nq"...
    ║   ║ ├○ $varsIt
    ║   ║ ├─bindkey  ««":="
    ║   ║ │ ├○ %fvs
    ║   ║ │ ├─shift  ««"nqp::shift($namesIt)"
    ║   ║ │ │ └○ $namesIt
    ║   ║ │ └─shift  ««"nqp::shift($varsIt)"
    ║   ║ │   └○ $varsIt
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╟─bindkey  ««":="
    ║   ║ ├○ %out
    ║   ║ ├◙ SVal "freeVars"
    ║   ║ └○ %fvs
    ║   ╙○ %out
    ╟─bind
    ║ ├○ &typecase :decl(var)
    ║ └─:Block  ««"{\n    #say('>>>typecase(', nqp::reprname($subject)"...
    ║   ╟○ $subject :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ %callbacks :decl(param) :named(1) :slurpy(1)
    ║   ╟○ $otherwise :decl(var)
    ║   ╟○ $cbKey :decl(var)
    ║   ╟○ $cb :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$otherwise := nqp::defor(\n        %callbacks<other"...
    ║   ║ ├○ $otherwise
    ║   ║ └─defor  ««"nqp::defor(\n        %callbacks<otherwise>,\n      "...
    ║   ║   ├─ifnull
    ║   ║   │ ├─atkey
    ║   ║   │ │ ├○ %callbacks
    ║   ║   │ │ └◙ SVal "otherwise"
    ║   ║   │ └◙ WVal NQPMu
    ║   ║   └─:Block  ««"{ # compiler should see that this needs not be a cl"...
    ║   ║     ╟○ $x :decl(param)
    ║   ║     ╙─die  ««"nqp::die('typecase: fell through due to missing \"o"...
    ║   ║       └─concat  ««"~"
    ║   ║         ├◙ SVal "typecase: fell through due to missing \"otherwise\"-callback: "
    ║   ║         └─reprname  ««"nqp::reprname($subject)"
    ║   ║           └○ $subject
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$cbKey := nqp::null"
    ║   ║ ├○ $cbKey
    ║   ║ └─null  ««"nqp::null"
    ║   ╟─if  ««"nqp::islist($subject) {\n        my $id := $subject"...
    ║   ║ ├─islist  ««"nqp::islist($subject)"
    ║   ║ │ └○ $subject
    ║   ║ ├─:Block :blocktype(immediate)  ««"{\n        my $id := $subject[0];\n        my $tag "...
    ║   ║ │ ╟○ $id :decl(var)
    ║   ║ │ ╟○ $tag :decl(var)
    ║   ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$id := $subject[0]"
    ║   ║ │ ║ ├○ $id
    ║   ║ │ ║ └─ifnull
    ║   ║ │ ║   ├─atpos
    ║   ║ │ ║   │ ├○ $subject
    ║   ║ │ ║   │ └◙ IVal 0
    ║   ║ │ ║   └◙ WVal NQPMu
    ║   ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$tag := nqp::substr($id, 0, 1)"
    ║   ║ │ ║ ├○ $tag
    ║   ║ │ ║ └─substr  ««"nqp::substr($id, 0, 1)"
    ║   ║ │ ║   ├○ $id
    ║   ║ │ ║   ├◙ IVal 0
    ║   ║ │ ║   └◙ IVal 1
    ║   ║ │ ╙─if  ««"$tag eq 'λ' {\n            $cbKey := $tag;\n        }"
    ║   ║ │   ├─iseq_s  ««"eq"
    ║   ║ │   │ ├○ $tag
    ║   ║ │   │ └◙ SVal "λ"
    ║   ║ │   ├─bind  ««":="
    ║   ║ │   │ ├○ $cbKey
    ║   ║ │   │ └○ $tag
    ║   ║ │   └─if  ««"nqp::elems($subject) == 0 {\n                nqp::d"...
    ║   ║ │     ├─iseq_n  ««"=="
    ║   ║ │     │ ├─elems  ««"nqp::elems($subject)"
    ║   ║ │     │ │ └○ $subject
    ║   ║ │     │ └◙ IVal 0
    ║   ║ │     ├─die  ««"nqp::die('typecase: unsupported low-level list type"...
    ║   ║ │     │ └◙ SVal "typecase: unsupported low-level list type - empty"
    ║   ║ │     └─die  ««"nqp::die('typecase: unsupported low-level list type"...
    ║   ║ │       └─concat  ««"~"
    ║   ║ │         ├◙ SVal "typecase: unsupported low-level list type - invalid tag "
    ║   ║ │         └─reprname  ««"nqp::reprname($tag)"
    ║   ║ │           └○ $tag
    ║   ║ └─if  ««"nqp::isstr($subject) { $cbKey := 'str';\n        }"
    ║   ║   ├─isstr  ««"nqp::isstr($subject)"
    ║   ║   │ └○ $subject
    ║   ║   ├─bind  ««":="
    ║   ║   │ ├○ $cbKey
    ║   ║   │ └◙ SVal "str"
    ║   ║   └─if  ««"nqp::isint($subject) { $cbKey := 'int';\n        }"
    ║   ║     ├─isint  ««"nqp::isint($subject)"
    ║   ║     │ └○ $subject
    ║   ║     ├─bind  ««":="
    ║   ║     │ ├○ $cbKey
    ║   ║     │ └◙ SVal "int"
    ║   ║     └─if  ««"nqp::isnum($subject) { $cbKey := 'num';\n        }"
    ║   ║       ├─isnum  ««"nqp::isnum($subject)"
    ║   ║       │ └○ $subject
    ║   ║       ├─bind  ««":="
    ║   ║       │ ├○ $cbKey
    ║   ║       │ └◙ SVal "num"
    ║   ║       └─die  ««"nqp::die('typecase: unsupported low-level type ' ~ "...
    ║   ║         └─concat  ««"~"
    ║   ║           ├◙ SVal "typecase: unsupported low-level type "
    ║   ║           └─reprname  ««"nqp::reprname($subject)"
    ║   ║             └○ $subject
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$cb := nqp::defor(%callbacks{$cbKey}, $otherwise)"
    ║   ║ ├○ $cb
    ║   ║ └─defor  ««"nqp::defor(%callbacks{$cbKey}, $otherwise)"
    ║   ║   ├─ifnull
    ║   ║   │ ├─atkey
    ║   ║   │ │ ├○ %callbacks
    ║   ║   │ │ └○ $cbKey
    ║   ║   │ └◙ WVal NQPMu
    ║   ║   └○ $otherwise
    ║   ╙─call  ««"$subject"
    ║     ├○ $cb
    ║     └○ $subject
    ╟─bind
    ║ ├○ &strOut :decl(var)
    ║ └─:Block  ««"{\n    typecase(force($v),\n        :λ(-> $lambda {"...
    ║   ╟○ $v :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ $indent :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) )) :default(SVal "")
    ║   ╟○ %done :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 2 (int) )) :default(hash)
    ║   ╙─call &typecase  ««"force($v),\n        :λ(-> $lambda { # compiler shou"...
    ║     ├─if :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&force" (str) ))  ««"$v"
    ║     │ ├─isinvokable  ««"nqp::isinvokable($v)"
    ║     │ │ └○ $v
    ║     │ ├─call  ««""
    ║     │ │ └○ $v
    ║     │ └○ $v
    ║     ├─:Block :named("λ")  ««"{ # compiler should see that this needs not be a cl"...
    ║     │ ╟○ $lambda :decl(param)
    ║     │ ╟○ %info :decl(var)
    ║     │ ╟○ $src :decl(var)
    ║     │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%info := lam2info($lambda)"
    ║     │ ║ ├○ %info
    ║     │ ║ └─call &lam2info  ««"$lambda"
    ║     │ ║   └○ $lambda
    ║     │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$src := %info<src>"
    ║     │ ║ ├○ $src
    ║     │ ║ └─ifnull
    ║     │ ║   ├─atkey
    ║     │ ║   │ ├○ %info
    ║     │ ║   │ └◙ SVal "src"
    ║     │ ║   └◙ WVal NQPMu
    ║     │ ╟─for  ««"%info<freeVars> {\n                my $fvName  := $"...
    ║     │ ║ ├─ifnull
    ║     │ ║ │ ├─atkey
    ║     │ ║ │ │ ├○ %info
    ║     │ ║ │ │ └◙ SVal "freeVars"
    ║     │ ║ │ └◙ WVal NQPMu
    ║     │ ║ ├─:Block :blocktype(immediate)  ««"{\n                my $fvName  := $_.key;\n        "...
    ║     │ ║ │ ╟○ $fvName :decl(var)
    ║     │ ║ │ ╟○ $fv :decl(var)
    ║     │ ║ │ ╟○ $pre :decl(var)
    ║     │ ║ │ ╟○ $flatVal :decl(var)
    ║     │ ║ │ ╟○ $doneKey :decl(var)
    ║     │ ║ │ ╟○ $_ :decl(param)
    ║     │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$fvName  := $_.key"
    ║     │ ║ │ ║ ├○ $fvName
    ║     │ ║ │ ║ └─iterkey_s  ««".key"
    ║     │ ║ │ ║   └○ $_
    ║     │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$fv      := $_.value"
    ║     │ ║ │ ║ ├○ $fv
    ║     │ ║ │ ║ └─callmethod value  ««".value"
    ║     │ ║ │ ║   └○ $_
    ║     │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$pre     := \"# where $fvName = \""
    ║     │ ║ │ ║ ├○ $pre
    ║     │ ║ │ ║ └─concat
    ║     │ ║ │ ║   ├─concat
    ║     │ ║ │ ║   │ ├◙ SVal "# where "
    ║     │ ║ │ ║   │ └○ $fvName
    ║     │ ║ │ ║   └◙ SVal " = "
    ║     │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$flatVal := typecase($fv,\n                    :λ(-"...
    ║     │ ║ │ ║ ├○ $flatVal
    ║     │ ║ │ ║ └─call &typecase  ««"$fv,\n                    :λ(-> $x { nqp::null }), "...
    ║     │ ║ │ ║   ├○ $fv
    ║     │ ║ │ ║   ├─:Block :named("λ")  ««"{ nqp::null }"
    ║     │ ║ │ ║   │ ╟○ $x :decl(param)
    ║     │ ║ │ ║   │ ╙─null  ««"nqp::null"
    ║     │ ║ │ ║   ├○ &strLit :named("str")
    ║     │ ║ │ ║   ├○ &int2str :named("int")
    ║     │ ║ │ ║   └○ &num2str :named("num")
    ║     │ ║ │ ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$doneKey := nqp::isnull($flatVal)\n                "...
    ║     │ ║ │ ║ ├○ $doneKey
    ║     │ ║ │ ║ └─if  ««"?? $pre ~ lam2id($fv)\n                    !!"
    ║     │ ║ │ ║   ├─isnull  ««"nqp::isnull($flatVal)"
    ║     │ ║ │ ║   │ └○ $flatVal
    ║     │ ║ │ ║   ├─concat  ««"~"
    ║     │ ║ │ ║   │ ├○ $pre
    ║     │ ║ │ ║   │ └─ifnull :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&lam2id" (str) ))  ««"$fv"
    ║     │ ║ │ ║   │   ├─atpos
    ║     │ ║ │ ║   │   │ ├○ $fv
    ║     │ ║ │ ║   │   │ └◙ IVal 0 :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&LAMFIELD_ID" (str) ))
    ║     │ ║ │ ║   │   └◙ WVal NQPMu
    ║     │ ║ │ ║   └─concat  ««"~"
    ║     │ ║ │ ║     ├○ $pre
    ║     │ ║ │ ║     └○ $flatVal
    ║     │ ║ │ ╙─unless  ««"%done{$doneKey} {\n                    %done{$doneK"...
    ║     │ ║ │   ├─ifnull
    ║     │ ║ │   │ ├─atkey
    ║     │ ║ │   │ │ ├○ %done
    ║     │ ║ │   │ │ └○ $doneKey
    ║     │ ║ │   │ └◙ WVal NQPMu
    ║     │ ║ │   └─:Stmts  ««"{\n                    %done{$doneKey} := 1;\n     "...
    ║     │ ║ │     ├─bindkey  ««":="
    ║     │ ║ │     │ ├○ %done
    ║     │ ║ │     │ ├○ $doneKey
    ║     │ ║ │     │ └◙ IVal 1
    ║     │ ║ │     └─bind  ««":="
    ║     │ ║ │       ├○ $src
    ║     │ ║ │       └─concat  ««"~"
    ║     │ ║ │         ├─concat  ««"~"
    ║     │ ║ │         │ ├─concat  ««"~"
    ║     │ ║ │         │ │ ├○ $src
    ║     │ ║ │         │ │ └◙ SVal "\n"
    ║     │ ║ │         │ └○ $indent
    ║     │ ║ │         └─if  ««"?? $pre ~ strOut($fv, $indent ~ '#' ~ nqp::x(' ', n"...
    ║     │ ║ │           ├─isnull  ««"nqp::isnull($flatVal)"
    ║     │ ║ │           │ └○ $flatVal
    ║     │ ║ │           ├─concat  ««"~"
    ║     │ ║ │           │ ├○ $pre
    ║     │ ║ │           │ └─call &strOut  ««"$fv, $indent ~ '#' ~ nqp::x(' ', nqp::chars($pre) -"...
    ║     │ ║ │           │   ├○ $fv
    ║     │ ║ │           │   ├─concat  ««"~"
    ║     │ ║ │           │   │ ├─concat  ««"~"
    ║     │ ║ │           │   │ │ ├○ $indent
    ║     │ ║ │           │   │ │ └◙ SVal "#"
    ║     │ ║ │           │   │ └─x  ««"nqp::x(' ', nqp::chars($pre) - 1)"
    ║     │ ║ │           │   │   ├◙ SVal " "
    ║     │ ║ │           │   │   └─sub_n  ««"-"
    ║     │ ║ │           │   │     ├─chars  ««"nqp::chars($pre)"
    ║     │ ║ │           │   │     │ └○ $pre
    ║     │ ║ │           │   │     └◙ IVal 1
    ║     │ ║ │           │   └○ %done
    ║     │ ║ │           └○ $doneKey
    ║     │ ║ └◙ IVal 1 :named("nohandler")
    ║     │ ╙○ $src
    ║     ├○ &strLit :named("str")
    ║     ├○ &int2str :named("int")
    ║     └○ &num2str :named("num")
    ╟─bind
    ║ ├○ &apply1 :decl(var)
    ║ └─:Block  ««"{\n    my $result := typecase(force($f),\n        :"...
    ║   ╟○ $f :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ $a1 :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟○ $result :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$result := typecase(force($f),\n        :λ(&lam2cod"...
    ║   ║ ├○ $result
    ║   ║ └─call  ««"$a1"
    ║   ║   ├─call &typecase  ««"force($f),\n        :λ(&lam2code),\n        :otherw"...
    ║   ║   │ ├─if :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&force" (str) ))  ««"$f"
    ║   ║   │ │ ├─isinvokable  ««"nqp::isinvokable($v)"
    ║   ║   │ │ │ └○ $f
    ║   ║   │ │ ├─call  ««""
    ║   ║   │ │ │ └○ $f
    ║   ║   │ │ └○ $f
    ║   ║   │ ├○ &lam2code :named("λ")
    ║   ║   │ └─:Block :named("otherwise")  ««"{\n            nqp::die('ERROR: cannot apply ' ~ st"...
    ║   ║   │   ╟○ $x :decl(param)
    ║   ║   │   ╙─die  ««"nqp::die('ERROR: cannot apply ' ~ strOut($x) ~ ' to"...
    ║   ║   │     └─concat  ««"~"
    ║   ║   │       ├─concat  ««"~"
    ║   ║   │       │ ├─concat  ««"~"
    ║   ║   │       │ │ ├◙ SVal "ERROR: cannot apply "
    ║   ║   │       │ │ └─call &strOut  ««"$x"
    ║   ║   │       │ │   └○ $x
    ║   ║   │       │ └◙ SVal " to "
    ║   ║   │       └─call &strOut  ««"$a1"
    ║   ║   │         └○ $a1
    ║   ║   └○ $a1
    ║   ╙─if :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&force" (str) ))  ««"$result"
    ║     ├─isinvokable  ««"nqp::isinvokable($v)"
    ║     │ └○ $result
    ║     ├─call  ««""
    ║     │ └○ $result
    ║     └○ $result
    ╟─bind
    ║ ├○ &join :decl(var)
    ║ └─:Block  ««"{\n    my $_;\n    my str $s := '';\n    my $i := n"...
    ║   ╟○ $sep :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) ))
    ║   ╟○ @pieces :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 1 (int) ))
    ║   ╟─bind  ««"$_"
    ║   ║ ├○ $_ :decl(var)
    ║   ║ └◙ WVal NQPMu
    ║   ╟○ $s :decl(var)
    ║   ╟○ $i :decl(var)
    ║   ╟○ $_
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"str $s := ''"
    ║   ║ ├○ $s
    ║   ║ └◙ SVal ""
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$i := nqp::iterator(@pieces)"
    ║   ║ ├○ $i
    ║   ║ └─iterator  ««"nqp::iterator(@pieces)"
    ║   ║   └○ @pieces
    ║   ╟─if  ««"$i {\n        $s := nqp::shift($i);  # nqpc would c"...
    ║   ║ ├○ $i
    ║   ║ └─:Stmts  ««"{\n        $s := nqp::shift($i);  # nqpc would conv"...
    ║   ║   ├─bind  ««":="
    ║   ║   │ ├○ $s
    ║   ║   │ └─shift  ««"nqp::shift($i)"
    ║   ║   │   └○ $i
    ║   ║   ├─unless  ««"$s := strOut($s)\n            unless nqp::isstr($s)"
    ║   ║   │ ├─isstr  ««"nqp::isstr($s)"
    ║   ║   │ │ └○ $s
    ║   ║   │ └─bind  ««":="
    ║   ║   │   ├○ $s
    ║   ║   │   └─call &strOut  ««"$s"
    ║   ║   │     └○ $s
    ║   ║   └─while  ««"$i {\n            $_ := nqp::shift($i);  # nqpc wou"...
    ║   ║     ├○ $i
    ║   ║     ├─:Stmts  ««"{\n            $_ := nqp::shift($i);  # nqpc would "...
    ║   ║     │ ├─bind  ««":="
    ║   ║     │ │ ├○ $_
    ║   ║     │ │ └─shift  ««"nqp::shift($i)"
    ║   ║     │ │   └○ $i
    ║   ║     │ └─bind  ««":="
    ║   ║     │   ├○ $s
    ║   ║     │   └─concat  ««"~"
    ║   ║     │     ├─concat  ««"~"
    ║   ║     │     │ ├○ $s
    ║   ║     │     │ └○ $sep
    ║   ║     │     └─if  ««"?? $_\n                !!"
    ║   ║     │       ├─isstr  ««"nqp::isstr($_)"
    ║   ║     │       │ └○ $_
    ║   ║     │       ├○ $_
    ║   ║     │       └─call &strOut  ««"$_"
    ║   ║     │         └○ $_
    ║   ║     └◙ IVal 1 :named("nohandler")
    ║   ╙○ $s
    ╟─bind
    ║ ├○ &say :decl(var)
    ║ └─:Block  ««"{\n    nqp::say(join('', @args));\n}"
    ║   ╟○ @args :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) )) :slurpy(1)
    ║   ╙─say  ««"nqp::say(join('', @args))"
    ║     └─call &join  ««"'', @args"
    ║       ├◙ SVal ""
    ║       └○ @args
    ╟─bind
    ║ ├○ &stats :decl(var)
    ║ └─:Block  ««"{\n    my %stats := %info<stats>;\n    join('', [\n"...
    ║   ╟○ %stats :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%stats := %info<stats>"
    ║   ║ ├○ %stats
    ║   ║ └─ifnull
    ║   ║   ├─atkey
    ║   ║   │ ├○ %info
    ║   ║   │ └◙ SVal "stats"
    ║   ║   └◙ WVal NQPMu
    ║   ╙─call &join  ««"'', [\n        %stats{STATS_LAMBDACOUNT() }, \" lam"...
    ║     ├◙ SVal ""
    ║     └─list  ««","
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "lambda" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_LAMBDACOUNT" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " lambdas\n"
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "Node" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_QASTSIZE" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " QAST::Node s\n"
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "Block" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_BLOCKCOUNT" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " QAST::Block s\n"
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "list" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_LISTCOUNT" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " QAST::Op(list) s\n"
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "IVal" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_IVALCOUNT" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " QAST::IVal s\n"
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "SValChars" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_SVALSIZE" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " chars ttl in "
    ║       ├─ifnull
    ║       │ ├─atkey
    ║       │ │ ├○ %stats
    ║       │ │ └◙ SVal "SVal" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_SVALCOUNT" (str) ))
    ║       │ └◙ WVal NQPMu
    ║       ├◙ SVal " QAST::SVal s\n"
    ║       └◙ SVal "------------------------------------------------"
    ╟─bind
    ║ ├○ &MAIN :decl(var)
    ║ └─:Block  ««"{\n    my $lambda2 := [\n        'λ1',             "...
    ║   ╟○ @ARGS :decl(param) :annotations(#`{BOOTHash:}nqp::hash( "positional_index", 0 (int) )) :slurpy(1)
    ║   ╟○ $lambda2 :decl(var)
    ║   ╟○ $lambda1 :decl(var)
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$lambda2 := [\n        'λ1',                       "...
    ║   ║ ├○ $lambda2
    ║   ║ └─list  ««","
    ║   ║   ├◙ SVal "λ1"
    ║   ║   ├─:Block  ««"{ 'λ1(...) called' }"
    ║   ║   │ ╟○ @as :decl(param) :slurpy(1)
    ║   ║   │ ╙◙ SVal "λ1(...) called"
    ║   ║   └◙ IVal 23
    ║   ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$lambda1 := [\n        'λ0',                       "...
    ║   ║ ├○ $lambda1
    ║   ║ └─list  ««","
    ║   ║   ├◙ SVal "λ0"
    ║   ║   ├─:Block  ««"{ 'λ0(...) called' }"
    ║   ║   │ ╟○ @as :decl(param) :slurpy(1)
    ║   ║   │ ╙◙ SVal "λ0(...) called"
    ║   ║   ├◙ SVal "foo"
    ║   ║   ├◙ IVal 42
    ║   ║   ├◙ NVal 3.14159265
    ║   ║   └○ $lambda2
    ║   ╟─push  ««"$lambda1"
    ║   ║ ├○ $lambda1
    ║   ║ └○ $lambda1
    ║   ╟─push  ««"$lambda1"
    ║   ║ ├○ $lambda1
    ║   ║ └○ $lambda1
    ║   ╟─call &say  ««"strOut($lambda1)"
    ║   ║ └─call &strOut  ««"$lambda1"
    ║   ║   └○ $lambda1
    ║   ╟─call &say  ««"%info<stats>{STATS_QASTSIZE()}"
    ║   ║ └─ifnull
    ║   ║   ├─atkey
    ║   ║   │ ├─ifnull
    ║   ║   │ │ ├─atkey
    ║   ║   │ │ │ ├○ %info
    ║   ║   │ │ │ └◙ SVal "stats"
    ║   ║   │ │ └◙ WVal NQPMu
    ║   ║   │ └◙ SVal "Node" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_QASTSIZE" (str) ))
    ║   ║   └◙ WVal NQPMu
    ║   ╙─call &say  ««"stats()"
    ║     └─call &stats  ««""
    ╟─bind
    ║ ├○ local ctxsave :decl(var)
    ║ └○ contextual $*CTXSAVE
    ╟─unless
    ║ ├─isnull
    ║ │ └○ local ctxsave
    ║ └─if
    ║   ├─can
    ║   │ ├○ local ctxsave
    ║   │ └◙ SVal "ctxsave"
    ║   └─callmethod ctxsave
    ║     └○ local ctxsave
    ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"$λsrc := '(λf.λstart.λxs.xs start (λhd.λtl.self f ("...
    ║ ├○ $λsrc
    ║ └◙ SVal "(λf.λstart.λxs.xs start (λhd.λtl.self f (f start hd) tl)) (λ_.x)"
    ╟─bind :annotations(#`{BOOTHash:}nqp::hash( "var_initialized", 1 (int) ))  ««"%info := nqp::hash(\n    'λ', [\n        'binder0 1"...
    ║ ├○ %info
    ║ └─hash  ««"nqp::hash(\n    'λ', [\n        'binder0 1 55 foo b"...
    ║   ├◙ SVal "λ"
    ║   ├─list  ««","
    ║   │ ├◙ SVal "binder0 1 55 foo bar baz qumbl self self"
    ║   │ └◙ SVal "binder1 59 4 foo"
    ║   ├◙ SVal "stats"
    ║   └─hash  ««"nqp::hash( # to be filled in by compiler\n        S"...
    ║     ├◙ SVal "Node" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_QASTSIZE" (str) ))
    ║     ├◙ IVal -1
    ║     ├◙ SVal "Block" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_BLOCKCOUNT" (str) ))
    ║     ├◙ IVal -1
    ║     ├◙ SVal "list" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_LISTCOUNT" (str) ))
    ║     ├◙ IVal -1
    ║     ├◙ SVal "lambda" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_LAMBDACOUNT" (str) ))
    ║     ├◙ IVal -1
    ║     ├◙ SVal "IVal" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_IVALCOUNT" (str) ))
    ║     ├◙ IVal -1
    ║     ├◙ SVal "SVal" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_SVALCOUNT" (str) ))
    ║     ├◙ IVal -1
    ║     ├◙ SVal "SValChars" :annotations(#`{BOOTHash:}nqp::hash( "inlined", "&STATS_SVALSIZE" (str) ))
    ║     └◙ IVal -1
    ╟○ &LAMFIELD_ID
    ╟○ &LAMFIELD_CODE
    ╟○ &LAMFIELD_FREEVARS
    ╟○ &lam2id
    ╟○ &lam2code
    ╟○ &lam2fvs
    ╟○ &STATS_QASTSIZE
    ╟○ &STATS_BLOCKCOUNT
    ╟○ &STATS_LISTCOUNT
    ╟○ &STATS_LAMBDACOUNT
    ╟○ &STATS_CALLISHCOUNT
    ╟○ &STATS_IVALCOUNT
    ╟○ &STATS_SVALCOUNT
    ╟○ &STATS_SVALSIZE
    ╟○ &int2str
    ╟○ &num2str
    ╟○ &strLit
    ╟○ &force
    ╟○ &delayMemo
    ╟○ &sublist
    ╟○ &lam2info
    ╟○ &typecase
    ╟○ &strOut
    ╟○ &apply1
    ╟○ &join
    ╟○ &say
    ╟○ &stats
    ╟○ &MAIN
    ╙─if
      ├○ @ARGS
      └─call &MAIN
        └○ @ARGS :flat(1)