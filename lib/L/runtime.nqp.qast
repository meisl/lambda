──CompUnit+{StrByDump}
  └─:Block
    ╟○ local __lowered_lex_61 :decl(param) :slurpy(1)
    ╟○ lexical GLOBALish :decl(static) :default(P6opaque)
    ╟○ lexical $?PACKAGE :decl(static) :default(P6opaque)
    ╟○ lexical EXPORT :decl(static) :default(P6opaque)
    ╟─bind
    ║ ├○ lexical .LAMFIELD_ID :decl(var)
    ║ └─:Block  ««"{ 0 }"
    ║   ╙◙ IVal 0
    ╟─bind
    ║ ├○ lexical .LAMFIELD_CODE :decl(var)
    ║ └─:Block  ««"{ 1 }"
    ║   ╙◙ IVal 1
    ╟─bind
    ║ ├○ lexical .LAMFIELD_FREEVARS :decl(var)
    ║ └─:Block  ««"{ 2 }"
    ║   ╙◙ IVal 2
    ╟─bind
    ║ ├○ lexical .lam2id :decl(var)
    ║ └─:Block  ««"{ $lam[LAMFIELD_ID()] }"
    ║   ╟○ local __lowered_lex_1 :decl(param)
    ║   ╙─atpos
    ║     ├○ local __lowered_lex_1
    ║     └◙ IVal 0
    ╟─bind
    ║ ├○ lexical .lam2code :decl(var)
    ║ └─:Block  ««"{ $lam[LAMFIELD_CODE()] }"
    ║   ╟○ local __lowered_lex_2 :decl(param)
    ║   ╙─atpos
    ║     ├○ local __lowered_lex_2
    ║     └◙ IVal 1
    ╟─bind
    ║ ├○ lexical .lam2fvs :decl(var)
    ║ └─:Block  ««"{ sublist($lam, LAMFIELD_FREEVARS()) }"
    ║   ╟○ local __lowered_lex_3 :decl(param)
    ║   ╙─callstatic .sublist  ««"$lam, LAMFIELD_FREEVARS()"
    ║     ├○ local __lowered_lex_3
    ║     └◙ IVal 2
    ╟─bind
    ║ ├○ lexical .STATS_QASTSIZE :decl(var)
    ║ └─:Block  ««"{ 'qastSize'    }"
    ║   ╙◙ SVal "qastSize"
    ╟─bind
    ║ ├○ lexical .STATS_BLOCKCOUNT :decl(var)
    ║ └─:Block  ««"{ 'blockCount'  }"
    ║   ╙◙ SVal "blockCount"
    ╟─bind
    ║ ├○ lexical .STATS_LISTCOUNT :decl(var)
    ║ └─:Block  ««"{ 'listCount'   }"
    ║   ╙◙ SVal "listCount"
    ╟─bind
    ║ ├○ lexical .STATS_LAMBDACOUNT :decl(var)
    ║ └─:Block  ««"{ 'lambdaCount' }"
    ║   ╙◙ SVal "lambdaCount"
    ╟─bind
    ║ ├○ lexical .STATS_IVALCOUNT :decl(var)
    ║ └─:Block  ««"{ 'ivalCount'   }"
    ║   ╙◙ SVal "ivalCount"
    ╟─bind
    ║ ├○ lexical .STATS_SVALCOUNT :decl(var)
    ║ └─:Block  ««"{ 'svalCount'   }"
    ║   ╙◙ SVal "svalCount"
    ╟─bind
    ║ ├○ lexical .STATS_SVALSIZE :decl(var)
    ║ └─:Block  ««"{ 'svalSize'    }"
    ║   ╙◙ SVal "svalSize"
    ╟─bind
    ║ ├○ lexical .int2str :decl(var)
    ║ └─:Block  ««"{ ~$i }"
    ║   ╟○ local __lowered_lex_4 :decl(param)
    ║   ╙─stringify  ««"~"
    ║     └○ local __lowered_lex_4
    ╟─bind
    ║ ├○ lexical .num2str :decl(var)
    ║ └─:Block  ««"{ ~$n }"
    ║   ╟○ local __lowered_lex_5 :decl(param)
    ║   ╙─stringify  ««"~"
    ║     └○ local __lowered_lex_5
    ╟─bind
    ║ ├○ lexical .strLit :decl(var)
    ║ └─:Block  ««"{ '\"' ~ nqp::escape($s) ~ '\"' }"
    ║   ╟○ local __lowered_lex_6 :decl(param)
    ║   ╙─concat  ««"~"
    ║     ├─concat  ««"~"
    ║     │ ├◙ SVal "\""
    ║     │ └─escape  ««"nqp::escape($s)"
    ║     │   └○ local __lowered_lex_6
    ║     └◙ SVal "\""
    ╟○ lexical .λsrc :decl(var)
    ╟○ lexical %info :decl(var)
    ╟─bind
    ║ ├○ lexical .force :decl(var)
    ║ └─:Block  ««"{\n    nqp::isinvokable($v) ?? $v() !! $v;\n}"
    ║   ╟○ local __lowered_lex_7 :decl(param)
    ║   ╙─if  ««"?? $v() !!"
    ║     ├─isinvokable  ««"nqp::isinvokable($v)"
    ║     │ └○ local __lowered_lex_7
    ║     ├─call  ««""
    ║     │ └○ local __lowered_lex_7
    ║     └○ local __lowered_lex_7
    ╟─bind
    ║ ├○ lexical .delayMemo :decl(var)
    ║ └─:Block  ««"{\n    my int $wasRun := 0;\n    my $result := nqp:"...
    ║   ╟○ lexical $block :decl(param)
    ║   ╟○ lexical $wasRun :decl(var)
    ║   ╟○ lexical $result :decl(var)
    ║   ╟○ local __lowered_lex_8 :decl(var)
    ║   ╟─bind  ««"int $wasRun := 0"
    ║   ║ ├○ lexical $wasRun
    ║   ║ └◙ IVal 0
    ║   ╟─bind  ««"$result := nqp::null"
    ║   ║ ├○ lexical $result
    ║   ║ └─null  ««"nqp::null"
    ║   ╟─bind  ««"$out := {\n        if $wasRun {\n            $resul"...
    ║   ║ ├○ local __lowered_lex_8
    ║   ║ └─:Block  ««"{\n        if $wasRun {\n            $result;\n    "...
    ║   ║   ╙─if  ««"$wasRun {\n            $result;\n        }"
    ║   ║     ├○ lexical $wasRun
    ║   ║     ├○ lexical $result
    ║   ║     └─:Stmts  ««"{\n            $wasRun := 1;\n            $result :"...
    ║   ║       ├─bind  ««":="
    ║   ║       │ ├○ lexical $wasRun
    ║   ║       │ └◙ IVal 1
    ║   ║       └─bind  ««":="
    ║   ║         ├○ lexical $result
    ║   ║         └─call  ««""
    ║   ║           └○ lexical $block
    ║   ╙○ local __lowered_lex_8
    ╟─bind
    ║ ├○ lexical .sublist :decl(var)
    ║ └─:Block  ««"{\n    my int $n     := nqp::elems(@list);\n    my "...
    ║   ╟○ local __lowered_lex_9 :decl(param)
    ║   ╟○ local __lowered_lex_10 :decl(param)
    ║   ╟○ local __lowered_lex_11 :decl(var)
    ║   ╟○ local __lowered_lex_12 :decl(var)
    ║   ╟○ local __lowered_lex_13 :decl(var)
    ║   ╟○ local __lowered_lex_14 :decl(var)
    ║   ╟─bind  ««"int $n     := nqp::elems(@list)"
    ║   ║ ├○ local __lowered_lex_11
    ║   ║ └─elems  ««"nqp::elems(@list)"
    ║   ║   └○ local __lowered_lex_9
    ║   ╟─bind  ««"int $count := $n"
    ║   ║ ├○ local __lowered_lex_12
    ║   ║ └○ local __lowered_lex_11
    ║   ╟─bind  ««"int $to    := $from + $count"
    ║   ║ ├○ local __lowered_lex_13
    ║   ║ └─add_i  ««"+"
    ║   ║   ├○ local __lowered_lex_10
    ║   ║   └○ local __lowered_lex_12
    ║   ╟─bind  ««"@out   := []"
    ║   ║ ├○ local __lowered_lex_14
    ║   ║ └─list
    ║   ╟─if  ««"$to > $n {\n        $to := $n\n    }"
    ║   ║ ├─isgt_i  ««">"
    ║   ║ │ ├○ local __lowered_lex_13
    ║   ║ │ └○ local __lowered_lex_11
    ║   ║ └─bind  ««":="
    ║   ║   ├○ local __lowered_lex_13
    ║   ║   └○ local __lowered_lex_11
    ║   ╟─while  ««"$from < $to {\n        @out.push(@list[$from]);\n  "...
    ║   ║ ├─islt_i  ««"<"
    ║   ║ │ ├○ local __lowered_lex_10
    ║   ║ │ └○ local __lowered_lex_13
    ║   ║ ├─:Stmts  ««"{\n        @out.push(@list[$from]);\n        $from+"...
    ║   ║ │ ├─push  ««"@list[$from]"
    ║   ║ │ │ ├○ local __lowered_lex_14
    ║   ║ │ │ └─atpos
    ║   ║ │ │   ├○ local __lowered_lex_9
    ║   ║ │ │   └○ local __lowered_lex_10
    ║   ║ │ └─postinc  ««"++"
    ║   ║ │   └○ local __lowered_lex_10
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╙○ local __lowered_lex_14
    ╟─bind
    ║ ├○ lexical .lam2info :decl(var)
    ║ └─:Block  ««"{\n    my $id      := lam2id($lambda);\n    my $idx"...
    ║   ╟○ local __lowered_lex_15 :decl(param)
    ║   ╟○ local __lowered_lex_16 :decl(var)
    ║   ╟○ local __lowered_lex_17 :decl(var)
    ║   ╟○ local __lowered_lex_18 :decl(var)
    ║   ╟○ local __lowered_lex_19 :decl(var)
    ║   ╟○ local __lowered_lex_20 :decl(var)
    ║   ╟○ local __lowered_lex_21 :decl(var)
    ║   ╟○ local __lowered_lex_22 :decl(var)
    ║   ╟○ local __lowered_lex_23 :decl(var)
    ║   ╟○ local __lowered_lex_24 :decl(var)
    ║   ╟○ local __lowered_lex_25 :decl(var)
    ║   ╟─bind  ««"$id      := lam2id($lambda)"
    ║   ║ ├○ local __lowered_lex_16
    ║   ║ └─atpos  ««"$lambda"
    ║   ║   ├○ local __lowered_lex_15
    ║   ║   └◙ IVal 0
    ║   ╟─bind  ««"$idx     := nqp::radix(10, $id, 1, 0)[0]"
    ║   ║ ├○ local __lowered_lex_17
    ║   ║ └─atpos
    ║   ║   ├─radix  ««"nqp::radix(10, $id, 1, 0)"
    ║   ║   │ ├◙ IVal 10
    ║   ║   │ ├○ local __lowered_lex_16
    ║   ║   │ ├◙ IVal 1
    ║   ║   │ └◙ IVal 0
    ║   ║   └◙ IVal 0
    ║   ╟─bind  ««"$infoIt  := nqp::iterator(nqp::split(' ', %info<λ>["...
    ║   ║ ├○ local __lowered_lex_18
    ║   ║ └─iterator  ««"nqp::iterator(nqp::split(' ', %info<λ>[$idx]))"
    ║   ║   └─split  ««"nqp::split(' ', %info<λ>[$idx])"
    ║   ║     ├◙ SVal " "
    ║   ║     └─atpos
    ║   ║       ├─atkey
    ║   ║       │ ├○ lexical %info
    ║   ║       │ └◙ SVal "λ"
    ║   ║       └○ local __lowered_lex_17
    ║   ╟─bind  ««"$binder  := nqp::shift($infoIt)"
    ║   ║ ├○ local __lowered_lex_19
    ║   ║ └─shift  ««"nqp::shift($infoIt)"
    ║   ║   └○ local __lowered_lex_18
    ║   ╟─bind  ««"$from    := nqp::shift($infoIt)"
    ║   ║ ├○ local __lowered_lex_20
    ║   ║ └─shift  ««"nqp::shift($infoIt)"
    ║   ║   └○ local __lowered_lex_18
    ║   ╟─bind  ««"$length  := nqp::shift($infoIt)"
    ║   ║ ├○ local __lowered_lex_21
    ║   ║ └─shift  ««"nqp::shift($infoIt)"
    ║   ║   └○ local __lowered_lex_18
    ║   ╟─bind  ««"%out     := nqp::hash(\n        'id',       $id,\n "...
    ║   ║ ├○ local __lowered_lex_22
    ║   ║ └─hash  ««"nqp::hash(\n        'id',       $id,\n        'idx'"...
    ║   ║   ├◙ SVal "id"
    ║   ║   ├○ local __lowered_lex_16
    ║   ║   ├◙ SVal "idx"
    ║   ║   ├○ local __lowered_lex_17
    ║   ║   ├◙ SVal "binder"
    ║   ║   ├○ local __lowered_lex_19
    ║   ║   ├◙ SVal "from"
    ║   ║   ├○ local __lowered_lex_20
    ║   ║   ├◙ SVal "length"
    ║   ║   ├○ local __lowered_lex_21
    ║   ║   ├◙ SVal "src"
    ║   ║   └─substr  ««"nqp::substr($λsrc, $from, $length)"
    ║   ║     ├○ lexical .λsrc
    ║   ║     ├○ local __lowered_lex_20
    ║   ║     └○ local __lowered_lex_21
    ║   ╟─bind  ««"$varsIt  := nqp::iterator(lam2fvs($lambda))"
    ║   ║ ├○ local __lowered_lex_23
    ║   ║ └─iterator  ««"nqp::iterator(lam2fvs($lambda))"
    ║   ║   └─callstatic .sublist  ««"$lambda"
    ║   ║     ├○ local __lowered_lex_15
    ║   ║     └◙ IVal 2
    ║   ╟─bind  ««"$namesIt := $infoIt"
    ║   ║ ├○ local __lowered_lex_24
    ║   ║ └○ local __lowered_lex_18
    ║   ╟─bind  ««"%fvs     := {}"
    ║   ║ ├○ local __lowered_lex_25
    ║   ║ └─hash
    ║   ╟─while  ««"$varsIt {\n        %fvs{nqp::shift($namesIt)} := nq"...
    ║   ║ ├○ local __lowered_lex_23
    ║   ║ ├─bindkey
    ║   ║ │ ├○ local __lowered_lex_25
    ║   ║ │ ├─shift  ««"nqp::shift($namesIt)"
    ║   ║ │ │ └○ local __lowered_lex_24
    ║   ║ │ └─shift  ««"nqp::shift($varsIt)"
    ║   ║ │   └○ local __lowered_lex_23
    ║   ║ └◙ IVal 1 :named("nohandler")
    ║   ╟─bindkey
    ║   ║ ├○ local __lowered_lex_22
    ║   ║ ├◙ SVal "freeVars"
    ║   ║ └○ local __lowered_lex_25
    ║   ╙○ local __lowered_lex_22
    ╟─bind
    ║ ├○ lexical .typecase :decl(var)
    ║ └─:Block  ««"{\n    #say('>>>typecase(', nqp::reprname($subject)"...
    ║   ╟○ lexical $subject :decl(param)
    ║   ╟○ local __lowered_lex_29 :decl(param) :named(1) :slurpy(1)
    ║   ╟○ local __lowered_lex_30 :decl(var)
    ║   ╟○ local __lowered_lex_31 :decl(var)
    ║   ╟○ local __lowered_lex_32 :decl(var)
    ║   ╟─bind  ««"$otherwise := nqp::defor(\n        %callbacks<other"...
    ║   ║ ├○ local __lowered_lex_30
    ║   ║ └─defor  ««"nqp::defor(\n        %callbacks<otherwise>,\n      "...
    ║   ║   ├─atkey
    ║   ║   │ ├○ local __lowered_lex_29
    ║   ║   │ └◙ SVal "otherwise"
    ║   ║   └─:Block  ««"{ # compiler should see that this needs not be a cl"...
    ║   ║     ╟○ local __lowered_lex_26 :decl(param)
    ║   ║     ╙─die  ««"nqp::die('typecase: fell through due to missing \"o"...
    ║   ║       └─concat  ««"~"
    ║   ║         ├◙ SVal "typecase: fell through due to missing \"otherwise\"-callback: "
    ║   ║         └─reprname  ««"nqp::reprname($subject)"
    ║   ║           └○ lexical $subject
    ║   ╟─bind  ««"$cbKey := nqp::null"
    ║   ║ ├○ local __lowered_lex_31
    ║   ║ └─null  ««"nqp::null"
    ║   ╟─if  ««"nqp::islist($subject) {\n        my $id := $subject"...
    ║   ║ ├─islist  ««"nqp::islist($subject)"
    ║   ║ │ └○ lexical $subject
    ║   ║ ├─:Stmts
    ║   ║ │ ├○ local __lowered_lex_27 :decl(var)
    ║   ║ │ ├○ local __lowered_lex_28 :decl(var)
    ║   ║ │ ├─bind  ««"$id := $subject[0]"
    ║   ║ │ │ ├○ local __lowered_lex_27
    ║   ║ │ │ └─atpos
    ║   ║ │ │   ├○ lexical $subject
    ║   ║ │ │   └◙ IVal 0
    ║   ║ │ ├─bind  ««"$tag := nqp::substr($id, 0, 1)"
    ║   ║ │ │ ├○ local __lowered_lex_28
    ║   ║ │ │ └─substr  ««"nqp::substr($id, 0, 1)"
    ║   ║ │ │   ├○ local __lowered_lex_27
    ║   ║ │ │   ├◙ IVal 0
    ║   ║ │ │   └◙ IVal 1
    ║   ║ │ └─if  ««"$tag eq 'λ' {\n            $cbKey := $tag;\n        }"
    ║   ║ │   ├─iseq_s  ««"eq"
    ║   ║ │   │ ├○ local __lowered_lex_28
    ║   ║ │   │ └◙ SVal "λ"
    ║   ║ │   ├─bind  ««":="
    ║   ║ │   │ ├○ local __lowered_lex_31
    ║   ║ │   │ └○ local __lowered_lex_28
    ║   ║ │   └─if  ««"nqp::elems($subject) == 0 {\n                nqp::d"...
    ║   ║ │     ├─iseq_i  ««"=="
    ║   ║ │     │ ├─elems  ««"nqp::elems($subject)"
    ║   ║ │     │ │ └○ lexical $subject
    ║   ║ │     │ └◙ IVal 0
    ║   ║ │     ├─die  ««"nqp::die('typecase: unsupported low-level list type"...
    ║   ║ │     │ └◙ SVal "typecase: unsupported low-level list type - empty"
    ║   ║ │     └─die  ««"nqp::die('typecase: unsupported low-level list type"...
    ║   ║ │       └─concat  ««"~"
    ║   ║ │         ├◙ SVal "typecase: unsupported low-level list type - invalid tag "
    ║   ║ │         └─reprname  ««"nqp::reprname($tag)"
    ║   ║ │           └○ local __lowered_lex_28
    ║   ║ └─if  ««"nqp::isstr($subject) { $cbKey := 'str';\n        }"
    ║   ║   ├─isstr  ««"nqp::isstr($subject)"
    ║   ║   │ └○ lexical $subject
    ║   ║   ├─bind  ««":="
    ║   ║   │ ├○ local __lowered_lex_31
    ║   ║   │ └◙ SVal "str"
    ║   ║   └─if  ««"nqp::isint($subject) { $cbKey := 'int';\n        }"
    ║   ║     ├─isint  ««"nqp::isint($subject)"
    ║   ║     │ └○ lexical $subject
    ║   ║     ├─bind  ««":="
    ║   ║     │ ├○ local __lowered_lex_31
    ║   ║     │ └◙ SVal "int"
    ║   ║     └─if  ««"nqp::isnum($subject) { $cbKey := 'num';\n        }"
    ║   ║       ├─isnum  ««"nqp::isnum($subject)"
    ║   ║       │ └○ lexical $subject
    ║   ║       ├─bind  ««":="
    ║   ║       │ ├○ local __lowered_lex_31
    ║   ║       │ └◙ SVal "num"
    ║   ║       └─die  ««"nqp::die('typecase: unsupported low-level type ' ~ "...
    ║   ║         └─concat  ««"~"
    ║   ║           ├◙ SVal "typecase: unsupported low-level type "
    ║   ║           └─reprname  ««"nqp::reprname($subject)"
    ║   ║             └○ lexical $subject
    ║   ╟─bind  ««"$cb := nqp::defor(%callbacks{$cbKey}, $otherwise)"
    ║   ║ ├○ local __lowered_lex_32
    ║   ║ └─defor  ««"nqp::defor(%callbacks{$cbKey}, $otherwise)"
    ║   ║   ├─atkey
    ║   ║   │ ├○ local __lowered_lex_29
    ║   ║   │ └○ local __lowered_lex_31
    ║   ║   └○ local __lowered_lex_30
    ║   ╙─call  ««"$subject"
    ║     ├○ local __lowered_lex_32
    ║     └○ lexical $subject
    ╟─bind
    ║ ├○ lexical .strOut :decl(var)
    ║ └─:Block  ««"{\n    typecase(force($v),\n        :λ(-> $lambda {"...
    ║   ╟○ local __lowered_lex_43 :decl(param)
    ║   ╟○ lexical $indent :decl(param) :default(SVal "")
    ║   ╟○ lexical %done :decl(param) :default(hash)
    ║   ╙─callstatic .typecase  ««"force($v),\n        :λ(-> $lambda { # compiler shou"...
    ║     ├─callstatic .force  ««"$v"
    ║     │ └○ local __lowered_lex_43
    ║     ├─:Block :named("λ")  ««"{ # compiler should see that this needs not be a cl"...
    ║     │ ╟○ local __lowered_lex_40 :decl(param)
    ║     │ ╟○ local __lowered_lex_41 :decl(var)
    ║     │ ╟○ local __lowered_lex_42 :decl(var)
    ║     │ ╟─bind  ««"%info := lam2info($lambda)"
    ║     │ ║ ├○ local __lowered_lex_41
    ║     │ ║ └─callstatic .lam2info  ««"$lambda"
    ║     │ ║   └○ local __lowered_lex_40
    ║     │ ╟─bind  ««"$src := %info<src>"
    ║     │ ║ ├○ local __lowered_lex_42
    ║     │ ║ └─atkey
    ║     │ ║   ├○ local __lowered_lex_41
    ║     │ ║   └◙ SVal "src"
    ║     │ ╟─bind
    ║     │ ║ ├○ local lowered_for_it__1 :decl(var)
    ║     │ ║ └─iterator
    ║     │ ║   └─atkey
    ║     │ ║     ├○ local __lowered_lex_41
    ║     │ ║     └◙ SVal "freeVars"
    ║     │ ╟─while
    ║     │ ║ ├○ local lowered_for_it__1
    ║     │ ║ └─:Stmts
    ║     │ ║   ├─bind
    ║     │ ║   │ ├○ local __lowered_lex_39 :decl(var)
    ║     │ ║   │ └─shift
    ║     │ ║   │   └○ local lowered_for_it__1
    ║     │ ║   ├○ local __lowered_lex_34 :decl(var)
    ║     │ ║   ├○ local __lowered_lex_35 :decl(var)
    ║     │ ║   ├○ local __lowered_lex_36 :decl(var)
    ║     │ ║   ├○ local __lowered_lex_37 :decl(var)
    ║     │ ║   ├○ local __lowered_lex_38 :decl(var)
    ║     │ ║   ├─bind  ««"$fvName  := $_.key"
    ║     │ ║   │ ├○ local __lowered_lex_34
    ║     │ ║   │ └─iterkey_s  ««".key"
    ║     │ ║   │   └○ local __lowered_lex_39
    ║     │ ║   ├─bind  ««"$fv      := $_.value"
    ║     │ ║   │ ├○ local __lowered_lex_35
    ║     │ ║   │ └─iterval  ««".value"
    ║     │ ║   │   └○ local __lowered_lex_39
    ║     │ ║   ├─bind  ««"$pre     := \"# where $fvName = \""
    ║     │ ║   │ ├○ local __lowered_lex_36
    ║     │ ║   │ └─concat
    ║     │ ║   │   ├─concat
    ║     │ ║   │   │ ├◙ SVal "# where "
    ║     │ ║   │   │ └○ local __lowered_lex_34
    ║     │ ║   │   └◙ SVal " = "
    ║     │ ║   ├─bind  ««"$flatVal := typecase($fv,\n                    :λ(-"...
    ║     │ ║   │ ├○ local __lowered_lex_37
    ║     │ ║   │ └─callstatic .typecase  ««"$fv,\n                    :λ(-> $x { nqp::null }), "...
    ║     │ ║   │   ├○ local __lowered_lex_35
    ║     │ ║   │   ├─:Block :named("λ")  ««"{ nqp::null }"
    ║     │ ║   │   │ ╟○ local __lowered_lex_33 :decl(param)
    ║     │ ║   │   │ ╙─null  ««"nqp::null"
    ║     │ ║   │   ├○ lexical .strLit :named("str")
    ║     │ ║   │   ├○ lexical .int2str :named("int")
    ║     │ ║   │   └○ lexical .num2str :named("num")
    ║     │ ║   ├─bind  ««"$doneKey := nqp::isnull($flatVal)\n                "...
    ║     │ ║   │ ├○ local __lowered_lex_38
    ║     │ ║   │ └─if  ««"?? $pre ~ lam2id($fv)\n                    !!"
    ║     │ ║   │   ├─isnull  ««"nqp::isnull($flatVal)"
    ║     │ ║   │   │ └○ local __lowered_lex_37
    ║     │ ║   │   ├─concat  ««"~"
    ║     │ ║   │   │ ├○ local __lowered_lex_36
    ║     │ ║   │   │ └─atpos  ««"$fv"
    ║     │ ║   │   │   ├○ local __lowered_lex_35
    ║     │ ║   │   │   └◙ IVal 0
    ║     │ ║   │   └─concat  ««"~"
    ║     │ ║   │     ├○ local __lowered_lex_36
    ║     │ ║   │     └○ local __lowered_lex_37
    ║     │ ║   └─unless  ««"%done{$doneKey} {\n                    %done{$doneK"...
    ║     │ ║     ├─atkey
    ║     │ ║     │ ├○ lexical %done
    ║     │ ║     │ └○ local __lowered_lex_38
    ║     │ ║     └─:Stmts  ««"{\n                    %done{$doneKey} := 1;\n     "...
    ║     │ ║       ├─bindkey
    ║     │ ║       │ ├○ lexical %done
    ║     │ ║       │ ├○ local __lowered_lex_38
    ║     │ ║       │ └◙ IVal 1
    ║     │ ║       └─bind  ««":="
    ║     │ ║         ├○ local __lowered_lex_42
    ║     │ ║         └─concat  ««"~"
    ║     │ ║           ├─concat  ««"~"
    ║     │ ║           │ ├─concat  ««"~"
    ║     │ ║           │ │ ├○ local __lowered_lex_42
    ║     │ ║           │ │ └◙ SVal "\n"
    ║     │ ║           │ └○ lexical $indent
    ║     │ ║           └─if  ««"?? $pre ~ strOut($fv, $indent ~ '#' ~ nqp::x(' ', n"...
    ║     │ ║             ├─isnull  ««"nqp::isnull($flatVal)"
    ║     │ ║             │ └○ local __lowered_lex_37
    ║     │ ║             ├─concat  ««"~"
    ║     │ ║             │ ├○ local __lowered_lex_36
    ║     │ ║             │ └─callstatic .strOut  ««"$fv, $indent ~ '#' ~ nqp::x(' ', nqp::chars($pre) -"...
    ║     │ ║             │   ├○ local __lowered_lex_35
    ║     │ ║             │   ├─concat  ««"~"
    ║     │ ║             │   │ ├─concat  ««"~"
    ║     │ ║             │   │ │ ├○ lexical $indent
    ║     │ ║             │   │ │ └◙ SVal "#"
    ║     │ ║             │   │ └─x  ««"nqp::x(' ', nqp::chars($pre) - 1)"
    ║     │ ║             │   │   ├◙ SVal " "
    ║     │ ║             │   │   └─sub_i  ««"-"
    ║     │ ║             │   │     ├─chars  ««"nqp::chars($pre)"
    ║     │ ║             │   │     │ └○ local __lowered_lex_36
    ║     │ ║             │   │     └◙ IVal 1
    ║     │ ║             │   └○ lexical %done
    ║     │ ║             └○ local __lowered_lex_38
    ║     │ ╙○ local __lowered_lex_42
    ║     ├○ lexical .strLit :named("str")
    ║     ├○ lexical .int2str :named("int")
    ║     └○ lexical .num2str :named("num")
    ╟─bind
    ║ ├○ lexical .apply1 :decl(var)
    ║ └─:Block  ««"{\n    my $result := typecase(force($f),\n        :"...
    ║   ╟○ local __lowered_lex_45 :decl(param)
    ║   ╟○ lexical $a1 :decl(param)
    ║   ╟○ local __lowered_lex_46 :decl(var)
    ║   ╟─bind  ««"$result := typecase(force($f),\n        :λ(&lam2cod"...
    ║   ║ ├○ local __lowered_lex_46
    ║   ║ └─call  ««"$a1"
    ║   ║   ├─callstatic .typecase  ««"force($f),\n        :λ(&lam2code),\n        :otherw"...
    ║   ║   │ ├─callstatic .force  ««"$f"
    ║   ║   │ │ └○ local __lowered_lex_45
    ║   ║   │ ├○ lexical .lam2code :named("λ")
    ║   ║   │ └─:Block :named("otherwise")  ««"{\n            nqp::die('ERROR: cannot apply ' ~ st"...
    ║   ║   │   ╟○ local __lowered_lex_44 :decl(param)
    ║   ║   │   ╙─die  ««"nqp::die('ERROR: cannot apply ' ~ strOut($x) ~ ' to"...
    ║   ║   │     └─concat  ««"~"
    ║   ║   │       ├─concat  ««"~"
    ║   ║   │       │ ├─concat  ««"~"
    ║   ║   │       │ │ ├◙ SVal "ERROR: cannot apply "
    ║   ║   │       │ │ └─callstatic .strOut  ««"$x"
    ║   ║   │       │ │   └○ local __lowered_lex_44
    ║   ║   │       │ └◙ SVal " to "
    ║   ║   │       └─callstatic .strOut  ««"$a1"
    ║   ║   │         └○ lexical $a1
    ║   ║   └○ lexical $a1
    ║   ╙─callstatic .force  ««"$result"
    ║     └○ local __lowered_lex_46
    ╟─bind
    ║ ├○ lexical .join :decl(var)
    ║ └─:Block  ««"{\n    my $_;\n    my $i := nqp::iterator(@pieces);"...
    ║   ╟○ local __lowered_lex_47 :decl(param)
    ║   ╟○ local __lowered_lex_48 :decl(param)
    ║   ╟─bind  ««"$_"
    ║   ║ ├○ local __lowered_lex_49 :decl(var)
    ║   ║ └◙ WVal NQPMu
    ║   ╟○ local __lowered_lex_50 :decl(var)
    ║   ╟○ local __lowered_lex_51 :decl(var)
    ║   ╟─bind  ««"$i := nqp::iterator(@pieces)"
    ║   ║ ├○ local __lowered_lex_50
    ║   ║ └─iterator  ««"nqp::iterator(@pieces)"
    ║   ║   └○ local __lowered_lex_48
    ║   ╟─bind  ««"$s := ''"
    ║   ║ ├○ local __lowered_lex_51
    ║   ║ └◙ SVal ""
    ║   ╟─if  ««"$i {\n        $s := nqp::shift($i);  # nqpc would c"...
    ║   ║ ├○ local __lowered_lex_50
    ║   ║ └─:Stmts  ««"{\n        $s := nqp::shift($i);  # nqpc would conv"...
    ║   ║   ├─bind  ««":="
    ║   ║   │ ├○ local __lowered_lex_51
    ║   ║   │ └─shift  ««"nqp::shift($i)"
    ║   ║   │   └○ local __lowered_lex_50
    ║   ║   ├─unless  ««"$s := strOut($s)\n            unless nqp::isstr($s)"
    ║   ║   │ ├─isstr  ««"nqp::isstr($s)"
    ║   ║   │ │ └○ local __lowered_lex_51
    ║   ║   │ └─bind  ««":="
    ║   ║   │   ├○ local __lowered_lex_51
    ║   ║   │   └─callstatic .strOut  ««"$s"
    ║   ║   │     └○ local __lowered_lex_51
    ║   ║   └─while  ««"$i {\n            $_ := nqp::shift($i);  # nqpc wou"...
    ║   ║     ├○ local __lowered_lex_50
    ║   ║     ├─:Stmts  ««"{\n            $_ := nqp::shift($i);  # nqpc would "...
    ║   ║     │ ├─bind  ««":="
    ║   ║     │ │ ├○ local __lowered_lex_49
    ║   ║     │ │ └─shift  ««"nqp::shift($i)"
    ║   ║     │ │   └○ local __lowered_lex_50
    ║   ║     │ └─bind  ««":="
    ║   ║     │   ├○ local __lowered_lex_51
    ║   ║     │   └─concat  ««"~"
    ║   ║     │     ├─concat  ««"~"
    ║   ║     │     │ ├○ local __lowered_lex_51
    ║   ║     │     │ └○ local __lowered_lex_47
    ║   ║     │     └─if  ««"?? $_\n                !!"
    ║   ║     │       ├─isstr  ««"nqp::isstr($_)"
    ║   ║     │       │ └○ local __lowered_lex_49
    ║   ║     │       ├○ local __lowered_lex_49
    ║   ║     │       └─callstatic .strOut  ««"$_"
    ║   ║     │         └○ local __lowered_lex_49
    ║   ║     └◙ IVal 1 :named("nohandler")
    ║   ╙○ local __lowered_lex_51
    ╟─bind
    ║ ├○ lexical .say :decl(var)
    ║ └─:Block  ««"{\n    nqp::say(join('', @args));\n}"
    ║   ╟○ local __lowered_lex_52 :decl(param) :slurpy(1)
    ║   ╙─say  ««"nqp::say(join('', @args))"
    ║     └─callstatic .join  ««"'', @args"
    ║       ├◙ SVal ""
    ║       └○ local __lowered_lex_52
    ╟─bind
    ║ ├○ lexical .stats :decl(var)
    ║ └─:Block  ««"{\n    my %stats := %info<stats>;\n    join('', [\n"...
    ║   ╟○ local __lowered_lex_53 :decl(var)
    ║   ╟─bind  ««"%stats := %info<stats>"
    ║   ║ ├○ local __lowered_lex_53
    ║   ║ └─atkey
    ║   ║   ├○ lexical %info
    ║   ║   └◙ SVal "stats"
    ║   ╙─callstatic .join  ««"'', [\n        %stats{STATS_LAMBDACOUNT() }, \" lam"...
    ║     ├◙ SVal ""
    ║     └─list  ««","
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "lambdaCount"
    ║       ├◙ SVal " lambdas\n"
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "qastSize"
    ║       ├◙ SVal " QAST::Node s\n"
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "blockCount"
    ║       ├◙ SVal " QAST::Block s\n"
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "listCount"
    ║       ├◙ SVal " QAST::Op(list) s\n"
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "ivalCount"
    ║       ├◙ SVal " QAST::IVal s\n"
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "svalSize"
    ║       ├◙ SVal " chars ttl in "
    ║       ├─atkey
    ║       │ ├○ local __lowered_lex_53
    ║       │ └◙ SVal "svalCount"
    ║       ├◙ SVal " QAST::SVal s\n"
    ║       └◙ SVal "------------------------------------------------"
    ╟─bind
    ║ ├○ lexical .MAIN :decl(var)
    ║ └─:Block  ««"{\n    my $n := 0;\n    my $b := { $n := $n + 1; };"...
    ║   ╟○ local __lowered_lex_56 :decl(param) :slurpy(1)
    ║   ╟○ lexical $n :decl(var)
    ║   ╟○ local __lowered_lex_57 :decl(var)
    ║   ╟○ local __lowered_lex_58 :decl(var)
    ║   ╟○ local __lowered_lex_59 :decl(var)
    ║   ╟○ local __lowered_lex_60 :decl(var)
    ║   ╟─bind  ««"$n := 0"
    ║   ║ ├○ lexical $n
    ║   ║ └◙ IVal 0
    ║   ╟─bind  ««"$b := { $n := $n + 1; }"
    ║   ║ ├○ local __lowered_lex_57
    ║   ║ └─:Block  ««"{ $n := $n + 1; }"
    ║   ║   ╙─bind  ««":="
    ║   ║     ├○ lexical $n
    ║   ║     └─add_n  ««"+"
    ║   ║       ├○ lexical $n
    ║   ║       └◙ IVal 1
    ║   ╟─bind  ««"$d := delayMemo($b)"
    ║   ║ ├○ local __lowered_lex_58
    ║   ║ └─callstatic .delayMemo  ««"$b"
    ║   ║   └○ local __lowered_lex_57
    ║   ╟─unless  ««"nqp::die('not ok: .delayMemo') unless $n == 0"
    ║   ║ ├─iseq_n  ««"=="
    ║   ║ │ ├○ lexical $n
    ║   ║ │ └◙ IVal 0
    ║   ║ └─die  ««"nqp::die('not ok: .delayMemo')"
    ║   ║   └◙ SVal "not ok: .delayMemo"
    ║   ╟─unless  ««"nqp::die('not ok: .delayMemo') unless force($d) == 1"
    ║   ║ ├─iseq_n  ««"=="
    ║   ║ │ ├─callstatic .force  ««"$d"
    ║   ║ │ │ └○ local __lowered_lex_58
    ║   ║ │ └◙ IVal 1
    ║   ║ └─die  ««"nqp::die('not ok: .delayMemo')"
    ║   ║   └◙ SVal "not ok: .delayMemo"
    ║   ╟─unless  ««"nqp::die('not ok: .delayMemo') unless force($d) == 1"
    ║   ║ ├─iseq_n  ««"=="
    ║   ║ │ ├─callstatic .force  ««"$d"
    ║   ║ │ │ └○ local __lowered_lex_58
    ║   ║ │ └◙ IVal 1
    ║   ║ └─die  ««"nqp::die('not ok: .delayMemo')"
    ║   ║   └◙ SVal "not ok: .delayMemo"
    ║   ╟─unless  ««"nqp::die('not ok: .delayMemo') unless force($b) == 2"
    ║   ║ ├─iseq_n  ««"=="
    ║   ║ │ ├─callstatic .force  ««"$b"
    ║   ║ │ │ └○ local __lowered_lex_57
    ║   ║ │ └◙ IVal 2
    ║   ║ └─die  ««"nqp::die('not ok: .delayMemo')"
    ║   ║   └◙ SVal "not ok: .delayMemo"
    ║   ╟─unless  ««"nqp::die('not ok: .delayMemo') unless force($b) == 3"
    ║   ║ ├─iseq_n  ««"=="
    ║   ║ │ ├─callstatic .force  ««"$b"
    ║   ║ │ │ └○ local __lowered_lex_57
    ║   ║ │ └◙ IVal 3
    ║   ║ └─die  ««"nqp::die('not ok: .delayMemo')"
    ║   ║   └◙ SVal "not ok: .delayMemo"
    ║   ╟─unless  ««"nqp::die('not ok: .delayMemo') unless force($d) == 1"
    ║   ║ ├─iseq_n  ««"=="
    ║   ║ │ ├─callstatic .force  ««"$d"
    ║   ║ │ │ └○ local __lowered_lex_58
    ║   ║ │ └◙ IVal 1
    ║   ║ └─die  ««"nqp::die('not ok: .delayMemo')"
    ║   ║   └◙ SVal "not ok: .delayMemo"
    ║   ╟─bind  ««"$lambda2 := [\n        'λ1',                       "...
    ║   ║ ├○ local __lowered_lex_59
    ║   ║ └─list  ««","
    ║   ║   ├◙ SVal "λ1"
    ║   ║   ├─:Block  ««"{ 'λ1(...) called' }"
    ║   ║   │ ╟○ local __lowered_lex_54 :decl(param) :slurpy(1)
    ║   ║   │ ╙◙ SVal "λ1(...) called"
    ║   ║   └◙ IVal 23
    ║   ╟─bind  ««"$lambda1 := [\n        'λ0',                       "...
    ║   ║ ├○ local __lowered_lex_60
    ║   ║ └─list  ««","
    ║   ║   ├◙ SVal "λ0"
    ║   ║   ├─:Block  ««"{ 'λ0(...) called' }"
    ║   ║   │ ╟○ local __lowered_lex_55 :decl(param) :slurpy(1)
    ║   ║   │ ╙◙ SVal "λ0(...) called"
    ║   ║   ├◙ SVal "foo"
    ║   ║   ├◙ IVal 42
    ║   ║   ├◙ NVal 3.14159265
    ║   ║   └○ local __lowered_lex_59
    ║   ╟─push  ««"$lambda1"
    ║   ║ ├○ local __lowered_lex_60
    ║   ║ └○ local __lowered_lex_60
    ║   ╟─push  ««"$lambda1"
    ║   ║ ├○ local __lowered_lex_60
    ║   ║ └○ local __lowered_lex_60
    ║   ╟─callstatic .say  ««"strOut($lambda1)"
    ║   ║ └─callstatic .strOut  ««"$lambda1"
    ║   ║   └○ local __lowered_lex_60
    ║   ╙─callstatic .say  ««"stats()"
    ║     └─callstatic .stats  ««""
    ╟─bind
    ║ ├○ local ctxsave :decl(var)
    ║ └○ contextual $*CTXSAVE
    ╟─unless
    ║ ├─isnull
    ║ │ └○ local ctxsave
    ║ └─if
    ║   ├─can
    ║   │ ├○ local ctxsave
    ║   │ └◙ SVal "ctxsave"
    ║   └─callmethod ctxsave
    ║     └○ local ctxsave
    ╟─bind  ««"$λsrc := '(λf.λstart.λxs.xs start (λhd.λtl.self f ("...
    ║ ├○ lexical .λsrc
    ║ └◙ SVal "(λf.λstart.λxs.xs start (λhd.λtl.self f (f start hd) tl)) (λ_.x)"
    ╟─bind  ««"%info := nqp::hash(\n    'λ', [\n        'binder0 1"...
    ║ ├○ lexical %info
    ║ └─hash  ««"nqp::hash(\n    'λ', [\n        'binder0 1 55 foo b"...
    ║   ├◙ SVal "λ"
    ║   ├─list  ««","
    ║   │ ├◙ SVal "binder0 1 55 foo bar baz qumbl self self"
    ║   │ └◙ SVal "binder1 59 4 foo"
    ║   ├◙ SVal "stats"
    ║   └─hash  ««"nqp::hash( # to be filled in by compiler\n        S"...
    ║     ├◙ SVal "qastSize"
    ║     ├◙ IVal -1
    ║     ├◙ SVal "blockCount"
    ║     ├◙ IVal -1
    ║     ├◙ SVal "listCount"
    ║     ├◙ IVal -1
    ║     ├◙ SVal "lambdaCount"
    ║     ├◙ IVal -1
    ║     ├◙ SVal "ivalCount"
    ║     ├◙ IVal -1
    ║     ├◙ SVal "svalCount"
    ║     ├◙ IVal -1
    ║     ├◙ SVal "svalSize"
    ║     └◙ IVal -1
    ╙─if
      ├○ local __lowered_lex_61
      └─callstatic .MAIN
        └○ local __lowered_lex_61 :flat(1)