---------- L-compiler --target=ast ----------
- QAST::Block
  - QAST::Stmts
    - QAST::Op(bind)
      - QAST::Var(lexical .ifTag :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical s :decl(param))
          - QAST::Var(lexical x :decl(param))
          - QAST::Var(lexical t :decl(param))
          - QAST::Var(lexical e :decl(param))
          - QAST::Op(call)
            - QAST::Op(if)
              - QAST::Op(islist)
                - QAST::Var+{Var}(lexical s :decl())
              - QAST::Op(if)
                - QAST::Op(iseq_s)
                  - QAST::Var+{Var}(lexical x :decl())
                  - QAST::Op(atpos)
                    - QAST::Var+{Var}(lexical s :decl())
                    - QAST::IVal(0)
                - QAST::Var+{Var}(lexical t :decl())
                - QAST::Var+{Var}(lexical e :decl())
              - QAST::Var+{Var}(lexical e :decl())
    - QAST::Op(bind)
      - QAST::Var(lexical .->#n :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical s :decl(param))
          - QAST::Var(lexical t :decl(param))
          - QAST::Var(lexical i :decl(param))
          - QAST::Op(call)
            - QAST::Var+{Var}(lexical .ifTag :decl())
            - QAST::Var+{Var}(lexical s :decl())
            - QAST::Var+{Var}(lexical t :decl())
            - QAST::Block
              - QAST::Stmt
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical s :decl())
                  - QAST::Var+{Var}(lexical i :decl())
            - QAST::Block
              - QAST::Stmt
                - QAST::Op(null)
    - QAST::Op(bind)
      - QAST::Var(lexical .lambda->code :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical s :decl(param))
          - QAST::Op(call)
            - QAST::Var+{Var}(lexical .->#n :decl())
            - QAST::Var+{Var}(lexical s :decl())
            - QAST::SVal(λ)
            - QAST::IVal(1)
    - QAST::Op(bind)
      - QAST::Var(lexical .lambda->str :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical s :decl(param))
          - QAST::Op(call)
            - QAST::Var+{Var}(lexical .->#n :decl())
            - QAST::Var+{Var}(lexical s :decl())
            - QAST::SVal(λ)
            - QAST::IVal(2)
    - QAST::Op(bind)
      - QAST::Var(lexical .strOut :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical v :decl(param))
          - QAST::Op(if)
            - QAST::Op(isstr)
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(call)
              - QAST::Var+{Var}(lexical .strLit :decl())
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(defor)
              - QAST::Op(call)
                - QAST::Var+{Var}(lexical .lambda->str :decl())
                - QAST::Var+{Var}(lexical v :decl())
              - QAST::Op(reprname)
                - QAST::Var+{Var}(lexical v :decl())
    - QAST::Op(bind)
      - QAST::Var(lexical .strLit :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical v :decl(param))
          - QAST::Op(concat)
            - QAST::Op(concat)
              - QAST::SVal(\")
              - QAST::Op(escape)
                - QAST::Var+{Var}(lexical v :decl())
            - QAST::SVal(\")
    - QAST::Op(bind)
      - QAST::Var(lexical .apply1 :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical f :decl(param))
          - QAST::Var(lexical a1 :decl(param))
          - QAST::Op(call)
            - QAST::Op(defor)
              - QAST::Op(call)
                - QAST::Var+{Var}(lexical .lambda->code :decl())
                - QAST::Var+{Var}(lexical f :decl())
              - QAST::Op(if)
                - QAST::Op(isinvokable)
                  - QAST::Var+{Var}(lexical f :decl())
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::Op(die)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::SVal(ERROR: cannot apply )
                        - QAST::Op(call)
                          - QAST::Var+{Var}(lexical .strLit :decl())
                          - QAST::Var+{Var}(lexical f :decl())
                      - QAST::SVal( to )
                    - QAST::Op(call)
                      - QAST::Var+{Var}(lexical .strOut :decl())
                      - QAST::Var+{Var}(lexical a1 :decl())
            - QAST::Var+{Var}(lexical a1 :decl())
    - QAST::Op(say)
      - QAST::SVal(4 lambdas\n------------------------------------------------)
    - QAST::Op(call)
      - QAST::Var+{Var}(lexical .strOut :decl())
      - QAST::Stmts (λx.λ_.λy.x) \"fo\\noö\" \"bar\" \"baz\" λy.\"qumb...
        - QAST::Op(call)
          - QAST::Var+{Var}(lexical .apply1 :decl())
          - QAST::Op(call)
            - QAST::Var+{Var}(lexical .apply1 :decl())
            - QAST::Op(call)
              - QAST::Var+{Var}(lexical .apply1 :decl())
              - QAST::Op(call)
                - QAST::Var+{Var}(lexical .apply1 :decl())
                - QAST::Op(list)
                  - QAST::SVal(λ)
                  - QAST::Block λx.λ_.λy.x
                    - QAST::Var(lexical x :decl(param))
                    - QAST::Op(list)
                      - QAST::SVal(λ)
                      - QAST::Block λ_.λy.x
                        - QAST::Var(lexical _ :decl(param))
                        - QAST::Op(list)
                          - QAST::SVal(λ)
                          - QAST::Block λy.x
                            - QAST::Var(lexical y :decl(param))
                            - QAST::Var(lexical x :decl()) x
                          - QAST::SVal(λy.x)
                      - QAST::SVal(λ_.λy.x)
                  - QAST::SVal(λx.λ_.λy.x)
                - QAST::SVal(fo\noö)
              - QAST::SVal(bar)
            - QAST::SVal(baz)
          - QAST::Op(list)
            - QAST::SVal(λ)
            - QAST::Block λy.\"qumbl\"\n
              - QAST::Var(lexical y :decl(param))
              - QAST::SVal(qumbl)
            - QAST::SVal(λy.\"qumbl\"\n)


Output completed (2 sec consumed) - Normal Termination