---------- L-compiler --target=ast ----------
- QAST::Block
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .ifTag :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical subject :decl(param))
      - QAST::Var+{Var}(lexical tag :decl(param))
      - QAST::Var+{Var}(lexical then :decl(param))
      - QAST::Var+{Var}(lexical else :decl(param))
      - QAST::Op(call .force)
        - QAST::Op(if)
          - QAST::Op(islist)
            - QAST::Var+{Var}(lexical subject :decl())
          - QAST::Op(if)
            - QAST::Op(iseq_s)
              - QAST::Var+{Var}(lexical tag :decl())
              - QAST::Op(atpos)
                - QAST::Var+{Var}(lexical subject :decl())
                - QAST::IVal(0)
            - QAST::Var+{Var}(lexical then :decl())
            - QAST::Var+{Var}(lexical else :decl())
          - QAST::Var+{Var}(lexical else :decl())
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .->#n :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical subject :decl(param))
      - QAST::Var+{Var}(lexical tag :decl(param))
      - QAST::Var+{Var}(lexical index :decl(param))
      - QAST::Op(call .ifTag)
        - QAST::Var+{Var}(lexical subject :decl())
        - QAST::Var+{Var}(lexical tag :decl())
        - QAST::Block
          - QAST::Op(atpos)
            - QAST::Var+{Var}(lexical subject :decl())
            - QAST::Var+{Var}(lexical index :decl())
        - QAST::Op(null)
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .strOut :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical v :decl(param))
      - QAST::Op(if)
        - QAST::Op(isstr)
          - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(call .strLit)
          - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(defor)
          - QAST::Op(call .force)
            - QAST::Op(call .->#n)
              - QAST::Var+{Var}(lexical v :decl())
              - QAST::SVal(λ)
              - QAST::IVal(2)
          - QAST::Op(reprname)
            - QAST::Var+{Var}(lexical v :decl())
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .delayMemo :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical block :decl(param))
      - QAST::Op(bind)
        - QAST::Var+{Var}(lexical wasRun :decl(var))
        - QAST::IVal(0)
      - QAST::Var+{Var}(lexical result :decl(var))
      - QAST::Block
        - QAST::Op(if)
          - QAST::Var+{Var}(lexical wasRun :decl())
          - QAST::Var+{Var}(lexical result :decl())
          - QAST::Stmts
            - QAST::Op(bind)
              - QAST::Var+{Var}(lexical wasRun :decl())
              - QAST::IVal(1)
            - QAST::Op(bind)
              - QAST::Var+{Var}(lexical result :decl())
              - QAST::Op(call block)
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .force :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical x :decl(param))
      - QAST::Op(if)
        - QAST::Op(isinvokable)
          - QAST::Var+{Var}(lexical x :decl())
        - QAST::Op(call x)
        - QAST::Var+{Var}(lexical x :decl())
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .say :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical v :decl(param))
      - QAST::Op(bind)
        - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(call .force)
          - QAST::Var+{Var}(lexical v :decl())
      - QAST::Op(say)
        - QAST::Op(if)
          - QAST::Op(isstr)
            - QAST::Var+{Var}(lexical v :decl())
          - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .strOut)
            - QAST::Var+{Var}(lexical v :decl())
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .strLit :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical s :decl(param))
      - QAST::Op(concat)
        - QAST::Op(concat)
          - QAST::SVal(\")
          - QAST::Op(call .force)
            - QAST::Op(escape)
              - QAST::Var+{Var}(lexical s :decl())
        - QAST::SVal(\")
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .apply1 :decl(static))
    - QAST::Block
      - QAST::Var+{Var}(lexical f :decl(param))
      - QAST::Var+{Var}(lexical a1 :decl(param))
      - QAST::Op(call)
        - QAST::Op(defor)
          - QAST::Op(call .->#n)
            - QAST::Var+{Var}(lexical f :decl())
            - QAST::SVal(λ)
            - QAST::IVal(1)
          - QAST::Op(if)
            - QAST::Op(isinvokable)
              - QAST::Var+{Var}(lexical f :decl())
            - QAST::Var+{Var}(lexical f :decl())
            - QAST::Op(die)
              - QAST::Op(concat)
                - QAST::Op(concat)
                  - QAST::Op(concat)
                    - QAST::SVal(ERROR: cannot apply )
                    - QAST::Op(call .force)
                      - QAST::Op(call .strLit)
                        - QAST::Var+{Var}(lexical f :decl())
                  - QAST::SVal( to )
                - QAST::Op(call .force)
                  - QAST::Op(call .strOut)
                    - QAST::Var+{Var}(lexical a1 :decl())
        - QAST::Var+{Var}(lexical a1 :decl())
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .testDelay01 :decl(static))
    - QAST::Stmts
      - QAST::Op(call .say)
        - QAST::SVal(# calling .delayMemo on\n- QAST::Stmts\n  - QAST::Op(say)\n    - QAST::SVal(.testDelay01 forced!!!!)\n  - QAST::SVal(42)\n)
      - QAST::Op(call .delayMemo)
        - QAST::Block
          - QAST::Stmts
            - QAST::Op(say)
              - QAST::SVal(.testDelay01 forced!!!!)
            - QAST::SVal(42)
  - QAST::Op(bind)
    - QAST::Var+{Var}(lexical .testDelay02 :decl(static))
    - QAST::Stmts
      - QAST::Op(call .say)
        - QAST::SVal(# calling .delayMemo on\n- QAST::Stmts\n  - QAST::Op(say)\n    - QAST::SVal(.testDelay02 forced!!!!)\n  - QAST::SVal(42)\n)
      - QAST::Op(call .delayMemo)
        - QAST::Block
          - QAST::Stmts
            - QAST::Op(say)
              - QAST::SVal(.testDelay02 forced!!!!)
            - QAST::SVal(42)
  - QAST::Stmts(:resultchild(3)))
    - QAST::Op(call .say)
      - QAST::SVal(3 lambdas\n------------------------------------------------)
    - QAST::Op(call .say)
      - QAST::Op(concat)
        - QAST::SVal(.testDelay02 = )
        - QAST::Op(call .force)
          - QAST::Var+{Var}(lexical .testDelay02 :decl())
    - QAST::Op(call .say)
      - QAST::Op(concat)
        - QAST::SVal(.testDelay02 = )
        - QAST::Op(call .force)
          - QAST::Var+{Var}(lexical .testDelay02 :decl())
    - QAST::Op(call .strOut)
      - QAST::Op(call .apply1) (λU.U U) (λu.λf.f (u u f))\n\n# Turing's Y applied...
        - QAST::Op(list)
          - QAST::SVal(λ)
          - QAST::Block λU.U U
            - QAST::Var+{Var}(lexical U :decl(param))
            - QAST::Op(call .apply1) U U
              - QAST::Var+{Var}(lexical U :decl()) U
              - QAST::Var+{Var}(lexical U :decl()) U
          - QAST::SVal(λU.U U)
        - QAST::Op(list)
          - QAST::SVal(λ)
          - QAST::Block λu.λf.f (u u f)
            - QAST::Var+{Var}(lexical u :decl(param))
            - QAST::Op(list)
              - QAST::SVal(λ)
              - QAST::Block λf.f (u u f)
                - QAST::Var+{Var}(lexical f :decl(param))
                - QAST::Op(call .apply1) f (u u f)
                  - QAST::Var+{Var}(lexical f :decl()) f
                  - QAST::Op(call .apply1) u u f
                    - QAST::Op(call .apply1)
                      - QAST::Var+{Var}(lexical u :decl()) u
                      - QAST::Var+{Var}(lexical u :decl()) u
                    - QAST::Var+{Var}(lexical f :decl()) f
              - QAST::Stmts
                - QAST::Op(call .say)
                  - QAST::SVal(# calling .delayMemo on\n- QAST::Op(concat)\n  - QAST::SVal(λf.f (u u f)\\n   # where u = )\n  - QAST::Op(call .force)\n    - QAST::Op(call .strOut)\n      - QAST::Var+{Var}(lexical u :decl()) u\n)
                - QAST::Op(call .delayMemo)
                  - QAST::Block
                    - QAST::Op(concat)
                      - QAST::SVal(λf.f (u u f)\n   # where u = )
                      - QAST::Op(call .force)
                        - QAST::Op(call .strOut)
                          - QAST::Var+{Var}(lexical u :decl()) u
          - QAST::SVal(λu.λf.f (u u f))
    - QAST::Op(call .say)
      - QAST::SVal(------------------------------------------------)


Output completed (2 sec consumed) - Normal Termination