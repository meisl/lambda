---------- L-compiler --target=ast ----------
- QAST::CompUnit
  - QAST::Block
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .ifTag :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical subject :decl(param))
        - QAST::Var+{Var}(lexical tag :decl(param))
        - QAST::Var+{Var}(lexical then :decl(param))
        - QAST::Var+{Var}(lexical else :decl(param))
        - QAST::Op(call .force)
          - QAST::Op(if)
            - QAST::Op(islist)
              - QAST::Var+{Var}(lexical subject :decl())
            - QAST::Op(if)
              - QAST::Op(iseq_s)
                - QAST::Var+{Var}(lexical tag :decl())
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical subject :decl())
                  - QAST::IVal(0)
              - QAST::Var+{Var}(lexical then :decl())
              - QAST::Var+{Var}(lexical else :decl())
            - QAST::Var+{Var}(lexical else :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .->#n :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical subject :decl(param))
        - QAST::Var+{Var}(lexical tag :decl(param))
        - QAST::Var+{Var}(lexical index :decl(param))
        - QAST::Op(call .ifTag)
          - QAST::Var+{Var}(lexical subject :decl())
          - QAST::Var+{Var}(lexical tag :decl())
          - QAST::Block
            - QAST::Op(atpos)
              - QAST::Var+{Var}(lexical subject :decl())
              - QAST::Var+{Var}(lexical index :decl())
          - QAST::Op(null)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .strOut :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical v :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(if)
          - QAST::Op(isstr)
            - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .strLit)
            - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(defor)
            - QAST::Op(call .force)
              - QAST::Op(call .->#n)
                - QAST::Var+{Var}(lexical v :decl())
                - QAST::SVal(λ)
                - QAST::IVal(2)
            - QAST::Op(reprname)
              - QAST::Var+{Var}(lexical v :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .delayMemo :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical block :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical wasRun :decl(var))
          - QAST::IVal(0)
        - QAST::Var+{Var}(lexical result :decl(var))
        - QAST::Block
          - QAST::Op(if)
            - QAST::Var+{Var}(lexical wasRun :decl())
            - QAST::Var+{Var}(lexical result :decl())
            - QAST::Stmts
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical wasRun :decl())
                - QAST::IVal(1)
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical result :decl())
                - QAST::Op(call block)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .force :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical x :decl(param))
        - QAST::Op(if)
          - QAST::Op(isinvokable)
            - QAST::Var+{Var}(lexical x :decl())
          - QAST::Op(call x)
          - QAST::Var+{Var}(lexical x :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .say :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical v :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(say)
          - QAST::Op(if)
            - QAST::Op(isstr)
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(call .strOut)
              - QAST::Var+{Var}(lexical v :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .strLit :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical s :decl(param))
        - QAST::Op(concat)
          - QAST::Op(concat)
            - QAST::SVal(\")
            - QAST::Op(call .force)
              - QAST::Op(escape)
                - QAST::Var+{Var}(lexical s :decl())
          - QAST::SVal(\")
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .apply1 :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical f :decl(param))
        - QAST::Var+{Var}(lexical a1 :decl(param))
        - QAST::Var+{Var}(lexical result :decl(var))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical f :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical f :decl())
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical result :decl())
          - QAST::Op(call)
            - QAST::Op(defor)
              - QAST::Op(call .->#n)
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::SVal(λ)
                - QAST::IVal(1)
              - QAST::Op(if)
                - QAST::Op(isinvokable)
                  - QAST::Var+{Var}(lexical f :decl())
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::Op(die)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::SVal(ERROR: cannot apply )
                        - QAST::Op(call .force)
                          - QAST::Op(call .strLit)
                            - QAST::Var+{Var}(lexical f :decl())
                      - QAST::SVal( to )
                    - QAST::Op(call .force)
                      - QAST::Op(call .strOut)
                        - QAST::Var+{Var}(lexical a1 :decl())
            - QAST::Var+{Var}(lexical a1 :decl())
        - QAST::Op(call .force)
          - QAST::Var+{Var}(lexical result :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .testDelay01 :decl(static))
      - QAST::Op(call .delayMemo)
        - QAST::Block
          - QAST::Stmts
            - QAST::Op(say)
              - QAST::SVal(.testDelay01 forced!!!!)
            - QAST::SVal(42)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .testDelay02 :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical delayed :decl(param))
        - QAST::Var+{Var}(lexical simple :decl(var))
        - QAST::Var+{Var}(lexical memo :decl(var))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical simple :decl())
          - QAST::Var+{Var}(lexical delayed :decl())
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical memo :decl())
          - QAST::Var+{Var}(lexical delayed :decl())
        - QAST::Var+{Var}(lexical memo :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .qastSize :decl(static))
      - QAST::NVal(433)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .svalCount :decl(static))
      - QAST::NVal(58)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .svalSize :decl(static))
      - QAST::NVal(2479)
    - QAST::Block
      - QAST::Var+{Var}(local mainResult :decl(var))
      - QAST::Op(call .say)
        - QAST::Op(concat)
          - QAST::Op(concat)
            - QAST::Op(concat)
              - QAST::Op(concat)
                - QAST::Op(concat)
                  - QAST::Op(concat)
                    - QAST::SVal(17 lambdas\n)
                    - QAST::Op(call .force)
                      - QAST::Var+{Var}(lexical .qastSize :decl())
                  - QAST::SVal( QAST::Node s\n)
                - QAST::Op(call .force)
                  - QAST::Var+{Var}(lexical .svalSize :decl())
              - QAST::SVal( chars ttl in )
            - QAST::Op(call .force)
              - QAST::Var+{Var}(lexical .svalCount :decl())
          - QAST::SVal( QAST::SVal s\n------------------------------------------------)
      - QAST::Op(bind)
        - QAST::Var+{Var}(local mainResult :decl())
        - QAST::Op(call .strOut)
          - QAST::Op(call .apply1) (λnil.λcons.λcar.λcdr.\n    (λxs.\n        #nil\n ...
            - QAST::Op(call .apply1)
              - QAST::Op(call .apply1)
                - QAST::Op(call .apply1)
                  - QAST::Op(list)
                    - QAST::SVal(λ)
                    - QAST::Block λnil.λcons.λcar.λcdr.\n    (λxs.\n        #nil\n  ...
                      - QAST::Var+{Var}(lexical nil :decl(param))
                      - QAST::Op(list)
                        - QAST::SVal(λ)
                        - QAST::Block λcons.λcar.λcdr.\n    (λxs.\n        #nil\n       ...
                          - QAST::Var+{Var}(lexical cons :decl(param))
                          - QAST::Op(list)
                            - QAST::SVal(λ)
                            - QAST::Block λcar.λcdr.\n    (λxs.\n        #nil\n        #car ...
                              - QAST::Var+{Var}(lexical car :decl(param))
                              - QAST::Op(list)
                                - QAST::SVal(λ)
                                - QAST::Block λcdr.\n    (λxs.\n        #nil\n        #car xs   ...
                                  - QAST::Var+{Var}(lexical cdr :decl(param))
                                  - QAST::Op(call .apply1) \n    (λxs.\n        #nil\n        #car xs        ...
                                    - QAST::Op(list)
                                      - QAST::SVal(λ)
                                      - QAST::Block λxs.\n        #nil\n        #car xs              #...
                                        - QAST::Var+{Var}(lexical xs :decl(param))
                                        - QAST::Op(call .apply1) \n        #nil\n        #car xs              # \"a...
                                          - QAST::Var+{Var}(lexical cdr :decl()) cdr
                                          - QAST::Op(call .delayMemo)
                                            - QAST::Block
                                              - QAST::Op(call .apply1) cdr xs
                                                - QAST::Var+{Var}(lexical cdr :decl()) cdr
                                                - QAST::Var+{Var}(lexical xs :decl()) xs
                                      - QAST::Op(call .delayMemo)
                                        - QAST::Block
                                          - QAST::Op(concat)
                                            - QAST::SVal(λxs.\n        #nil\n        #car xs              # \"a\"\n        #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n        #cdr xs              # (cons \"b\" (cons \"c\" nil))\n        #car (cdr xs)        # \"b\"\n        cdr (cdr xs)        # (cons \"c\", nil)\n        #car (cdr (cdr xs))  # \"c\"\n    \n   # where cdr = )
                                            - QAST::Op(call .force)
                                              - QAST::Op(call .strOut)
                                                - QAST::Var+{Var}(lexical cdr :decl()) cdr
                                    - QAST::Op(call .delayMemo)
                                      - QAST::Block
                                        - QAST::Op(call .apply1) cons \"a\" (cons \"b\" (cons \"c\" nil))
                                          - QAST::Op(call .apply1)
                                            - QAST::Var+{Var}(lexical cons :decl()) cons
                                            - QAST::SVal(a)
                                          - QAST::Op(call .delayMemo)
                                            - QAST::Block
                                              - QAST::Op(call .apply1) cons \"b\" (cons \"c\" nil)
                                                - QAST::Op(call .apply1)
                                                  - QAST::Var+{Var}(lexical cons :decl()) cons
                                                  - QAST::SVal(b)
                                                - QAST::Op(call .delayMemo)
                                                  - QAST::Block
                                                    - QAST::Op(call .apply1) cons \"c\" nil
                                                      - QAST::Op(call .apply1)
                                                        - QAST::Var+{Var}(lexical cons :decl()) cons
                                                        - QAST::SVal(c)
                                                      - QAST::Var+{Var}(lexical nil :decl()) nil
                                - QAST::Op(call .delayMemo)
                                  - QAST::Block
                                    - QAST::Op(concat)
                                      - QAST::Op(concat)
                                        - QAST::Op(concat)
                                          - QAST::SVal(λcdr.\n    (λxs.\n        #nil\n        #car xs              # \"a\"\n        #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n        #cdr xs              # (cons \"b\" (cons \"c\" nil))\n        #car (cdr xs)        # \"b\"\n        cdr (cdr xs)        # (cons \"c\", nil)\n        #car (cdr (cdr xs))  # \"c\"\n    ) (cons \"a\" (cons \"b\" (cons \"c\" nil)))\n\n   # where cons = )
                                          - QAST::Op(call .force)
                                            - QAST::Op(call .strOut)
                                              - QAST::Var+{Var}(lexical cons :decl()) cons
                                        - QAST::SVal(\n   # where nil = )
                                      - QAST::Op(call .force)
                                        - QAST::Op(call .strOut)
                                          - QAST::Var+{Var}(lexical nil :decl()) nil
                            - QAST::Op(call .delayMemo)
                              - QAST::Block
                                - QAST::Op(concat)
                                  - QAST::Op(concat)
                                    - QAST::Op(concat)
                                      - QAST::SVal(λcar.λcdr.\n    (λxs.\n        #nil\n        #car xs              # \"a\"\n        #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n        #cdr xs              # (cons \"b\" (cons \"c\" nil))\n        #car (cdr xs)        # \"b\"\n        cdr (cdr xs)        # (cons \"c\", nil)\n        #car (cdr (cdr xs))  # \"c\"\n    ) (cons \"a\" (cons \"b\" (cons \"c\" nil)))\n\n   # where cons = )
                                      - QAST::Op(call .force)
                                        - QAST::Op(call .strOut)
                                          - QAST::Var+{Var}(lexical cons :decl()) cons
                                    - QAST::SVal(\n   # where nil = )
                                  - QAST::Op(call .force)
                                    - QAST::Op(call .strOut)
                                      - QAST::Var+{Var}(lexical nil :decl()) nil
                        - QAST::Op(call .delayMemo)
                          - QAST::Block
                            - QAST::Op(concat)
                              - QAST::SVal(λcons.λcar.λcdr.\n    (λxs.\n        #nil\n        #car xs              # \"a\"\n        #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n        #cdr xs              # (cons \"b\" (cons \"c\" nil))\n        #car (cdr xs)        # \"b\"\n        cdr (cdr xs)        # (cons \"c\", nil)\n        #car (cdr (cdr xs))  # \"c\"\n    ) (cons \"a\" (cons \"b\" (cons \"c\" nil)))\n\n   # where nil = )
                              - QAST::Op(call .force)
                                - QAST::Op(call .strOut)
                                  - QAST::Var+{Var}(lexical nil :decl()) nil
                    - QAST::SVal(λnil.λcons.λcar.λcdr.\n    (λxs.\n        #nil\n        #car xs              # \"a\"\n        #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n        #cdr xs              # (cons \"b\" (cons \"c\" nil))\n        #car (cdr xs)        # \"b\"\n        cdr (cdr xs)        # (cons \"c\", nil)\n        #car (cdr (cdr xs))  # \"c\"\n    ) (cons \"a\" (cons \"b\" (cons \"c\" nil)))\n)
                  - QAST::Op(call .delayMemo)
                    - QAST::Block
                      - QAST::Op(list)
                        - QAST::SVal(λ)
                        - QAST::Block λonNil.λonCons.onNil
                          - QAST::Var+{Var}(lexical onNil :decl(param))
                          - QAST::Op(list)
                            - QAST::SVal(λ)
                            - QAST::Block λonCons.onNil
                              - QAST::Var+{Var}(lexical onCons :decl(param))
                              - QAST::Var+{Var}(lexical onNil :decl()) onNil
                            - QAST::Op(call .delayMemo)
                              - QAST::Block
                                - QAST::Op(concat)
                                  - QAST::SVal(λonCons.onNil\n   # where onNil = )
                                  - QAST::Op(call .force)
                                    - QAST::Op(call .strOut)
                                      - QAST::Var+{Var}(lexical onNil :decl()) onNil
                        - QAST::SVal(λonNil.λonCons.onNil)
                - QAST::Op(call .delayMemo)
                  - QAST::Block
                    - QAST::Op(list)
                      - QAST::SVal(λ)
                      - QAST::Block λx.λxs.λonNil.λonCons.onCons x xs
                        - QAST::Var+{Var}(lexical x :decl(param))
                        - QAST::Op(list)
                          - QAST::SVal(λ)
                          - QAST::Block λxs.λonNil.λonCons.onCons x xs
                            - QAST::Var+{Var}(lexical xs :decl(param))
                            - QAST::Op(list)
                              - QAST::SVal(λ)
                              - QAST::Block λonNil.λonCons.onCons x xs
                                - QAST::Var+{Var}(lexical onNil :decl(param))
                                - QAST::Op(list)
                                  - QAST::SVal(λ)
                                  - QAST::Block λonCons.onCons x xs
                                    - QAST::Var+{Var}(lexical onCons :decl(param))
                                    - QAST::Op(call .apply1) onCons x xs
                                      - QAST::Op(call .apply1)
                                        - QAST::Var+{Var}(lexical onCons :decl()) onCons
                                        - QAST::Var+{Var}(lexical x :decl()) x
                                      - QAST::Var+{Var}(lexical xs :decl()) xs
                                  - QAST::Op(call .delayMemo)
                                    - QAST::Block
                                      - QAST::Op(concat)
                                        - QAST::Op(concat)
                                          - QAST::Op(concat)
                                            - QAST::SVal(λonCons.onCons x xs\n   # where x = )
                                            - QAST::Op(call .force)
                                              - QAST::Op(call .strOut)
                                                - QAST::Var+{Var}(lexical x :decl()) x
                                          - QAST::SVal(\n   # where xs = )
                                        - QAST::Op(call .force)
                                          - QAST::Op(call .strOut)
                                            - QAST::Var+{Var}(lexical xs :decl()) xs
                              - QAST::Op(call .delayMemo)
                                - QAST::Block
                                  - QAST::Op(concat)
                                    - QAST::Op(concat)
                                      - QAST::Op(concat)
                                        - QAST::SVal(λonNil.λonCons.onCons x xs\n   # where x = )
                                        - QAST::Op(call .force)
                                          - QAST::Op(call .strOut)
                                            - QAST::Var+{Var}(lexical x :decl()) x
                                      - QAST::SVal(\n   # where xs = )
                                    - QAST::Op(call .force)
                                      - QAST::Op(call .strOut)
                                        - QAST::Var+{Var}(lexical xs :decl()) xs
                          - QAST::Op(call .delayMemo)
                            - QAST::Block
                              - QAST::Op(concat)
                                - QAST::SVal(λxs.λonNil.λonCons.onCons x xs\n   # where x = )
                                - QAST::Op(call .force)
                                  - QAST::Op(call .strOut)
                                    - QAST::Var+{Var}(lexical x :decl()) x
                      - QAST::SVal(λx.λxs.λonNil.λonCons.onCons x xs)
              - QAST::Op(call .delayMemo)
                - QAST::Block
                  - QAST::Op(list)
                    - QAST::SVal(λ)
                    - QAST::Block λxs.xs (\"car\" \"nil\") (λhd.λtl.hd)
                      - QAST::Var+{Var}(lexical xs :decl(param))
                      - QAST::Op(call .apply1) xs (\"car\" \"nil\") (λhd.λtl.hd)
                        - QAST::Op(call .apply1)
                          - QAST::Var+{Var}(lexical xs :decl()) xs
                          - QAST::Op(call .delayMemo)
                            - QAST::Block
                              - QAST::Op(call .apply1) \"car\" \"nil\"
                                - QAST::SVal(car)
                                - QAST::SVal(nil)
                        - QAST::Op(call .delayMemo)
                          - QAST::Block
                            - QAST::Op(list)
                              - QAST::SVal(λ)
                              - QAST::Block λhd.λtl.hd
                                - QAST::Var+{Var}(lexical hd :decl(param))
                                - QAST::Op(list)
                                  - QAST::SVal(λ)
                                  - QAST::Block λtl.hd
                                    - QAST::Var+{Var}(lexical tl :decl(param))
                                    - QAST::Var+{Var}(lexical hd :decl()) hd
                                  - QAST::Op(call .delayMemo)
                                    - QAST::Block
                                      - QAST::Op(concat)
                                        - QAST::SVal(λtl.hd\n   # where hd = )
                                        - QAST::Op(call .force)
                                          - QAST::Op(call .strOut)
                                            - QAST::Var+{Var}(lexical hd :decl()) hd
                              - QAST::SVal(λhd.λtl.hd)
                    - QAST::SVal(λxs.xs (\"car\" \"nil\") (λhd.λtl.hd))
            - QAST::Op(call .delayMemo)
              - QAST::Block
                - QAST::Op(list)
                  - QAST::SVal(λ)
                  - QAST::Block λxs.xs (\"cdr\" \"nil\") (λhd.λtl.tl)
                    - QAST::Var+{Var}(lexical xs :decl(param))
                    - QAST::Op(call .apply1) xs (\"cdr\" \"nil\") (λhd.λtl.tl)
                      - QAST::Op(call .apply1)
                        - QAST::Var+{Var}(lexical xs :decl()) xs
                        - QAST::Op(call .delayMemo)
                          - QAST::Block
                            - QAST::Op(call .apply1) \"cdr\" \"nil\"
                              - QAST::SVal(cdr)
                              - QAST::SVal(nil)
                      - QAST::Op(call .delayMemo)
                        - QAST::Block
                          - QAST::Op(list)
                            - QAST::SVal(λ)
                            - QAST::Block λhd.λtl.tl
                              - QAST::Var+{Var}(lexical hd :decl(param))
                              - QAST::Op(list)
                                - QAST::SVal(λ)
                                - QAST::Block λtl.tl
                                  - QAST::Var+{Var}(lexical tl :decl(param))
                                  - QAST::Var+{Var}(lexical tl :decl()) tl
                                - QAST::SVal(λtl.tl)
                            - QAST::SVal(λhd.λtl.tl)
                  - QAST::SVal(λxs.xs (\"cdr\" \"nil\") (λhd.λtl.tl))
      - QAST::Op(call .say)
        - QAST::SVal(------------------------------------------------)
      - QAST::Var+{Var}(local mainResult :decl())


Output completed (4 sec consumed) - Normal Termination