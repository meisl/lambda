---------- L-compiler --target=ast ----------
- QAST::Block
  - QAST::Stmts
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .ifTag :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var+{Var}(lexical s :decl(param))
          - QAST::Var+{Var}(lexical x :decl(param))
          - QAST::Var+{Var}(lexical t :decl(param))
          - QAST::Var+{Var}(lexical e :decl(param))
          - QAST::Op(call)
            - QAST::Op(if)
              - QAST::Op(islist)
                - QAST::Var+{Var}(lexical s :decl())
              - QAST::Op(if)
                - QAST::Op(iseq_s)
                  - QAST::Var+{Var}(lexical x :decl())
                  - QAST::Op(atpos)
                    - QAST::Var+{Var}(lexical s :decl())
                    - QAST::IVal(0)
                - QAST::Var+{Var}(lexical t :decl())
                - QAST::Var+{Var}(lexical e :decl())
              - QAST::Var+{Var}(lexical e :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .->#n :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var+{Var}(lexical s :decl(param))
          - QAST::Var+{Var}(lexical t :decl(param))
          - QAST::Var+{Var}(lexical i :decl(param))
          - QAST::Op(call)
            - QAST::Var+{Var}(lexical .ifTag :decl())
            - QAST::Var+{Var}(lexical s :decl())
            - QAST::Var+{Var}(lexical t :decl())
            - QAST::Block
              - QAST::Stmt
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical s :decl())
                  - QAST::Var+{Var}(lexical i :decl())
            - QAST::Block
              - QAST::Stmt
                - QAST::Op(null)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .strOut :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var+{Var}(lexical v :decl(param))
          - QAST::Op(if)
            - QAST::Op(isstr)
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(call)
              - QAST::Var+{Var}(lexical .strLit :decl())
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(defor)
              - QAST::Block
                - QAST::Op(bind)
                  - QAST::Var+{Var}(lexical x :decl(var))
                  - QAST::Op(call)
                    - QAST::Var+{Var}(lexical .->#n :decl())
                    - QAST::Var+{Var}(lexical v :decl())
                    - QAST::SVal(λ)
                    - QAST::IVal(2)
                - QAST::Op(if)
                  - QAST::Op(isstr)
                    - QAST::Var+{Var}(lexical x :decl())
                  - QAST::Var+{Var}(lexical x :decl())
                  - QAST::Op(if)
                    - QAST::Op(isint)
                      - QAST::Var+{Var}(lexical x :decl())
                    - QAST::Var+{Var}(lexical x :decl())
                    - QAST::Op(if)
                      - QAST::Op(isnum)
                        - QAST::Var+{Var}(lexical x :decl())
                      - QAST::Var+{Var}(lexical x :decl())
                      - QAST::Op(call)
                        - QAST::Var+{Var}(lexical x :decl())
              - QAST::Op(reprname)
                - QAST::Var+{Var}(lexical v :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .strLit :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var+{Var}(lexical v :decl(param))
          - QAST::Op(concat)
            - QAST::Op(concat)
              - QAST::SVal(\")
              - QAST::Op(escape)
                - QAST::Var+{Var}(lexical v :decl())
            - QAST::SVal(\")
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .apply1 :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var+{Var}(lexical f :decl(param))
          - QAST::Var+{Var}(lexical a1 :decl(param))
          - QAST::Op(call)
            - QAST::Op(defor)
              - QAST::Op(call)
                - QAST::Var+{Var}(lexical .->#n :decl())
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::SVal(λ)
                - QAST::IVal(1)
              - QAST::Op(if)
                - QAST::Op(isinvokable)
                  - QAST::Var+{Var}(lexical f :decl())
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::Op(die)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::SVal(ERROR: cannot apply )
                        - QAST::Op(call)
                          - QAST::Var+{Var}(lexical .strLit :decl())
                          - QAST::Var+{Var}(lexical f :decl())
                      - QAST::SVal( to )
                    - QAST::Op(call)
                      - QAST::Var+{Var}(lexical .strOut :decl())
                      - QAST::Var+{Var}(lexical a1 :decl())
            - QAST::Var+{Var}(lexical a1 :decl())
    - QAST::Op(say)
      - QAST::SVal(3 lambdas\n------------------------------------------------)
    - QAST::Op(call)
      - QAST::Var+{Var}(lexical .strOut :decl())
      - QAST::Stmts #(λx.λ_.y (x λy.x y z w)) \"fo\\noö\" \"bar\" \"ba...
        - QAST::Op(call)
          - QAST::Var+{Var}(lexical .apply1 :decl())
          - QAST::Op(list)
            - QAST::SVal(λ)
            - QAST::Block λU.U U
              - QAST::Var+{Var}(lexical U :decl(param))
              - QAST::Stmts U U
                - QAST::Op(call)
                  - QAST::Var+{Var}(lexical .apply1 :decl())
                  - QAST::Var+{Var}(lexical U :decl()) U
                  - QAST::Var+{Var}(lexical U :decl()) U
            - QAST::SVal(λU.U U)
          - QAST::Op(list)
            - QAST::SVal(λ)
            - QAST::Block λu.λf.f (u u f)
              - QAST::Var+{Var}(lexical u :decl(param))
              - QAST::Op(list)
                - QAST::SVal(λ)
                - QAST::Block λf.f (u u f)
                  - QAST::Var+{Var}(lexical f :decl(param))
                  - QAST::Stmts f (u u f)
                    - QAST::Op(call)
                      - QAST::Var+{Var}(lexical .apply1 :decl())
                      - QAST::Var+{Var}(lexical f :decl()) f
                      - QAST::Stmts u u f
                        - QAST::Op(call)
                          - QAST::Var+{Var}(lexical .apply1 :decl())
                          - QAST::Op(call)
                            - QAST::Var+{Var}(lexical .apply1 :decl())
                            - QAST::Var+{Var}(lexical u :decl()) u
                            - QAST::Var+{Var}(lexical u :decl()) u
                          - QAST::Var+{Var}(lexical f :decl()) f
                - QAST::Block
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::SVal(λf.f (u u f)\n   # where u = )
                        - QAST::Op(call)
                          - QAST::Var+{Var}(lexical .strOut :decl())
                          - QAST::Var+{Var}(lexical u :decl()) u
                      - QAST::SVal(\n   # where u = )
                    - QAST::Op(call)
                      - QAST::Var+{Var}(lexical .strOut :decl())
                      - QAST::Var+{Var}(lexical u :decl()) u
            - QAST::SVal(λu.λf.f (u u f))
1 FVs in term @ "U "
   at E:\proj\perl6\Lambda\test.L:6:5  (U)
1 FVs in term @ "U"
   at E:\proj\perl6\Lambda\test.L:6:7  (U)
1 FVs in termlist2orMore @ "U U"
   at E:\proj\perl6\Lambda\test.L:6:5  (U)
   at E:\proj\perl6\Lambda\test.L:6:7  (U)
0 FVs in term @ "#(λx.λ_.y (x λy.x y z w)) \"fo\\noö\" \"bar\" \"baz\" λy.u \"qumbl\"\n\n#(λx.λ_.(x λy.x y)) \"xfo\\noö\" \"xbar\" \"xbaz\" λz.\"qumbl\"\n\n# Turing's Y:\n(λU.U U) "
1 FVs in term @ "f "
   at E:\proj\perl6\Lambda\test.L:6:17  (f)
1 FVs in term @ "u "
   at E:\proj\perl6\Lambda\test.L:6:20  (u)
1 FVs in term @ "u "
   at E:\proj\perl6\Lambda\test.L:6:22  (u)
1 FVs in term @ "f"
   at E:\proj\perl6\Lambda\test.L:6:24  (f)
2 FVs in termlist2orMore @ "u u f"
   at E:\proj\perl6\Lambda\test.L:6:20  (u)
   at E:\proj\perl6\Lambda\test.L:6:22  (u)
   at E:\proj\perl6\Lambda\test.L:6:24  (f)
2 FVs in term @ "(u u f)"
   at E:\proj\perl6\Lambda\test.L:6:20  (u)
   at E:\proj\perl6\Lambda\test.L:6:22  (u)
   at E:\proj\perl6\Lambda\test.L:6:24  (f)
2 FVs in termlist2orMore @ "f (u u f)"
   at E:\proj\perl6\Lambda\test.L:6:17  (f)
   at E:\proj\perl6\Lambda\test.L:6:24  (f)
   at E:\proj\perl6\Lambda\test.L:6:20  (u)
   at E:\proj\perl6\Lambda\test.L:6:22  (u)
1 FVs in term @ "λf.f (u u f)"
   at E:\proj\perl6\Lambda\test.L:6:20  (u)
   at E:\proj\perl6\Lambda\test.L:6:22  (u)
1 FVs in termlist1orMore @ "λf.f (u u f)"
   at E:\proj\perl6\Lambda\test.L:6:20  (u)
   at E:\proj\perl6\Lambda\test.L:6:22  (u)
0 FVs in term @ "(λu.λf.f (u u f))\n\n# Turing's Y applied to a function that ignores param self:\n#(λU.U U) (λu.λf.f (u u f)) (λself.λx.x)\n\n"
0 FVs in termlist2orMore @ "#(λx.λ_.y (x λy.x y z w)) \"fo\\noö\" \"bar\" \"baz\" λy.u \"qumbl\"\n\n#(λx.λ_.(x λy.x y)) \"xfo\\noö\" \"xbar\" \"xbaz\" λz.\"qumbl\"\n\n# Turing's Y:\n(λU.U U) (λu.λf.f (u u f))\n\n# Turing's Y applied to a function that ignores param self:\n#(λU.U U) (λu.λf.f (u u f)) (λself.λx.x)\n\n"


Output completed (2 sec consumed) - Normal Termination