---------- L-compiler --target=ast ----------
- QAST::Block
  - QAST::Stmts
    - QAST::Op(bind)
      - QAST::Var(lexical .strOut :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical v :decl(param))
          - QAST::Op(if)
            - QAST::Op(isstr)
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(call)
              - QAST::Var+{Var}(lexical .strLit :decl())
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(if)
              - QAST::Op(ishash)
                - QAST::Var+{Var}(lexical v :decl())
              - QAST::Op(atkey)
                - QAST::Var+{Var}(lexical v :decl())
                - QAST::SVal(lambda)
              - QAST::Op(reprname)
                - QAST::Var+{Var}(lexical v :decl())
    - QAST::Op(bind)
      - QAST::Var(lexical .strLit :decl(var))
      - QAST::Block
        - QAST::Stmts
          - QAST::Var(lexical v :decl(param))
          - QAST::Op(concat)
            - QAST::Op(concat)
              - QAST::SVal(\")
              - QAST::Op(escape)
                - QAST::Var+{Var}(lexical v :decl())
            - QAST::SVal(\")
    - QAST::Op(call)
      - QAST::Var+{Var}(lexical .strOut :decl())
      - QAST::Stmts (λx.λ_.λy.x) \"fo\\noö\" \"bar\" \"baz\" λy.\"qumb...
        - QAST::Op(call)
          - QAST::Block
            - QAST::Stmts
              - QAST::Op(bind)
                - QAST::Var(local subject :decl(var))
                - QAST::Op(call)
                  - QAST::Block
                    - QAST::Stmts
                      - QAST::Op(bind)
                        - QAST::Var(local subject :decl(var))
                        - QAST::Op(call)
                          - QAST::Block
                            - QAST::Stmts
                              - QAST::Op(bind)
                                - QAST::Var(local subject :decl(var))
                                - QAST::Op(call)
                                  - QAST::Block λx.λ_.λy.x
                                    - QAST::Var(lexical x :decl(param))
                                    - QAST::Op(hash)
                                      - QAST::SVal(code)
                                      - QAST::Block λ_.λy.x
                                        - QAST::Var(lexical _ :decl(param))
                                        - QAST::Op(hash)
                                          - QAST::SVal(code)
                                          - QAST::Block λy.x
                                            - QAST::Var(lexical y :decl(param))
                                            - QAST::Var(lexical x :decl()) x
                                          - QAST::SVal(lambda)
                                          - QAST::SVal(λy.x)
                                      - QAST::SVal(lambda)
                                      - QAST::SVal(λ_.λy.x)
                                  - QAST::SVal(fo\noö)
                              - QAST::Op(if)
                                - QAST::Op(ishash)
                                  - QAST::Var+{Var}(local subject :decl())
                                - QAST::Op(call)
                                  - QAST::Op(atkey)
                                    - QAST::Var+{Var}(local subject :decl())
                                    - QAST::SVal(code)
                                  - QAST::SVal(bar)
                                - QAST::Op(die)
                                  - QAST::Op(concat)
                                    - QAST::Op(concat)
                                      - QAST::Op(concat)
                                        - QAST::SVal(ERROR: cannot apply )
                                        - QAST::Op(call)
                                          - QAST::Var+{Var}(lexical .strLit :decl())
                                          - QAST::Var+{Var}(local subject :decl())
                                      - QAST::SVal( to )
                                    - QAST::Op(call)
                                      - QAST::Var+{Var}(lexical .strOut :decl())
                                      - QAST::SVal(bar)
                      - QAST::Op(if)
                        - QAST::Op(ishash)
                          - QAST::Var+{Var}(local subject :decl())
                        - QAST::Op(call)
                          - QAST::Op(atkey)
                            - QAST::Var+{Var}(local subject :decl())
                            - QAST::SVal(code)
                          - QAST::SVal(baz)
                        - QAST::Op(die)
                          - QAST::Op(concat)
                            - QAST::Op(concat)
                              - QAST::Op(concat)
                                - QAST::SVal(ERROR: cannot apply )
                                - QAST::Op(call)
                                  - QAST::Var+{Var}(lexical .strLit :decl())
                                  - QAST::Var+{Var}(local subject :decl())
                              - QAST::SVal( to )
                            - QAST::Op(call)
                              - QAST::Var+{Var}(lexical .strOut :decl())
                              - QAST::SVal(baz)
              - QAST::Op(if)
                - QAST::Op(ishash)
                  - QAST::Var+{Var}(local subject :decl())
                - QAST::Op(call)
                  - QAST::Op(atkey)
                    - QAST::Var+{Var}(local subject :decl())
                    - QAST::SVal(code)
                  - QAST::Op(hash)
                    - QAST::SVal(code)
                    - QAST::Block λy.\"qumbl\"\n
                      - QAST::Var(lexical y :decl(param))
                      - QAST::SVal(qumbl)
                    - QAST::SVal(lambda)
                    - QAST::SVal(λy.\"qumbl\"\n)
                - QAST::Op(die)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::SVal(ERROR: cannot apply )
                        - QAST::Op(call)
                          - QAST::Var+{Var}(lexical .strLit :decl())
                          - QAST::Var+{Var}(local subject :decl())
                      - QAST::SVal( to )
                    - QAST::Op(call)
                      - QAST::Var+{Var}(lexical .strOut :decl())
                      - QAST::Op(hash)
                        - QAST::SVal(code)
                        - QAST::Block λy.\"qumbl\"\n
                          - QAST::Var(lexical y :decl(param))
                          - QAST::SVal(qumbl)
                        - QAST::SVal(lambda)
                        - QAST::SVal(λy.\"qumbl\"\n)


Output completed (1 sec consumed) - Normal Termination