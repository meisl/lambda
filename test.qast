---------- L-compiler --target=ast ----------
lib/L/LGrammar.moarvm
lib/L/LActions.moarvm
lib/L/L.moarvm
--------------------------------
- QAST::CompUnit
  - QAST::Block
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .src :decl(static))
      - QAST::SVal(# ~> Compile Error: unbound variables y, z, w, u\n#(λx.λ_.y (x λy.x y z w)) \"fo\\noö\" \"bar\" \"baz\" λy.u \"qumbl\"\n\n# ~> (Runtime) ERROR: cannot apply \"xfo\\noö\" to λy.x y\n#(λx.λ_.(x λy.x y)) \"xfo\\noö\" \"xbar\" \"xbaz\" λz.\"qumbl\"\n\n#(λy.λz.λx.y (λy.y z)) \"y\" \"z\"\n\n# K applied to \"foo\" and something: ~> \"foo\"\n#(λx.λ_.x) \"foo\" (λf.λg.λx.f (g x))\n\n# Turing's Y:\n#(λU.U U) (λu.λf.f (u u f))\n\n# Turing's Y applied to a function that ignores param self:\n#(λU.U U) (λu.λf.f (u u f)) (λself.λx.x)\n\n\n(λU.λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n        (λnil.λcons.λcar.λcdr.λfoldl.\n            (λxs.\n                #nil\n                #car xs              # \"a\"\n                #car nil             # ~> (Runtime) ERROR: cannot apply \"car\" to \"nil\"\n                #cdr xs              # (cons \"b\" (cons \"c\" nil))\n                #car (cdr xs)        # \"b\"\n                #cdr (cdr xs)        # (cons \"c\", nil)\n                #car (cdr (cdr xs))  # \"c\"\n                #foldl (λx.λ_.x) \"zzz\" xs   # \"zzz\"\n                #foldl (λ_.λx.x) \"zzz\" xs   # \"c\"\n                #foldl\n                #Y\n                (λy.λx.λzzz.x y) \"foo\" ((λx.λu.u x) ((λa.λb.λ_.a b) \"bar\" \"qumbl\"))    # TODO: two free x under *different* binders\n            ) (cons \"a\" (cons \"b\" (cons \"c\" nil)))\n        )\n        (λonNil.λonCons.onNil)                  # ctor nil\n        (λx.λxs.λonNil.λonCons.onCons x xs)     # ctor cons\n        (λxs.xs (\"car\" \"nil\") (λhd.λtl.hd))     # car   (provoke error on nil)\n        (λxs.xs (\"cdr\" \"nil\") (λhd.λtl.tl))     # cdr   (provoke error on nil)\n        (Y λself.λf.λstart.λxs.                 # foldl\n            xs start\n               λhd.λtl.self f (f start hd) tl\n        )\n    )\n    (U U)   # Y\n)\n(λu.λf.f (u u f))       # U\n(λx.x x)                # M\n(λf.λx.λy.f y x)        # C\n(λf.λg.λx.f (g x))      # B\n(λf.λg.λx.f x (g x))    # S\n(λx.λ_.x)               # K\n(λx.x)                  # I\n)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .λinfo :decl(static))
      - QAST::Op(list)
        - QAST::Op(list)
          - QAST::SVal(zzz)
          - QAST::IVal(1110)
          - QAST::IVal(8)
          - QAST::SVal(x y)
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1107)
          - QAST::IVal(11)
          - QAST::SVal(y)
        - QAST::Op(list)
          - QAST::SVal(y)
          - QAST::IVal(1104)
          - QAST::IVal(14)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(u)
          - QAST::IVal(1131)
          - QAST::IVal(6)
          - QAST::SVal(x)
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1128)
          - QAST::IVal(9)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(_)
          - QAST::IVal(1147)
          - QAST::IVal(6)
          - QAST::SVal(a b)
        - QAST::Op(list)
          - QAST::SVal(b)
          - QAST::IVal(1144)
          - QAST::IVal(9)
          - QAST::SVal(a)
        - QAST::Op(list)
          - QAST::SVal(a)
          - QAST::IVal(1141)
          - QAST::IVal(12)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(xs)
          - QAST::IVal(581)
          - QAST::IVal(650)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(foldl)
          - QAST::IVal(560)
          - QAST::IVal(718)
          - QAST::SVal(cons nil)
        - QAST::Op(list)
          - QAST::SVal(cdr)
          - QAST::IVal(555)
          - QAST::IVal(723)
          - QAST::SVal(cons nil)
        - QAST::Op(list)
          - QAST::SVal(car)
          - QAST::IVal(550)
          - QAST::IVal(728)
          - QAST::SVal(cons nil)
        - QAST::Op(list)
          - QAST::SVal(cons)
          - QAST::IVal(544)
          - QAST::IVal(734)
          - QAST::SVal(nil)
        - QAST::Op(list)
          - QAST::SVal(nil)
          - QAST::IVal(539)
          - QAST::IVal(739)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(onCons)
          - QAST::IVal(1296)
          - QAST::IVal(13)
          - QAST::SVal(onNil)
        - QAST::Op(list)
          - QAST::SVal(onNil)
          - QAST::IVal(1289)
          - QAST::IVal(20)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(onCons)
          - QAST::IVal(1362)
          - QAST::IVal(19)
          - QAST::SVal(x xs)
        - QAST::Op(list)
          - QAST::SVal(onNil)
          - QAST::IVal(1355)
          - QAST::IVal(26)
          - QAST::SVal(x xs)
        - QAST::Op(list)
          - QAST::SVal(xs)
          - QAST::IVal(1351)
          - QAST::IVal(30)
          - QAST::SVal(x)
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1348)
          - QAST::IVal(33)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(tl)
          - QAST::IVal(1434)
          - QAST::IVal(6)
          - QAST::SVal(hd)
        - QAST::Op(list)
          - QAST::SVal(hd)
          - QAST::IVal(1430)
          - QAST::IVal(10)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(xs)
          - QAST::IVal(1408)
          - QAST::IVal(33)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(tl)
          - QAST::IVal(1513)
          - QAST::IVal(6)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(hd)
          - QAST::IVal(1509)
          - QAST::IVal(10)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(xs)
          - QAST::IVal(1487)
          - QAST::IVal(33)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(tl)
          - QAST::IVal(1653)
          - QAST::IVal(35)
          - QAST::SVal(self f start hd)
        - QAST::Op(list)
          - QAST::SVal(hd)
          - QAST::IVal(1649)
          - QAST::IVal(39)
          - QAST::SVal(self f start)
        - QAST::Op(list)
          - QAST::SVal(xs)
          - QAST::IVal(1584)
          - QAST::IVal(104)
          - QAST::SVal(start self f)
        - QAST::Op(list)
          - QAST::SVal(start)
          - QAST::IVal(1577)
          - QAST::IVal(111)
          - QAST::SVal(self f)
        - QAST::Op(list)
          - QAST::SVal(f)
          - QAST::IVal(1574)
          - QAST::IVal(114)
          - QAST::SVal(self)
        - QAST::Op(list)
          - QAST::SVal(self)
          - QAST::IVal(1568)
          - QAST::IVal(120)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(Y)
          - QAST::IVal(509)
          - QAST::IVal(1185)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(I)
          - QAST::IVal(500)
          - QAST::IVal(1212)
          - QAST::SVal(U)
        - QAST::Op(list)
          - QAST::SVal(K)
          - QAST::IVal(497)
          - QAST::IVal(1215)
          - QAST::SVal(U)
        - QAST::Op(list)
          - QAST::SVal(S)
          - QAST::IVal(494)
          - QAST::IVal(1218)
          - QAST::SVal(U)
        - QAST::Op(list)
          - QAST::SVal(B)
          - QAST::IVal(491)
          - QAST::IVal(1221)
          - QAST::SVal(U)
        - QAST::Op(list)
          - QAST::SVal(C)
          - QAST::IVal(488)
          - QAST::IVal(1224)
          - QAST::SVal(U)
        - QAST::Op(list)
          - QAST::SVal(M)
          - QAST::IVal(485)
          - QAST::IVal(1227)
          - QAST::SVal(U)
        - QAST::Op(list)
          - QAST::SVal(U)
          - QAST::IVal(482)
          - QAST::IVal(1230)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(f)
          - QAST::IVal(1718)
          - QAST::IVal(12)
          - QAST::SVal(u)
        - QAST::Op(list)
          - QAST::SVal(u)
          - QAST::IVal(1715)
          - QAST::IVal(15)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1743)
          - QAST::IVal(6)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(y)
          - QAST::IVal(1777)
          - QAST::IVal(8)
          - QAST::SVal(f x)
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1774)
          - QAST::IVal(11)
          - QAST::SVal(f)
        - QAST::Op(list)
          - QAST::SVal(f)
          - QAST::IVal(1771)
          - QAST::IVal(14)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1805)
          - QAST::IVal(10)
          - QAST::SVal(f g)
        - QAST::Op(list)
          - QAST::SVal(g)
          - QAST::IVal(1802)
          - QAST::IVal(13)
          - QAST::SVal(f)
        - QAST::Op(list)
          - QAST::SVal(f)
          - QAST::IVal(1799)
          - QAST::IVal(16)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1833)
          - QAST::IVal(12)
          - QAST::SVal(f g)
        - QAST::Op(list)
          - QAST::SVal(g)
          - QAST::IVal(1830)
          - QAST::IVal(15)
          - QAST::SVal(f)
        - QAST::Op(list)
          - QAST::SVal(f)
          - QAST::IVal(1827)
          - QAST::IVal(18)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(_)
          - QAST::IVal(1858)
          - QAST::IVal(4)
          - QAST::SVal(x)
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1855)
          - QAST::IVal(7)
          - QAST::SVal
        - QAST::Op(list)
          - QAST::SVal(x)
          - QAST::IVal(1883)
          - QAST::IVal(4)
          - QAST::SVal
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .ifTag :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical subject :decl(param))
        - QAST::Var+{Var}(lexical tag :decl(param))
        - QAST::Var+{Var}(lexical then :decl(param))
        - QAST::Var+{Var}(lexical else :decl(param))
        - QAST::Var+{Var}(lexical tagAndId :decl(var))
        - QAST::Op(if)
          - QAST::Op(islist)
            - QAST::Var+{Var}(lexical subject :decl())
          - QAST::Stmts
            - QAST::Op(bind)
              - QAST::Var+{Var}(lexical tagAndId :decl())
              - QAST::Op(atpos)
                - QAST::Var+{Var}(lexical subject :decl())
                - QAST::IVal(0)
            - QAST::Op(if)
              - QAST::Op(iseq_s)
                - QAST::Var+{Var}(lexical tag :decl())
                - QAST::Op(substr)
                  - QAST::Var+{Var}(lexical tagAndId :decl())
                  - QAST::IVal(0)
                  - QAST::IVal(1)
              - QAST::Op(call then)
                - QAST::Op(atpos)
                  - QAST::Op(radix)
                    - QAST::IVal(10)
                    - QAST::Var+{Var}(lexical tagAndId :decl())
                    - QAST::IVal(1)
                    - QAST::IVal(0)
                  - QAST::IVal(0)
              - QAST::Op(call .force)
                - QAST::Var+{Var}(lexical else :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical else :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .->#n :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical subject :decl(param))
        - QAST::Var+{Var}(lexical tag :decl(param))
        - QAST::Var+{Var}(lexical index :decl(param))
        - QAST::Op(call .ifTag)
          - QAST::Var+{Var}(lexical subject :decl())
          - QAST::Var+{Var}(lexical tag :decl())
          - QAST::Block
            - QAST::Var+{Var}(lexical _ :decl(param))
            - QAST::Op(atpos)
              - QAST::Var+{Var}(lexical subject :decl())
              - QAST::Var+{Var}(lexical index :decl())
          - QAST::Op(null)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .sublist :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical list :decl(param))
        - QAST::Var+{Var}(lexical from :decl(param))
        - QAST::Var+{Var}(lexical count :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical to :decl(var))
          - QAST::Op(add_i)
            - QAST::Var+{Var}(lexical from :decl())
            - QAST::Var+{Var}(lexical count :decl())
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical out :decl(var))
          - QAST::Op(list)
        - QAST::Op(call .say)
          - QAST::Op(concat)
            - QAST::Op(concat)
              - QAST::Op(concat)
                - QAST::Op(concat)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::Op(concat)
                          - QAST::Op(concat)
                            - QAST::Op(concat)
                              - QAST::Op(concat)
                                - QAST::Op(concat)
                                  - QAST::Op(concat)
                                    - QAST::SVal(#   elems-in: )
                                    - QAST::Op(call .force)
                                      - QAST::Op(elems)
                                        - QAST::Var+{Var}(lexical list :decl())
                                  - QAST::SVal(, elems-out: )
                                - QAST::Op(call .force)
                                  - QAST::Op(elems)
                                    - QAST::Var+{Var}(lexical out :decl())
                              - QAST::SVal(, from: )
                            - QAST::Op(call .force)
                              - QAST::Var+{Var}(lexical from :decl())
                          - QAST::SVal(, count: )
                        - QAST::Op(call .force)
                          - QAST::Var+{Var}(lexical count :decl())
                      - QAST::SVal(, to: )
                    - QAST::Op(call .force)
                      - QAST::Var+{Var}(lexical to :decl())
                  - QAST::SVal(, from <= to: )
                - QAST::Op(call .force)
                  - QAST::Op(isle_i)
                    - QAST::Var+{Var}(lexical from :decl())
                    - QAST::Var+{Var}(lexical to :decl())
              - QAST::SVal(, from < to: )
            - QAST::Op(call .force)
              - QAST::Op(islt_i)
                - QAST::Var+{Var}(lexical from :decl())
                - QAST::Var+{Var}(lexical to :decl())
        - QAST::Op(while)
          - QAST::Op(islt_i)
            - QAST::Var+{Var}(lexical from :decl())
            - QAST::Var+{Var}(lexical to :decl())
          - QAST::Stmts
            - QAST::Op(push)
              - QAST::Var+{Var}(lexical out :decl())
              - QAST::Op(atpos)
                - QAST::Var+{Var}(lexical list :decl())
                - QAST::Var+{Var}(lexical from :decl())
            - QAST::Op(bind)
              - QAST::Var+{Var}(lexical from :decl())
              - QAST::Op(add_i)
                - QAST::Var+{Var}(lexical from :decl())
                - QAST::IVal(1)
            - QAST::Op(call .say)
              - QAST::Op(concat)
                - QAST::Op(concat)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::Op(concat)
                          - QAST::Op(concat)
                            - QAST::Op(concat)
                              - QAST::Op(concat)
                                - QAST::Op(concat)
                                  - QAST::Op(concat)
                                    - QAST::Op(concat)
                                      - QAST::Op(concat)
                                        - QAST::SVal(  # elems-in: )
                                        - QAST::Op(call .force)
                                          - QAST::Op(elems)
                                            - QAST::Var+{Var}(lexical list :decl())
                                      - QAST::SVal(, elems-out: )
                                    - QAST::Op(call .force)
                                      - QAST::Op(elems)
                                        - QAST::Var+{Var}(lexical out :decl())
                                  - QAST::SVal(, from: )
                                - QAST::Op(call .force)
                                  - QAST::Var+{Var}(lexical from :decl())
                              - QAST::SVal(, count: )
                            - QAST::Op(call .force)
                              - QAST::Var+{Var}(lexical count :decl())
                          - QAST::SVal(, to: )
                        - QAST::Op(call .force)
                          - QAST::Var+{Var}(lexical to :decl())
                      - QAST::SVal(, from <= to: )
                    - QAST::Op(call .force)
                      - QAST::Op(isle_i)
                        - QAST::Var+{Var}(lexical from :decl())
                        - QAST::Var+{Var}(lexical to :decl())
                  - QAST::SVal(, from < to: )
                - QAST::Op(call .force)
                  - QAST::Op(islt_i)
                    - QAST::Var+{Var}(lexical from :decl())
                    - QAST::Var+{Var}(lexical to :decl())
        - QAST::Var+{Var}(lexical out :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .strOut :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical v :decl(param))
        - QAST::Var+{Var}(lexical indent :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(if)
          - QAST::Op(isstr)
            - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .strLit)
            - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .ifTag)
            - QAST::Var+{Var}(lexical v :decl())
            - QAST::SVal(λ)
            - QAST::Block
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical id :decl(param))
                - QAST::Op(call .force)
                  - QAST::Var+{Var}(lexical id :decl())
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical fvars :decl(var))
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical v :decl())
                  - QAST::IVal(2)
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical info :decl(var))
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical .λinfo :decl())
                  - QAST::Var+{Var}(lexical id :decl())
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical fnames :decl(var))
                - QAST::Op(call .sublist)
                  - QAST::Op(split)
                    - QAST::SVal( )
                    - QAST::Op(atpos)
                      - QAST::Var+{Var}(lexical info :decl())
                      - QAST::IVal(3)
                  - QAST::IVal(0)
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical from :decl(var))
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical info :decl())
                  - QAST::IVal(1)
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical length :decl(var))
                - QAST::Op(atpos)
                  - QAST::Var+{Var}(lexical info :decl())
                  - QAST::IVal(2)
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical src :decl(var))
                - QAST::Op(concat)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(call .force)
                        - QAST::Op(substr)
                          - QAST::Var+{Var}(lexical .src :decl())
                          - QAST::Var+{Var}(lexical from :decl())
                          - QAST::Var+{Var}(lexical length :decl())
                      - QAST::SVal(  # :tag()
                    - QAST::Op(call .force)
                      - QAST::Op(call .strLit)
                        - QAST::Op(atpos)
                          - QAST::Var+{Var}(lexical v :decl())
                          - QAST::IVal(0)
                  - QAST::SVal())
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical i :decl(var))
                - QAST::IVal(0)
              - QAST::Op(for)
                - QAST::Var+{Var}(lexical fnames :decl())
                - QAST::Block
                  - QAST::Var+{Var}(lexical name :decl(param))
                  - QAST::Op(bind)
                    - QAST::Var+{Var}(lexical var :decl(var))
                    - QAST::Op(atpos)
                      - QAST::Var+{Var}(lexical fvars :decl())
                      - QAST::Var+{Var}(lexical i :decl())
                  - QAST::Op(bind)
                    - QAST::Var+{Var}(lexical i :decl())
                    - QAST::Op(add_i)
                      - QAST::Var+{Var}(lexical i :decl())
                      - QAST::IVal(1)
                  - QAST::Op(bind)
                    - QAST::Var+{Var}(lexical src :decl())
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::Op(concat)
                          - QAST::Op(concat)
                            - QAST::Op(concat)
                              - QAST::Op(concat)
                                - QAST::Op(call .force)
                                  - QAST::Var+{Var}(lexical src :decl())
                                - QAST::SVal(\n)
                              - QAST::Op(call .force)
                                - QAST::Var+{Var}(lexical indent :decl())
                            - QAST::SVal(# where )
                          - QAST::Op(call .force)
                            - QAST::Var+{Var}(lexical name :decl())
                        - QAST::SVal( = )
                      - QAST::Op(call .force)
                        - QAST::Op(if)
                          - QAST::Op(iseq_s)
                            - QAST::Var+{Var}(lexical name :decl())
                            - QAST::SVal(self)
                          - QAST::SVal(...)
                          - QAST::Op(call .strOut)
                            - QAST::Var+{Var}(lexical var :decl())
                            - QAST::Op(concat)
                              - QAST::Op(call .force)
                                - QAST::Var+{Var}(lexical indent :decl())
                              - QAST::SVal(#           )
              - QAST::Var+{Var}(lexical src :decl())
            - QAST::Block
              - QAST::Op(reprname)
                - QAST::Var+{Var}(lexical v :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .delayMemo :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical block :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical wasRun :decl(var))
          - QAST::IVal(0)
        - QAST::Var+{Var}(lexical result :decl(var))
        - QAST::Block
          - QAST::Op(if)
            - QAST::Var+{Var}(lexical wasRun :decl())
            - QAST::Var+{Var}(lexical result :decl())
            - QAST::Stmts
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical wasRun :decl())
                - QAST::IVal(1)
              - QAST::Op(bind)
                - QAST::Var+{Var}(lexical result :decl())
                - QAST::Op(call block)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .force :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical x :decl(param))
        - QAST::Op(if)
          - QAST::Op(isinvokable)
            - QAST::Var+{Var}(lexical x :decl())
          - QAST::Op(call x)
          - QAST::Var+{Var}(lexical x :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .say :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical v :decl(param))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical v :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical v :decl())
        - QAST::Op(say)
          - QAST::Op(if)
            - QAST::Op(isstr)
              - QAST::Var+{Var}(lexical v :decl())
            - QAST::Var+{Var}(lexical v :decl())
            - QAST::Op(call .strOut)
              - QAST::Var+{Var}(lexical v :decl())
              - QAST::SVal
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .strLit :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical s :decl(param))
        - QAST::Op(concat)
          - QAST::Op(concat)
            - QAST::SVal(\")
            - QAST::Op(call .force)
              - QAST::Op(escape)
                - QAST::Var+{Var}(lexical s :decl())
          - QAST::SVal(\")
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .apply1 :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical f :decl(param))
        - QAST::Var+{Var}(lexical a1 :decl(param))
        - QAST::Var+{Var}(lexical result :decl(var))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical f :decl())
          - QAST::Op(call .force)
            - QAST::Var+{Var}(lexical f :decl())
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical result :decl())
          - QAST::Op(call)
            - QAST::Op(defor)
              - QAST::Op(call .->#n)
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::SVal(λ)
                - QAST::IVal(1)
              - QAST::Op(if)
                - QAST::Op(isinvokable)
                  - QAST::Var+{Var}(lexical f :decl())
                - QAST::Var+{Var}(lexical f :decl())
                - QAST::Op(die)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::SVal(ERROR: cannot apply )
                        - QAST::Op(call .force)
                          - QAST::Op(call .strLit)
                            - QAST::Var+{Var}(lexical f :decl())
                      - QAST::SVal( to )
                    - QAST::Op(call .force)
                      - QAST::Op(call .strOut)
                        - QAST::Var+{Var}(lexical a1 :decl())
                        - QAST::SVal
            - QAST::Var+{Var}(lexical a1 :decl())
        - QAST::Op(call .force)
          - QAST::Var+{Var}(lexical result :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .testDelay01 :decl(static))
      - QAST::Op(call .delayMemo)
        - QAST::Block
          - QAST::Stmts
            - QAST::Op(say)
              - QAST::SVal(.testDelay01 forced!!!!)
            - QAST::SVal(42)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .testDelay02 :decl(static))
      - QAST::Block
        - QAST::Var+{Var}(lexical delayed :decl(param))
        - QAST::Var+{Var}(lexical simple :decl(var))
        - QAST::Var+{Var}(lexical memo :decl(var))
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical simple :decl())
          - QAST::Var+{Var}(lexical delayed :decl())
        - QAST::Op(bind)
          - QAST::Var+{Var}(lexical memo :decl())
          - QAST::Var+{Var}(lexical delayed :decl())
        - QAST::Var+{Var}(lexical memo :decl())
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .qastSize :decl(static))
      - QAST::NVal(1232)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .blockCount :decl(static))
      - QAST::NVal(101)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .listCount :decl(static))
      - QAST::NVal(167)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .ivalCount :decl(static))
      - QAST::NVal(129)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .svalCount :decl(static))
      - QAST::NVal(218)
    - QAST::Op(bind)
      - QAST::Var+{Var}(lexical .svalSize :decl(static))
      - QAST::NVal(2763)
    - QAST::Block
      - QAST::Var+{Var}(local mainResult :decl(var))
      - QAST::Op(call .say)
        - QAST::Op(concat)
          - QAST::Op(concat)
            - QAST::Op(concat)
              - QAST::Op(concat)
                - QAST::Op(concat)
                  - QAST::Op(concat)
                    - QAST::Op(concat)
                      - QAST::Op(concat)
                        - QAST::Op(concat)
                          - QAST::Op(concat)
                            - QAST::Op(concat)
                              - QAST::Op(concat)
                                - QAST::SVal(55 lambdas\n)
                                - QAST::Op(call .force)
                                  - QAST::Var+{Var}(lexical .qastSize :decl())
                              - QAST::SVal( QAST::Node s\n)
                            - QAST::Op(call .force)
                              - QAST::Var+{Var}(lexical .blockCount :decl())
                          - QAST::SVal( QAST::Block s\n)
                        - QAST::Op(call .force)
                          - QAST::Var+{Var}(lexical .listCount :decl())
                      - QAST::SVal( QAST::Op(list) s\n)
                    - QAST::Op(call .force)
                      - QAST::Var+{Var}(lexical .ivalCount :decl())
                  - QAST::SVal( QAST::IVal s\n)
                - QAST::Op(call .force)
                  - QAST::Var+{Var}(lexical .svalSize :decl())
              - QAST::SVal( chars ttl in )
            - QAST::Op(call .force)
              - QAST::Var+{Var}(lexical .svalCount :decl())
          - QAST::SVal( QAST::SVal s\n------------------------------------------------)
      - QAST::Op(bind)
        - QAST::Var+{Var}(local mainResult :decl())
        - QAST::Op(call .strOut)
          - QAST::Op(call .apply1) (λU.λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:...
            - QAST::Op(call .apply1)
              - QAST::Op(call .apply1)
                - QAST::Op(call .apply1)
                  - QAST::Op(call .apply1)
                    - QAST::Op(call .apply1)
                      - QAST::Op(call .apply1)
                        - QAST::Op(list)
                          - QAST::SVal(λ39)
                          - QAST::Block λU.λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\...
                            - QAST::Var+{Var}(lexical U :decl(param)) U
                            - QAST::Op(list)
                              - QAST::SVal(λ38)
                              - QAST::Block λM.λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n  ...
                                - QAST::Var+{Var}(lexical M :decl(param)) M
                                - QAST::Op(list)
                                  - QAST::SVal(λ37)
                                  - QAST::Block λC.λB.λS.λK.λI.\n    (λY.\n        # Lists:\n     ...
                                    - QAST::Var+{Var}(lexical C :decl(param)) C
                                    - QAST::Op(list)
                                      - QAST::SVal(λ36)
                                      - QAST::Block λB.λS.λK.λI.\n    (λY.\n        # Lists:\n        ...
                                        - QAST::Var+{Var}(lexical B :decl(param)) B
                                        - QAST::Op(list)
                                          - QAST::SVal(λ35)
                                          - QAST::Block λS.λK.λI.\n    (λY.\n        # Lists:\n        (λn...
                                            - QAST::Var+{Var}(lexical S :decl(param)) S
                                            - QAST::Op(list)
                                              - QAST::SVal(λ34)
                                              - QAST::Block λK.λI.\n    (λY.\n        # Lists:\n        (λnil....
                                                - QAST::Var+{Var}(lexical K :decl(param)) K
                                                - QAST::Op(list)
                                                  - QAST::SVal(λ33)
                                                  - QAST::Block λI.\n    (λY.\n        # Lists:\n        (λnil.λco...
                                                    - QAST::Var+{Var}(lexical I :decl(param)) I
                                                    - QAST::Op(call .apply1) \n    (λY.\n        # Lists:\n        (λnil.λcons....
                                                      - QAST::Op(list)
                                                        - QAST::SVal(λ32)
                                                        - QAST::Block λY.\n        # Lists:\n        (λnil.λcons.λcar.λc...
                                                          - QAST::Var+{Var}(lexical Y :decl(param)) Y
                                                          - QAST::Op(call .apply1) \n        # Lists:\n        (λnil.λcons.λcar.λcdr....
                                                            - QAST::Op(call .apply1)
                                                              - QAST::Op(call .apply1)
                                                                - QAST::Op(call .apply1)
                                                                  - QAST::Op(call .apply1)
                                                                    - QAST::Op(list)
                                                                      - QAST::SVal(λ13)
                                                                      - QAST::Block λnil.λcons.λcar.λcdr.λfoldl.\n            (λxs.\n ...
                                                                        - QAST::Var+{Var}(lexical nil :decl(param)) nil
                                                                        - QAST::Op(list)
                                                                          - QAST::SVal(λ12)
                                                                          - QAST::Block λcons.λcar.λcdr.λfoldl.\n            (λxs.\n      ...
                                                                            - QAST::Var+{Var}(lexical cons :decl(param)) cons
                                                                            - QAST::Op(list)
                                                                              - QAST::SVal(λ11)
                                                                              - QAST::Block λcar.λcdr.λfoldl.\n            (λxs.\n            ...
                                                                                - QAST::Var+{Var}(lexical car :decl(param)) car
                                                                                - QAST::Op(list)
                                                                                  - QAST::SVal(λ10)
                                                                                  - QAST::Block λcdr.λfoldl.\n            (λxs.\n                #...
                                                                                    - QAST::Var+{Var}(lexical cdr :decl(param)) cdr
                                                                                    - QAST::Op(list)
                                                                                      - QAST::SVal(λ9)
                                                                                      - QAST::Block λfoldl.\n            (λxs.\n                #nil\n...
                                                                                        - QAST::Var+{Var}(lexical foldl :decl(param)) foldl
                                                                                        - QAST::Op(call .apply1) \n            (λxs.\n                #nil\n       ...
                                                                                          - QAST::Op(list)
                                                                                            - QAST::SVal(λ8)
                                                                                            - QAST::Block λxs.\n                #nil\n                #car x...
                                                                                              - QAST::Var+{Var}(lexical xs :decl(param)) xs
                                                                                              - QAST::Op(call .apply1) \n                #nil\n                #car xs   ...
                                                                                                - QAST::Op(call .apply1)
                                                                                                  - QAST::Op(list)
                                                                                                    - QAST::SVal(λ2)
                                                                                                    - QAST::Block λy.λx.λzzz.x y
                                                                                                      - QAST::Var+{Var}(lexical y :decl(param)) y
                                                                                                      - QAST::Op(list)
                                                                                                        - QAST::SVal(λ1)
                                                                                                        - QAST::Block λx.λzzz.x y
                                                                                                          - QAST::Var+{Var}(lexical x :decl(param)) x
                                                                                                          - QAST::Op(list)
                                                                                                            - QAST::SVal(λ0)
                                                                                                            - QAST::Block λzzz.x y
                                                                                                              - QAST::Var+{Var}(lexical zzz :decl(param)) zzz
                                                                                                              - QAST::Op(call .apply1) x y
                                                                                                                - QAST::Var+{Var}(lexical x :decl()) x
                                                                                                                - QAST::Var+{Var}(lexical y :decl()) y
                                                                                                            - QAST::Op(list)
                                                                                                              - QAST::Var+{Var}(lexical x :decl()) x
                                                                                                              - QAST::Var+{Var}(lexical y :decl()) y
                                                                                                        - QAST::Op(list)
                                                                                                          - QAST::Var+{Var}(lexical y :decl()) y
                                                                                                    - QAST::Op(list)
                                                                                                  - QAST::SVal(foo)
                                                                                                - QAST::Op(call .delayMemo)
                                                                                                  - QAST::Block
                                                                                                    - QAST::Op(call .apply1) (λx.λu.u x) ((λa.λb.λ_.a b) \"bar\" \"qumbl\")
                                                                                                      - QAST::Op(list)
                                                                                                        - QAST::SVal(λ4)
                                                                                                        - QAST::Block λx.λu.u x
                                                                                                          - QAST::Var+{Var}(lexical x :decl(param)) x
                                                                                                          - QAST::Op(list)
                                                                                                            - QAST::SVal(λ3)
                                                                                                            - QAST::Block λu.u x
                                                                                                              - QAST::Var+{Var}(lexical u :decl(param)) u
                                                                                                              - QAST::Op(call .apply1) u x
                                                                                                                - QAST::Var+{Var}(lexical u :decl()) u
                                                                                                                - QAST::Var+{Var}(lexical x :decl()) x
                                                                                                            - QAST::Op(list)
                                                                                                              - QAST::Var+{Var}(lexical x :decl()) x
                                                                                                        - QAST::Op(list)
                                                                                                      - QAST::Op(call .delayMemo)
                                                                                                        - QAST::Block
                                                                                                          - QAST::Op(call .apply1) (λa.λb.λ_.a b) \"bar\" \"qumbl\"
                                                                                                            - QAST::Op(call .apply1)
                                                                                                              - QAST::Op(list)
                                                                                                                - QAST::SVal(λ7)
                                                                                                                - QAST::Block λa.λb.λ_.a b
                                                                                                                  - QAST::Var+{Var}(lexical a :decl(param)) a
                                                                                                                  - QAST::Op(list)
                                                                                                                    - QAST::SVal(λ6)
                                                                                                                    - QAST::Block λb.λ_.a b
                                                                                                                      - QAST::Var+{Var}(lexical b :decl(param)) b
                                                                                                                      - QAST::Op(list)
                                                                                                                        - QAST::SVal(λ5)
                                                                                                                        - QAST::Block λ_.a b
                                                                                                                          - QAST::Var+{Var}(lexical _ :decl(param)) _
                                                                                                                          - QAST::Op(call .apply1) a b
                                                                                                                            - QAST::Var+{Var}(lexical a :decl()) a
                                                                                                                            - QAST::Var+{Var}(lexical b :decl()) b
                                                                                                                        - QAST::Op(list)
                                                                                                                          - QAST::Var+{Var}(lexical a :decl()) a
                                                                                                                          - QAST::Var+{Var}(lexical b :decl()) b
                                                                                                                    - QAST::Op(list)
                                                                                                                      - QAST::Var+{Var}(lexical a :decl()) a
                                                                                                                - QAST::Op(list)
                                                                                                              - QAST::SVal(bar)
                                                                                                            - QAST::SVal(qumbl)
                                                                                            - QAST::Op(list)
                                                                                          - QAST::Op(call .delayMemo)
                                                                                            - QAST::Block
                                                                                              - QAST::Op(call .apply1) cons \"a\" (cons \"b\" (cons \"c\" nil))
                                                                                                - QAST::Op(call .apply1)
                                                                                                  - QAST::Var+{Var}(lexical cons :decl()) cons
                                                                                                  - QAST::SVal(a)
                                                                                                - QAST::Op(call .delayMemo)
                                                                                                  - QAST::Block
                                                                                                    - QAST::Op(call .apply1) cons \"b\" (cons \"c\" nil)
                                                                                                      - QAST::Op(call .apply1)
                                                                                                        - QAST::Var+{Var}(lexical cons :decl()) cons
                                                                                                        - QAST::SVal(b)
                                                                                                      - QAST::Op(call .delayMemo)
                                                                                                        - QAST::Block
                                                                                                          - QAST::Op(call .apply1) cons \"c\" nil
                                                                                                            - QAST::Op(call .apply1)
                                                                                                              - QAST::Var+{Var}(lexical cons :decl()) cons
                                                                                                              - QAST::SVal(c)
                                                                                                            - QAST::Var+{Var}(lexical nil :decl()) nil
                                                                                      - QAST::Op(list)
                                                                                        - QAST::Var+{Var}(lexical cons :decl()) cons
                                                                                        - QAST::Var+{Var}(lexical nil :decl()) nil
                                                                                  - QAST::Op(list)
                                                                                    - QAST::Var+{Var}(lexical cons :decl()) cons
                                                                                    - QAST::Var+{Var}(lexical nil :decl()) nil
                                                                              - QAST::Op(list)
                                                                                - QAST::Var+{Var}(lexical cons :decl()) cons
                                                                                - QAST::Var+{Var}(lexical nil :decl()) nil
                                                                          - QAST::Op(list)
                                                                            - QAST::Var+{Var}(lexical nil :decl()) nil
                                                                      - QAST::Op(list)
                                                                    - QAST::Op(call .delayMemo)
                                                                      - QAST::Block
                                                                        - QAST::Op(list)
                                                                          - QAST::SVal(λ15)
                                                                          - QAST::Block λonNil.λonCons.onNil
                                                                            - QAST::Var+{Var}(lexical onNil :decl(param)) onNil
                                                                            - QAST::Op(list)
                                                                              - QAST::SVal(λ14)
                                                                              - QAST::Block λonCons.onNil
                                                                                - QAST::Var+{Var}(lexical onCons :decl(param)) onCons
                                                                                - QAST::Var+{Var}(lexical onNil :decl()) onNil
                                                                              - QAST::Op(list)
                                                                                - QAST::Var+{Var}(lexical onNil :decl()) onNil
                                                                          - QAST::Op(list)
                                                                  - QAST::Op(call .delayMemo)
                                                                    - QAST::Block
                                                                      - QAST::Op(list)
                                                                        - QAST::SVal(λ19)
                                                                        - QAST::Block λx.λxs.λonNil.λonCons.onCons x xs
                                                                          - QAST::Var+{Var}(lexical x :decl(param)) x
                                                                          - QAST::Op(list)
                                                                            - QAST::SVal(λ18)
                                                                            - QAST::Block λxs.λonNil.λonCons.onCons x xs
                                                                              - QAST::Var+{Var}(lexical xs :decl(param)) xs
                                                                              - QAST::Op(list)
                                                                                - QAST::SVal(λ17)
                                                                                - QAST::Block λonNil.λonCons.onCons x xs
                                                                                  - QAST::Var+{Var}(lexical onNil :decl(param)) onNil
                                                                                  - QAST::Op(list)
                                                                                    - QAST::SVal(λ16)
                                                                                    - QAST::Block λonCons.onCons x xs
                                                                                      - QAST::Var+{Var}(lexical onCons :decl(param)) onCons
                                                                                      - QAST::Op(call .apply1) onCons x xs
                                                                                        - QAST::Op(call .apply1)
                                                                                          - QAST::Var+{Var}(lexical onCons :decl()) onCons
                                                                                          - QAST::Var+{Var}(lexical x :decl()) x
                                                                                        - QAST::Var+{Var}(lexical xs :decl()) xs
                                                                                    - QAST::Op(list)
                                                                                      - QAST::Var+{Var}(lexical x :decl()) x
                                                                                      - QAST::Var+{Var}(lexical xs :decl()) xs
                                                                                - QAST::Op(list)
                                                                                  - QAST::Var+{Var}(lexical x :decl()) x
                                                                                  - QAST::Var+{Var}(lexical xs :decl()) xs
                                                                            - QAST::Op(list)
                                                                              - QAST::Var+{Var}(lexical x :decl()) x
                                                                        - QAST::Op(list)
                                                                - QAST::Op(call .delayMemo)
                                                                  - QAST::Block
                                                                    - QAST::Op(list)
                                                                      - QAST::SVal(λ22)
                                                                      - QAST::Block λxs.xs (\"car\" \"nil\") (λhd.λtl.hd)
                                                                        - QAST::Var+{Var}(lexical xs :decl(param)) xs
                                                                        - QAST::Op(call .apply1) xs (\"car\" \"nil\") (λhd.λtl.hd)
                                                                          - QAST::Op(call .apply1)
                                                                            - QAST::Var+{Var}(lexical xs :decl()) xs
                                                                            - QAST::Op(call .delayMemo)
                                                                              - QAST::Block
                                                                                - QAST::Op(call .apply1) \"car\" \"nil\"
                                                                                  - QAST::SVal(car)
                                                                                  - QAST::SVal(nil)
                                                                          - QAST::Op(call .delayMemo)
                                                                            - QAST::Block
                                                                              - QAST::Op(list)
                                                                                - QAST::SVal(λ21)
                                                                                - QAST::Block λhd.λtl.hd
                                                                                  - QAST::Var+{Var}(lexical hd :decl(param)) hd
                                                                                  - QAST::Op(list)
                                                                                    - QAST::SVal(λ20)
                                                                                    - QAST::Block λtl.hd
                                                                                      - QAST::Var+{Var}(lexical tl :decl(param)) tl
                                                                                      - QAST::Var+{Var}(lexical hd :decl()) hd
                                                                                    - QAST::Op(list)
                                                                                      - QAST::Var+{Var}(lexical hd :decl()) hd
                                                                                - QAST::Op(list)
                                                                      - QAST::Op(list)
                                                              - QAST::Op(call .delayMemo)
                                                                - QAST::Block
                                                                  - QAST::Op(list)
                                                                    - QAST::SVal(λ25)
                                                                    - QAST::Block λxs.xs (\"cdr\" \"nil\") (λhd.λtl.tl)
                                                                      - QAST::Var+{Var}(lexical xs :decl(param)) xs
                                                                      - QAST::Op(call .apply1) xs (\"cdr\" \"nil\") (λhd.λtl.tl)
                                                                        - QAST::Op(call .apply1)
                                                                          - QAST::Var+{Var}(lexical xs :decl()) xs
                                                                          - QAST::Op(call .delayMemo)
                                                                            - QAST::Block
                                                                              - QAST::Op(call .apply1) \"cdr\" \"nil\"
                                                                                - QAST::SVal(cdr)
                                                                                - QAST::SVal(nil)
                                                                        - QAST::Op(call .delayMemo)
                                                                          - QAST::Block
                                                                            - QAST::Op(list)
                                                                              - QAST::SVal(λ24)
                                                                              - QAST::Block λhd.λtl.tl
                                                                                - QAST::Var+{Var}(lexical hd :decl(param)) hd
                                                                                - QAST::Op(list)
                                                                                  - QAST::SVal(λ23)
                                                                                  - QAST::Block λtl.tl
                                                                                    - QAST::Var+{Var}(lexical tl :decl(param)) tl
                                                                                    - QAST::Var+{Var}(lexical tl :decl()) tl
                                                                                  - QAST::Op(list)
                                                                              - QAST::Op(list)
                                                                    - QAST::Op(list)
                                                            - QAST::Op(call .delayMemo)
                                                              - QAST::Block
                                                                - QAST::Op(call .apply1) Y λself.λf.λstart.λxs.                 # foldl\n  ...
                                                                  - QAST::Var+{Var}(lexical Y :decl()) Y
                                                                  - QAST::Op(call .delayMemo)
                                                                    - QAST::Block
                                                                      - QAST::Op(list)
                                                                        - QAST::SVal(λ31)
                                                                        - QAST::Block λself.λf.λstart.λxs.                 # foldl\n    ...
                                                                          - QAST::Var+{Var}(lexical self :decl(param)) self
                                                                          - QAST::Op(list)
                                                                            - QAST::SVal(λ30)
                                                                            - QAST::Block λf.λstart.λxs.                 # foldl\n          ...
                                                                              - QAST::Var+{Var}(lexical f :decl(param)) f
                                                                              - QAST::Op(list)
                                                                                - QAST::SVal(λ29)
                                                                                - QAST::Block λstart.λxs.                 # foldl\n            x...
                                                                                  - QAST::Var+{Var}(lexical start :decl(param)) start
                                                                                  - QAST::Op(list)
                                                                                    - QAST::SVal(λ28)
                                                                                    - QAST::Block λxs.                 # foldl\n            xs start...
                                                                                      - QAST::Var+{Var}(lexical xs :decl(param)) xs
                                                                                      - QAST::Op(call .apply1)                  # foldl\n            xs start\n  ...
                                                                                        - QAST::Op(call .apply1)
                                                                                          - QAST::Var+{Var}(lexical xs :decl()) xs
                                                                                          - QAST::Var+{Var}(lexical start :decl()) start
                                                                                        - QAST::Op(call .delayMemo)
                                                                                          - QAST::Block
                                                                                            - QAST::Op(list)
                                                                                              - QAST::SVal(λ27)
                                                                                              - QAST::Block λhd.λtl.self f (f start hd) tl\n        
                                                                                                - QAST::Var+{Var}(lexical hd :decl(param)) hd
                                                                                                - QAST::Op(list)
                                                                                                  - QAST::SVal(λ26)
                                                                                                  - QAST::Block λtl.self f (f start hd) tl\n        
                                                                                                    - QAST::Var+{Var}(lexical tl :decl(param)) tl
                                                                                                    - QAST::Op(call .apply1) self f (f start hd) tl\n        
                                                                                                      - QAST::Op(call .apply1)
                                                                                                        - QAST::Op(call .apply1)
                                                                                                          - QAST::Var+{Var}(lexical self :decl()) self
                                                                                                          - QAST::Var+{Var}(lexical f :decl()) f
                                                                                                        - QAST::Op(call .delayMemo)
                                                                                                          - QAST::Block
                                                                                                            - QAST::Op(call .apply1) f start hd
                                                                                                              - QAST::Op(call .apply1)
                                                                                                                - QAST::Var+{Var}(lexical f :decl()) f
                                                                                                                - QAST::Var+{Var}(lexical start :decl()) start
                                                                                                              - QAST::Var+{Var}(lexical hd :decl()) hd
                                                                                                      - QAST::Var+{Var}(lexical tl :decl()) tl
                                                                                                  - QAST::Op(list)
                                                                                                    - QAST::Var+{Var}(lexical self :decl()) self
                                                                                                    - QAST::Var+{Var}(lexical f :decl()) f
                                                                                                    - QAST::Var+{Var}(lexical start :decl()) start
                                                                                                    - QAST::Var+{Var}(lexical hd :decl()) hd
                                                                                              - QAST::Op(list)
                                                                                                - QAST::Var+{Var}(lexical self :decl()) self
                                                                                                - QAST::Var+{Var}(lexical f :decl()) f
                                                                                                - QAST::Var+{Var}(lexical start :decl()) start
                                                                                    - QAST::Op(list)
                                                                                      - QAST::Var+{Var}(lexical start :decl()) start
                                                                                      - QAST::Var+{Var}(lexical self :decl()) self
                                                                                      - QAST::Var+{Var}(lexical f :decl()) f
                                                                                - QAST::Op(list)
                                                                                  - QAST::Var+{Var}(lexical self :decl()) self
                                                                                  - QAST::Var+{Var}(lexical f :decl()) f
                                                                            - QAST::Op(list)
                                                                              - QAST::Var+{Var}(lexical self :decl()) self
                                                                        - QAST::Op(list)
                                                        - QAST::Op(list)
                                                      - QAST::Op(call .delayMemo)
                                                        - QAST::Block
                                                          - QAST::Op(call .apply1) U U
                                                            - QAST::Var+{Var}(lexical U :decl()) U
                                                            - QAST::Var+{Var}(lexical U :decl()) U
                                                  - QAST::Op(list)
                                                    - QAST::Var+{Var}(lexical U :decl()) U
                                              - QAST::Op(list)
                                                - QAST::Var+{Var}(lexical U :decl()) U
                                          - QAST::Op(list)
                                            - QAST::Var+{Var}(lexical U :decl()) U
                                      - QAST::Op(list)
                                        - QAST::Var+{Var}(lexical U :decl()) U
                                  - QAST::Op(list)
                                    - QAST::Var+{Var}(lexical U :decl()) U
                              - QAST::Op(list)
                                - QAST::Var+{Var}(lexical U :decl()) U
                          - QAST::Op(list)
                        - QAST::Op(call .delayMemo)
                          - QAST::Block
                            - QAST::Op(list)
                              - QAST::SVal(λ41)
                              - QAST::Block λu.λf.f (u u f)
                                - QAST::Var+{Var}(lexical u :decl(param)) u
                                - QAST::Op(list)
                                  - QAST::SVal(λ40)
                                  - QAST::Block λf.f (u u f)
                                    - QAST::Var+{Var}(lexical f :decl(param)) f
                                    - QAST::Op(call .apply1) f (u u f)
                                      - QAST::Var+{Var}(lexical f :decl()) f
                                      - QAST::Op(call .delayMemo)
                                        - QAST::Block
                                          - QAST::Op(call .apply1) u u f
                                            - QAST::Op(call .apply1)
                                              - QAST::Var+{Var}(lexical u :decl()) u
                                              - QAST::Var+{Var}(lexical u :decl()) u
                                            - QAST::Var+{Var}(lexical f :decl()) f
                                  - QAST::Op(list)
                                    - QAST::Var+{Var}(lexical u :decl()) u
                              - QAST::Op(list)
                      - QAST::Op(call .delayMemo)
                        - QAST::Block
                          - QAST::Op(list)
                            - QAST::SVal(λ42)
                            - QAST::Block λx.x x
                              - QAST::Var+{Var}(lexical x :decl(param)) x
                              - QAST::Op(call .apply1) x x
                                - QAST::Var+{Var}(lexical x :decl()) x
                                - QAST::Var+{Var}(lexical x :decl()) x
                            - QAST::Op(list)
                    - QAST::Op(call .delayMemo)
                      - QAST::Block
                        - QAST::Op(list)
                          - QAST::SVal(λ45)
                          - QAST::Block λf.λx.λy.f y x
                            - QAST::Var+{Var}(lexical f :decl(param)) f
                            - QAST::Op(list)
                              - QAST::SVal(λ44)
                              - QAST::Block λx.λy.f y x
                                - QAST::Var+{Var}(lexical x :decl(param)) x
                                - QAST::Op(list)
                                  - QAST::SVal(λ43)
                                  - QAST::Block λy.f y x
                                    - QAST::Var+{Var}(lexical y :decl(param)) y
                                    - QAST::Op(call .apply1) f y x
                                      - QAST::Op(call .apply1)
                                        - QAST::Var+{Var}(lexical f :decl()) f
                                        - QAST::Var+{Var}(lexical y :decl()) y
                                      - QAST::Var+{Var}(lexical x :decl()) x
                                  - QAST::Op(list)
                                    - QAST::Var+{Var}(lexical f :decl()) f
                                    - QAST::Var+{Var}(lexical x :decl()) x
                              - QAST::Op(list)
                                - QAST::Var+{Var}(lexical f :decl()) f
                          - QAST::Op(list)
                  - QAST::Op(call .delayMemo)
                    - QAST::Block
                      - QAST::Op(list)
                        - QAST::SVal(λ48)
                        - QAST::Block λf.λg.λx.f (g x)
                          - QAST::Var+{Var}(lexical f :decl(param)) f
                          - QAST::Op(list)
                            - QAST::SVal(λ47)
                            - QAST::Block λg.λx.f (g x)
                              - QAST::Var+{Var}(lexical g :decl(param)) g
                              - QAST::Op(list)
                                - QAST::SVal(λ46)
                                - QAST::Block λx.f (g x)
                                  - QAST::Var+{Var}(lexical x :decl(param)) x
                                  - QAST::Op(call .apply1) f (g x)
                                    - QAST::Var+{Var}(lexical f :decl()) f
                                    - QAST::Op(call .delayMemo)
                                      - QAST::Block
                                        - QAST::Op(call .apply1) g x
                                          - QAST::Var+{Var}(lexical g :decl()) g
                                          - QAST::Var+{Var}(lexical x :decl()) x
                                - QAST::Op(list)
                                  - QAST::Var+{Var}(lexical f :decl()) f
                                  - QAST::Var+{Var}(lexical g :decl()) g
                            - QAST::Op(list)
                              - QAST::Var+{Var}(lexical f :decl()) f
                        - QAST::Op(list)
                - QAST::Op(call .delayMemo)
                  - QAST::Block
                    - QAST::Op(list)
                      - QAST::SVal(λ51)
                      - QAST::Block λf.λg.λx.f x (g x)
                        - QAST::Var+{Var}(lexical f :decl(param)) f
                        - QAST::Op(list)
                          - QAST::SVal(λ50)
                          - QAST::Block λg.λx.f x (g x)
                            - QAST::Var+{Var}(lexical g :decl(param)) g
                            - QAST::Op(list)
                              - QAST::SVal(λ49)
                              - QAST::Block λx.f x (g x)
                                - QAST::Var+{Var}(lexical x :decl(param)) x
                                - QAST::Op(call .apply1) f x (g x)
                                  - QAST::Op(call .apply1)
                                    - QAST::Var+{Var}(lexical f :decl()) f
                                    - QAST::Var+{Var}(lexical x :decl()) x
                                  - QAST::Op(call .delayMemo)
                                    - QAST::Block
                                      - QAST::Op(call .apply1) g x
                                        - QAST::Var+{Var}(lexical g :decl()) g
                                        - QAST::Var+{Var}(lexical x :decl()) x
                              - QAST::Op(list)
                                - QAST::Var+{Var}(lexical f :decl()) f
                                - QAST::Var+{Var}(lexical g :decl()) g
                          - QAST::Op(list)
                            - QAST::Var+{Var}(lexical f :decl()) f
                      - QAST::Op(list)
              - QAST::Op(call .delayMemo)
                - QAST::Block
                  - QAST::Op(list)
                    - QAST::SVal(λ53)
                    - QAST::Block λx.λ_.x
                      - QAST::Var+{Var}(lexical x :decl(param)) x
                      - QAST::Op(list)
                        - QAST::SVal(λ52)
                        - QAST::Block λ_.x
                          - QAST::Var+{Var}(lexical _ :decl(param)) _
                          - QAST::Var+{Var}(lexical x :decl()) x
                        - QAST::Op(list)
                          - QAST::Var+{Var}(lexical x :decl()) x
                    - QAST::Op(list)
            - QAST::Op(call .delayMemo)
              - QAST::Block
                - QAST::Op(list)
                  - QAST::SVal(λ54)
                  - QAST::Block λx.x
                    - QAST::Var+{Var}(lexical x :decl(param)) x
                    - QAST::Var+{Var}(lexical x :decl()) x
                  - QAST::Op(list)
          - QAST::SVal
      - QAST::Op(call .say)
        - QAST::SVal(------------------------------------------------)
      - QAST::Var+{Var}(local mainResult :decl())


Output completed (10 sec consumed) - Normal Termination